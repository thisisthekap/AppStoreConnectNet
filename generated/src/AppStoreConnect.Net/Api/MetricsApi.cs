/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>AppsBetaTesterUsagesV1MetricResponse</returns>
        AppsBetaTesterUsagesV1MetricResponse AppsBetaTesterUsagesGetMetrics_0(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of AppsBetaTesterUsagesV1MetricResponse</returns>
        ApiResponse<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetrics_0WithHttpInfo(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>AppsBetaTesterUsagesV1MetricResponse</returns>
        AppsBetaTesterUsagesV1MetricResponse BetaGroupsBetaTesterUsagesGetMetrics_0(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of AppsBetaTesterUsagesV1MetricResponse</returns>
        ApiResponse<AppsBetaTesterUsagesV1MetricResponse> BetaGroupsBetaTesterUsagesGetMetrics_0WithHttpInfo(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>BetaTesterUsagesV1MetricResponse</returns>
        BetaTesterUsagesV1MetricResponse BetaTestersBetaTesterUsagesGetMetrics_0(string id, string filterApps, string? period = default(string?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of BetaTesterUsagesV1MetricResponse</returns>
        ApiResponse<BetaTesterUsagesV1MetricResponse> BetaTestersBetaTesterUsagesGetMetrics_0WithHttpInfo(string id, string filterApps, string? period = default(string?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>BetaBuildUsagesV1MetricResponse</returns>
        BetaBuildUsagesV1MetricResponse BuildsBetaBuildUsagesGetMetrics_0(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of BetaBuildUsagesV1MetricResponse</returns>
        ApiResponse<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetrics_0WithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        GameCenterMatchmakingQueueSizesV1MetricResponse GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        GameCenterMatchmakingQueueRequestsV1MetricResponse GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        GameCenterMatchmakingQueueSizesV1MetricResponse GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        GameCenterMatchmakingQueueRequestsV1MetricResponse GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingSessionsV1MetricResponse</returns>
        GameCenterMatchmakingSessionsV1MetricResponse GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingSessionsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingSessionsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingBooleanRuleResultsV1MetricResponse</returns>
        GameCenterMatchmakingBooleanRuleResultsV1MetricResponse GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingBooleanRuleResultsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingNumberRuleResultsV1MetricResponse</returns>
        GameCenterMatchmakingNumberRuleResultsV1MetricResponse GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingNumberRuleResultsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingRuleErrorsV1MetricResponse</returns>
        GameCenterMatchmakingRuleErrorsV1MetricResponse GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingRuleErrorsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingRuleErrorsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsBetaTesterUsagesV1MetricResponse</returns>
        System.Threading.Tasks.Task<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetrics_0Async(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsBetaTesterUsagesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> AppsBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsBetaTesterUsagesV1MetricResponse</returns>
        System.Threading.Tasks.Task<AppsBetaTesterUsagesV1MetricResponse> BetaGroupsBetaTesterUsagesGetMetrics_0Async(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsBetaTesterUsagesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> BetaGroupsBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaTesterUsagesV1MetricResponse</returns>
        System.Threading.Tasks.Task<BetaTesterUsagesV1MetricResponse> BetaTestersBetaTesterUsagesGetMetrics_0Async(string id, string filterApps, string? period = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaTesterUsagesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaTesterUsagesV1MetricResponse>> BetaTestersBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(string id, string filterApps, string? period = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaBuildUsagesV1MetricResponse</returns>
        System.Threading.Tasks.Task<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetrics_0Async(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaBuildUsagesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaBuildUsagesV1MetricResponse>> BuildsBetaBuildUsagesGetMetrics_0WithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Async(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueSizesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse>> GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueRequestsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse>> GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Async(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueSizesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse>> GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueRequestsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse>> GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingSessionsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingSessionsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Async(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingSessionsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingSessionsV1MetricResponse>> GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingBooleanRuleResultsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingBooleanRuleResultsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>> GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingNumberRuleResultsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingNumberRuleResultsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>> GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingRuleErrorsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingRuleErrorsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingRuleErrorsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingRuleErrorsV1MetricResponse>> GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetricsApi : IMetricsApiSync, IMetricsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetricsApi : IDisposable, IMetricsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MetricsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MetricsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MetricsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MetricsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MetricsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MetricsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MetricsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>AppsBetaTesterUsagesV1MetricResponse</returns>
        public AppsBetaTesterUsagesV1MetricResponse AppsBetaTesterUsagesGetMetrics_0(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> localVarResponse = AppsBetaTesterUsagesGetMetrics_0WithHttpInfo(id, period, groupBy, filterBetaTesters, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of AppsBetaTesterUsagesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetrics_0WithHttpInfo(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->AppsBetaTesterUsagesGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[betaTesters]", filterBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppsBetaTesterUsagesV1MetricResponse>("/v1/apps/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaTesterUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsBetaTesterUsagesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetrics_0Async(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> localVarResponse = await AppsBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(id, period, groupBy, filterBetaTesters, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsBetaTesterUsagesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> AppsBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->AppsBetaTesterUsagesGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[betaTesters]", filterBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppsBetaTesterUsagesV1MetricResponse>("/v1/apps/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaTesterUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>AppsBetaTesterUsagesV1MetricResponse</returns>
        public AppsBetaTesterUsagesV1MetricResponse BetaGroupsBetaTesterUsagesGetMetrics_0(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> localVarResponse = BetaGroupsBetaTesterUsagesGetMetrics_0WithHttpInfo(id, period, groupBy, filterBetaTesters, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of AppsBetaTesterUsagesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> BetaGroupsBetaTesterUsagesGetMetrics_0WithHttpInfo(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->BetaGroupsBetaTesterUsagesGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[betaTesters]", filterBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppsBetaTesterUsagesV1MetricResponse>("/v1/betaGroups/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BetaGroupsBetaTesterUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsBetaTesterUsagesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<AppsBetaTesterUsagesV1MetricResponse> BetaGroupsBetaTesterUsagesGetMetrics_0Async(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> localVarResponse = await BetaGroupsBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(id, period, groupBy, filterBetaTesters, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsBetaTesterUsagesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> BetaGroupsBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->BetaGroupsBetaTesterUsagesGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[betaTesters]", filterBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppsBetaTesterUsagesV1MetricResponse>("/v1/betaGroups/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BetaGroupsBetaTesterUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>BetaTesterUsagesV1MetricResponse</returns>
        public BetaTesterUsagesV1MetricResponse BetaTestersBetaTesterUsagesGetMetrics_0(string id, string filterApps, string? period = default(string?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaTesterUsagesV1MetricResponse> localVarResponse = BetaTestersBetaTesterUsagesGetMetrics_0WithHttpInfo(id, filterApps, period, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of BetaTesterUsagesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaTesterUsagesV1MetricResponse> BetaTestersBetaTesterUsagesGetMetrics_0WithHttpInfo(string id, string filterApps, string? period = default(string?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->BetaTestersBetaTesterUsagesGetMetrics_0");

            // verify the required parameter 'filterApps' is set
            if (filterApps == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'filterApps' when calling MetricsApi->BetaTestersBetaTesterUsagesGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[apps]", filterApps));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaTesterUsagesV1MetricResponse>("/v1/betaTesters/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BetaTestersBetaTesterUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaTesterUsagesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<BetaTesterUsagesV1MetricResponse> BetaTestersBetaTesterUsagesGetMetrics_0Async(string id, string filterApps, string? period = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaTesterUsagesV1MetricResponse> localVarResponse = await BetaTestersBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(id, filterApps, period, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterApps">filter by &#39;apps&#39; relationship dimension</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaTesterUsagesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaTesterUsagesV1MetricResponse>> BetaTestersBetaTesterUsagesGetMetrics_0WithHttpInfoAsync(string id, string filterApps, string? period = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->BetaTestersBetaTesterUsagesGetMetrics_0");

            // verify the required parameter 'filterApps' is set
            if (filterApps == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'filterApps' when calling MetricsApi->BetaTestersBetaTesterUsagesGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[apps]", filterApps));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaTesterUsagesV1MetricResponse>("/v1/betaTesters/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BetaTestersBetaTesterUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>BetaBuildUsagesV1MetricResponse</returns>
        public BetaBuildUsagesV1MetricResponse BuildsBetaBuildUsagesGetMetrics_0(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse> localVarResponse = BuildsBetaBuildUsagesGetMetrics_0WithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of BetaBuildUsagesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetrics_0WithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->BuildsBetaBuildUsagesGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaBuildUsagesV1MetricResponse>("/v1/builds/{id}/metrics/betaBuildUsages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaBuildUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaBuildUsagesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetrics_0Async(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse> localVarResponse = await BuildsBetaBuildUsagesGetMetrics_0WithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaBuildUsagesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse>> BuildsBetaBuildUsagesGetMetrics_0WithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->BuildsBetaBuildUsagesGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaBuildUsagesV1MetricResponse>("/v1/builds/{id}/metrics/betaBuildUsages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaBuildUsagesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0WithHttpInfo(id, granularity, groupBy, filterResult, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = await GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(id, granularity, groupBy, filterResult, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0WithHttpInfo(id, granularity, groupBy, filterResult, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = await GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(id, granularity, groupBy, filterResult, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        public GameCenterMatchmakingQueueSizesV1MetricResponse GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> localVarResponse = GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0WithHttpInfo(id, granularity, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingQueueSizesV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Async(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> localVarResponse = await GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0WithHttpInfoAsync(id, granularity, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueSizesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse>> GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingQueueSizesV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        public GameCenterMatchmakingQueueRequestsV1MetricResponse GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> localVarResponse = GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0WithHttpInfo(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (filterGameCenterDetail != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterDetail]", filterGameCenterDetail));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingQueueRequestsV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> localVarResponse = await GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueRequestsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse>> GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (filterGameCenterDetail != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterDetail]", filterGameCenterDetail));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingQueueRequestsV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        public GameCenterMatchmakingQueueSizesV1MetricResponse GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> localVarResponse = GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0WithHttpInfo(id, granularity, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingQueueSizesV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueSizesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingQueueSizesV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Async(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse> localVarResponse = await GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0WithHttpInfoAsync(id, granularity, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueSizesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueSizesV1MetricResponse>> GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingQueueSizesV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        public GameCenterMatchmakingQueueRequestsV1MetricResponse GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> localVarResponse = GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0WithHttpInfo(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (filterGameCenterDetail != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterDetail]", filterGameCenterDetail));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingQueueRequestsV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingQueueRequestsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingQueueRequestsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse> localVarResponse = await GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterDetail">filter by &#39;gameCenterDetail&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingQueueRequestsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingQueueRequestsV1MetricResponse>> GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterDetail = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (filterGameCenterDetail != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterDetail]", filterGameCenterDetail));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingQueueRequestsV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingSessionsV1MetricResponse</returns>
        public GameCenterMatchmakingSessionsV1MetricResponse GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingSessionsV1MetricResponse> localVarResponse = GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0WithHttpInfo(id, granularity, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingSessionsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingSessionsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingSessionsV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingSessionsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingSessionsV1MetricResponse> GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Async(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingSessionsV1MetricResponse> localVarResponse = await GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0WithHttpInfoAsync(id, granularity, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingSessionsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingSessionsV1MetricResponse>> GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingSessionsV1MetricResponse>("/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingBooleanRuleResultsV1MetricResponse</returns>
        public GameCenterMatchmakingBooleanRuleResultsV1MetricResponse GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> localVarResponse = GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0WithHttpInfo(id, granularity, groupBy, filterResult, filterGameCenterMatchmakingQueue, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingBooleanRuleResultsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (filterGameCenterMatchmakingQueue != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>("/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingBooleanRuleResultsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse> localVarResponse = await GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0WithHttpInfoAsync(id, granularity, groupBy, filterResult, filterGameCenterMatchmakingQueue, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingBooleanRuleResultsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>> GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (filterGameCenterMatchmakingQueue != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>("/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingNumberRuleResultsV1MetricResponse</returns>
        public GameCenterMatchmakingNumberRuleResultsV1MetricResponse GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> localVarResponse = GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0WithHttpInfo(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingNumberRuleResultsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterGameCenterMatchmakingQueue != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>("/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingNumberRuleResultsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingNumberRuleResultsV1MetricResponse> localVarResponse = await GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0WithHttpInfoAsync(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingNumberRuleResultsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>> GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterGameCenterMatchmakingQueue != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>("/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingRuleErrorsV1MetricResponse</returns>
        public GameCenterMatchmakingRuleErrorsV1MetricResponse GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingRuleErrorsV1MetricResponse> localVarResponse = GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0WithHttpInfo(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingRuleErrorsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingRuleErrorsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0WithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterGameCenterMatchmakingQueue != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingRuleErrorsV1MetricResponse>("/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingRuleErrorsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingRuleErrorsV1MetricResponse> GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Async(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingRuleErrorsV1MetricResponse> localVarResponse = await GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0WithHttpInfoAsync(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterGameCenterMatchmakingQueue">filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingRuleErrorsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingRuleErrorsV1MetricResponse>> GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0WithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterGameCenterMatchmakingQueue = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling MetricsApi->GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterGameCenterMatchmakingQueue != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[gameCenterMatchmakingQueue]", filterGameCenterMatchmakingQueue));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingRuleErrorsV1MetricResponse>("/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
