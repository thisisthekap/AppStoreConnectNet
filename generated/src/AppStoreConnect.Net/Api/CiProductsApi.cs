/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICiProductsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ScmRepositoriesResponse</returns>
        ScmRepositoriesResponse CiProductsAdditionalRepositoriesGetToManyRelated(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of ScmRepositoriesResponse</returns>
        ApiResponse<ScmRepositoriesResponse> CiProductsAdditionalRepositoriesGetToManyRelatedWithHttpInfo(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppResponse</returns>
        AppResponse CiProductsAppGetToOneRelated(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppResponse</returns>
        ApiResponse<AppResponse> CiProductsAppGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>CiBuildRunsResponse</returns>
        CiBuildRunsResponse CiProductsBuildRunsGetToManyRelated(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiBuildRunsResponse</returns>
        ApiResponse<CiBuildRunsResponse> CiProductsBuildRunsGetToManyRelatedWithHttpInfo(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void CiProductsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CiProductsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>CiProductsResponse</returns>
        CiProductsResponse CiProductsGetCollection(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiProductsResponse</returns>
        ApiResponse<CiProductsResponse> CiProductsGetCollectionWithHttpInfo(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>CiProductResponse</returns>
        CiProductResponse CiProductsGetInstance(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiProductResponse</returns>
        ApiResponse<CiProductResponse> CiProductsGetInstanceWithHttpInfo(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ScmRepositoriesResponse</returns>
        ScmRepositoriesResponse CiProductsPrimaryRepositoriesGetToManyRelated(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of ScmRepositoriesResponse</returns>
        ApiResponse<ScmRepositoriesResponse> CiProductsPrimaryRepositoriesGetToManyRelatedWithHttpInfo(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>CiWorkflowsResponse</returns>
        CiWorkflowsResponse CiProductsWorkflowsGetToManyRelated(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of CiWorkflowsResponse</returns>
        ApiResponse<CiWorkflowsResponse> CiProductsWorkflowsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICiProductsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScmRepositoriesResponse</returns>
        System.Threading.Tasks.Task<ScmRepositoriesResponse> CiProductsAdditionalRepositoriesGetToManyRelatedAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScmRepositoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScmRepositoriesResponse>> CiProductsAdditionalRepositoriesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppResponse</returns>
        System.Threading.Tasks.Task<AppResponse> CiProductsAppGetToOneRelatedAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppResponse>> CiProductsAppGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiBuildRunsResponse</returns>
        System.Threading.Tasks.Task<CiBuildRunsResponse> CiProductsBuildRunsGetToManyRelatedAsync(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiBuildRunsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CiBuildRunsResponse>> CiProductsBuildRunsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CiProductsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CiProductsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiProductsResponse</returns>
        System.Threading.Tasks.Task<CiProductsResponse> CiProductsGetCollectionAsync(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiProductsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CiProductsResponse>> CiProductsGetCollectionWithHttpInfoAsync(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiProductResponse</returns>
        System.Threading.Tasks.Task<CiProductResponse> CiProductsGetInstanceAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CiProductResponse>> CiProductsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScmRepositoriesResponse</returns>
        System.Threading.Tasks.Task<ScmRepositoriesResponse> CiProductsPrimaryRepositoriesGetToManyRelatedAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScmRepositoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScmRepositoriesResponse>> CiProductsPrimaryRepositoriesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiWorkflowsResponse</returns>
        System.Threading.Tasks.Task<CiWorkflowsResponse> CiProductsWorkflowsGetToManyRelatedAsync(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiWorkflowsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CiWorkflowsResponse>> CiProductsWorkflowsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICiProductsApi : ICiProductsApiSync, ICiProductsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CiProductsApi : IDisposable, ICiProductsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CiProductsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CiProductsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CiProductsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CiProductsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CiProductsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CiProductsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CiProductsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CiProductsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CiProductsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CiProductsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CiProductsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CiProductsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CiProductsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CiProductsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ScmRepositoriesResponse</returns>
        public ScmRepositoriesResponse CiProductsAdditionalRepositoriesGetToManyRelated(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse> localVarResponse = CiProductsAdditionalRepositoriesGetToManyRelatedWithHttpInfo(id, filterId, fieldsScmRepositories, fieldsScmProviders, fieldsScmGitReferences, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of ScmRepositoriesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse> CiProductsAdditionalRepositoriesGetToManyRelatedWithHttpInfo(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsAdditionalRepositoriesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (fieldsScmProviders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmProviders]", fieldsScmProviders));
            }
            if (fieldsScmGitReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmGitReferences]", fieldsScmGitReferences));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScmRepositoriesResponse>("/v1/ciProducts/{id}/additionalRepositories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsAdditionalRepositoriesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScmRepositoriesResponse</returns>
        public async System.Threading.Tasks.Task<ScmRepositoriesResponse> CiProductsAdditionalRepositoriesGetToManyRelatedAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse> localVarResponse = await CiProductsAdditionalRepositoriesGetToManyRelatedWithHttpInfoAsync(id, filterId, fieldsScmRepositories, fieldsScmProviders, fieldsScmGitReferences, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScmRepositoriesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse>> CiProductsAdditionalRepositoriesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsAdditionalRepositoriesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (fieldsScmProviders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmProviders]", fieldsScmProviders));
            }
            if (fieldsScmGitReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmGitReferences]", fieldsScmGitReferences));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScmRepositoriesResponse>("/v1/ciProducts/{id}/additionalRepositories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsAdditionalRepositoriesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppResponse</returns>
        public AppResponse CiProductsAppGetToOneRelated(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppResponse> localVarResponse = CiProductsAppGetToOneRelatedWithHttpInfo(id, fieldsApps, fieldsAppEncryptionDeclarations, fieldsCiProducts, fieldsBetaGroups, fieldsAppStoreVersions, fieldsPreReleaseVersions, fieldsBetaAppLocalizations, fieldsBuilds, fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails, fieldsAppInfos, fieldsAppClips, fieldsEndUserLicenseAgreements, fieldsAppPreOrders, fieldsInAppPurchases, fieldsSubscriptionGroups, fieldsGameCenterEnabledVersions, fieldsAppCustomProductPages, fieldsPromotedPurchases, fieldsAppEvents, fieldsReviewSubmissions, fieldsSubscriptionGracePeriods, fieldsGameCenterDetails, fieldsAppStoreVersionExperiments, include, limitAppEncryptionDeclarations, limitBetaGroups, limitAppStoreVersions, limitPreReleaseVersions, limitBetaAppLocalizations, limitBuilds, limitAppInfos, limitAppClips, limitInAppPurchases, limitSubscriptionGroups, limitGameCenterEnabledVersions, limitAppCustomProductPages, limitInAppPurchasesV2, limitPromotedPurchases, limitAppEvents, limitReviewSubmissions, limitAppStoreVersionExperimentsV2);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppResponse> CiProductsAppGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsAppGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersions]", limitAppStoreVersions));
            }
            if (limitPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[preReleaseVersions]", limitPreReleaseVersions));
            }
            if (limitBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaAppLocalizations]", limitBetaAppLocalizations));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }
            if (limitAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfos]", limitAppInfos));
            }
            if (limitAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClips]", limitAppClips));
            }
            if (limitInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchases]", limitInAppPurchases));
            }
            if (limitSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroups]", limitSubscriptionGroups));
            }
            if (limitGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
            }
            if (limitAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPages]", limitAppCustomProductPages));
            }
            if (limitInAppPurchasesV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchasesV2]", limitInAppPurchasesV2));
            }
            if (limitPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotedPurchases]", limitPromotedPurchases));
            }
            if (limitAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEvents]", limitAppEvents));
            }
            if (limitReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reviewSubmissions]", limitReviewSubmissions));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppResponse>("/v1/ciProducts/{id}/app", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsAppGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppResponse</returns>
        public async System.Threading.Tasks.Task<AppResponse> CiProductsAppGetToOneRelatedAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppResponse> localVarResponse = await CiProductsAppGetToOneRelatedWithHttpInfoAsync(id, fieldsApps, fieldsAppEncryptionDeclarations, fieldsCiProducts, fieldsBetaGroups, fieldsAppStoreVersions, fieldsPreReleaseVersions, fieldsBetaAppLocalizations, fieldsBuilds, fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails, fieldsAppInfos, fieldsAppClips, fieldsEndUserLicenseAgreements, fieldsAppPreOrders, fieldsInAppPurchases, fieldsSubscriptionGroups, fieldsGameCenterEnabledVersions, fieldsAppCustomProductPages, fieldsPromotedPurchases, fieldsAppEvents, fieldsReviewSubmissions, fieldsSubscriptionGracePeriods, fieldsGameCenterDetails, fieldsAppStoreVersionExperiments, include, limitAppEncryptionDeclarations, limitBetaGroups, limitAppStoreVersions, limitPreReleaseVersions, limitBetaAppLocalizations, limitBuilds, limitAppInfos, limitAppClips, limitInAppPurchases, limitSubscriptionGroups, limitGameCenterEnabledVersions, limitAppCustomProductPages, limitInAppPurchasesV2, limitPromotedPurchases, limitAppEvents, limitReviewSubmissions, limitAppStoreVersionExperimentsV2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppResponse>> CiProductsAppGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppEncryptionDeclarations = default(int?), int? limitBetaGroups = default(int?), int? limitAppStoreVersions = default(int?), int? limitPreReleaseVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBuilds = default(int?), int? limitAppInfos = default(int?), int? limitAppClips = default(int?), int? limitInAppPurchases = default(int?), int? limitSubscriptionGroups = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitAppCustomProductPages = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPromotedPurchases = default(int?), int? limitAppEvents = default(int?), int? limitReviewSubmissions = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsAppGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersions]", limitAppStoreVersions));
            }
            if (limitPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[preReleaseVersions]", limitPreReleaseVersions));
            }
            if (limitBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaAppLocalizations]", limitBetaAppLocalizations));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }
            if (limitAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfos]", limitAppInfos));
            }
            if (limitAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClips]", limitAppClips));
            }
            if (limitInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchases]", limitInAppPurchases));
            }
            if (limitSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroups]", limitSubscriptionGroups));
            }
            if (limitGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
            }
            if (limitAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPages]", limitAppCustomProductPages));
            }
            if (limitInAppPurchasesV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchasesV2]", limitInAppPurchasesV2));
            }
            if (limitPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotedPurchases]", limitPromotedPurchases));
            }
            if (limitAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEvents]", limitAppEvents));
            }
            if (limitReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reviewSubmissions]", limitReviewSubmissions));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppResponse>("/v1/ciProducts/{id}/app", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsAppGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>CiBuildRunsResponse</returns>
        public CiBuildRunsResponse CiProductsBuildRunsGetToManyRelated(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiBuildRunsResponse> localVarResponse = CiProductsBuildRunsGetToManyRelatedWithHttpInfo(id, filterBuilds, sort, fieldsCiBuildRuns, fieldsBuilds, fieldsCiWorkflows, fieldsCiProducts, fieldsScmGitReferences, fieldsScmPullRequests, limit, include, limitBuilds);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiBuildRunsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<CiBuildRunsResponse> CiProductsBuildRunsGetToManyRelatedWithHttpInfo(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsBuildRunsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[builds]", filterBuilds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsCiBuildRuns != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciBuildRuns]", fieldsCiBuildRuns));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsCiWorkflows != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciWorkflows]", fieldsCiWorkflows));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsScmGitReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmGitReferences]", fieldsScmGitReferences));
            }
            if (fieldsScmPullRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmPullRequests]", fieldsScmPullRequests));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CiBuildRunsResponse>("/v1/ciProducts/{id}/buildRuns", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsBuildRunsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiBuildRunsResponse</returns>
        public async System.Threading.Tasks.Task<CiBuildRunsResponse> CiProductsBuildRunsGetToManyRelatedAsync(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiBuildRunsResponse> localVarResponse = await CiProductsBuildRunsGetToManyRelatedWithHttpInfoAsync(id, filterBuilds, sort, fieldsCiBuildRuns, fieldsBuilds, fieldsCiWorkflows, fieldsCiProducts, fieldsScmGitReferences, fieldsScmPullRequests, limit, include, limitBuilds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCiBuildRuns">the fields to include for returned resources of type ciBuildRuns (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="fieldsScmPullRequests">the fields to include for returned resources of type scmPullRequests (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiBuildRunsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<CiBuildRunsResponse>> CiProductsBuildRunsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterBuilds = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsCiBuildRuns = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), List<string>? fieldsScmPullRequests = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsBuildRunsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[builds]", filterBuilds));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsCiBuildRuns != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciBuildRuns]", fieldsCiBuildRuns));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsCiWorkflows != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciWorkflows]", fieldsCiWorkflows));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsScmGitReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmGitReferences]", fieldsScmGitReferences));
            }
            if (fieldsScmPullRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmPullRequests]", fieldsScmPullRequests));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CiBuildRunsResponse>("/v1/ciProducts/{id}/buildRuns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsBuildRunsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void CiProductsDeleteInstance(string id)
        {
            CiProductsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> CiProductsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsDeleteInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/ciProducts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CiProductsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await CiProductsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> CiProductsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsDeleteInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/ciProducts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>CiProductsResponse</returns>
        public CiProductsResponse CiProductsGetCollection(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiProductsResponse> localVarResponse = CiProductsGetCollectionWithHttpInfo(filterProductType, filterApp, fieldsCiProducts, fieldsApps, fieldsScmRepositories, limit, include, limitPrimaryRepositories);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiProductsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<CiProductsResponse> CiProductsGetCollectionWithHttpInfo(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?))
        {
            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterProductType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[productType]", filterProductType));
            }
            if (filterApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[app]", filterApp));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPrimaryRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[primaryRepositories]", limitPrimaryRepositories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CiProductsResponse>("/v1/ciProducts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiProductsResponse</returns>
        public async System.Threading.Tasks.Task<CiProductsResponse> CiProductsGetCollectionAsync(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiProductsResponse> localVarResponse = await CiProductsGetCollectionWithHttpInfoAsync(filterProductType, filterApp, fieldsCiProducts, fieldsApps, fieldsScmRepositories, limit, include, limitPrimaryRepositories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterProductType">filter by attribute &#39;productType&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiProductsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<CiProductsResponse>> CiProductsGetCollectionWithHttpInfoAsync(List<string>? filterProductType = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterProductType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[productType]", filterProductType));
            }
            if (filterApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[app]", filterApp));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPrimaryRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[primaryRepositories]", limitPrimaryRepositories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CiProductsResponse>("/v1/ciProducts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>CiProductResponse</returns>
        public CiProductResponse CiProductsGetInstance(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiProductResponse> localVarResponse = CiProductsGetInstanceWithHttpInfo(id, fieldsCiProducts, fieldsApps, fieldsScmRepositories, include, limitPrimaryRepositories);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiProductResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<CiProductResponse> CiProductsGetInstanceWithHttpInfo(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPrimaryRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[primaryRepositories]", limitPrimaryRepositories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CiProductResponse>("/v1/ciProducts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiProductResponse</returns>
        public async System.Threading.Tasks.Task<CiProductResponse> CiProductsGetInstanceAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiProductResponse> localVarResponse = await CiProductsGetInstanceWithHttpInfoAsync(id, fieldsCiProducts, fieldsApps, fieldsScmRepositories, include, limitPrimaryRepositories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiProductResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<CiProductResponse>> CiProductsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPrimaryRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[primaryRepositories]", limitPrimaryRepositories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CiProductResponse>("/v1/ciProducts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ScmRepositoriesResponse</returns>
        public ScmRepositoriesResponse CiProductsPrimaryRepositoriesGetToManyRelated(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse> localVarResponse = CiProductsPrimaryRepositoriesGetToManyRelatedWithHttpInfo(id, filterId, fieldsScmRepositories, fieldsScmProviders, fieldsScmGitReferences, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of ScmRepositoriesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse> CiProductsPrimaryRepositoriesGetToManyRelatedWithHttpInfo(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsPrimaryRepositoriesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (fieldsScmProviders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmProviders]", fieldsScmProviders));
            }
            if (fieldsScmGitReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmGitReferences]", fieldsScmGitReferences));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScmRepositoriesResponse>("/v1/ciProducts/{id}/primaryRepositories", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsPrimaryRepositoriesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScmRepositoriesResponse</returns>
        public async System.Threading.Tasks.Task<ScmRepositoriesResponse> CiProductsPrimaryRepositoriesGetToManyRelatedAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse> localVarResponse = await CiProductsPrimaryRepositoriesGetToManyRelatedWithHttpInfoAsync(id, filterId, fieldsScmRepositories, fieldsScmProviders, fieldsScmGitReferences, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsScmProviders">the fields to include for returned resources of type scmProviders (optional)</param>
        /// <param name="fieldsScmGitReferences">the fields to include for returned resources of type scmGitReferences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScmRepositoriesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<ScmRepositoriesResponse>> CiProductsPrimaryRepositoriesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterId = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsScmProviders = default(List<string>?), List<string>? fieldsScmGitReferences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsPrimaryRepositoriesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (fieldsScmProviders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmProviders]", fieldsScmProviders));
            }
            if (fieldsScmGitReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmGitReferences]", fieldsScmGitReferences));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScmRepositoriesResponse>("/v1/ciProducts/{id}/primaryRepositories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsPrimaryRepositoriesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>CiWorkflowsResponse</returns>
        public CiWorkflowsResponse CiProductsWorkflowsGetToManyRelated(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiWorkflowsResponse> localVarResponse = CiProductsWorkflowsGetToManyRelatedWithHttpInfo(id, fieldsCiWorkflows, fieldsCiProducts, fieldsScmRepositories, fieldsCiXcodeVersions, fieldsCiMacOsVersions, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of CiWorkflowsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<CiWorkflowsResponse> CiProductsWorkflowsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsWorkflowsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsCiWorkflows != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciWorkflows]", fieldsCiWorkflows));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (fieldsCiXcodeVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciXcodeVersions]", fieldsCiXcodeVersions));
            }
            if (fieldsCiMacOsVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciMacOsVersions]", fieldsCiMacOsVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CiWorkflowsResponse>("/v1/ciProducts/{id}/workflows", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsWorkflowsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiWorkflowsResponse</returns>
        public async System.Threading.Tasks.Task<CiWorkflowsResponse> CiProductsWorkflowsGetToManyRelatedAsync(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiWorkflowsResponse> localVarResponse = await CiProductsWorkflowsGetToManyRelatedWithHttpInfoAsync(id, fieldsCiWorkflows, fieldsCiProducts, fieldsScmRepositories, fieldsCiXcodeVersions, fieldsCiMacOsVersions, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiWorkflows">the fields to include for returned resources of type ciWorkflows (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="fieldsCiXcodeVersions">the fields to include for returned resources of type ciXcodeVersions (optional)</param>
        /// <param name="fieldsCiMacOsVersions">the fields to include for returned resources of type ciMacOsVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiWorkflowsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<CiWorkflowsResponse>> CiProductsWorkflowsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsCiWorkflows = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? fieldsCiXcodeVersions = default(List<string>?), List<string>? fieldsCiMacOsVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling CiProductsApi->CiProductsWorkflowsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsCiWorkflows != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciWorkflows]", fieldsCiWorkflows));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (fieldsCiXcodeVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciXcodeVersions]", fieldsCiXcodeVersions));
            }
            if (fieldsCiMacOsVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciMacOsVersions]", fieldsCiMacOsVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CiWorkflowsResponse>("/v1/ciProducts/{id}/workflows", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CiProductsWorkflowsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
