/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <returns>AlternativeDistributionKeyResponse</returns>
        AlternativeDistributionKeyResponse AppsAlternativeDistributionKeyGetToOneRelated(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionKeyResponse</returns>
        ApiResponse<AlternativeDistributionKeyResponse> AppsAlternativeDistributionKeyGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <returns>AnalyticsReportRequestsResponse</returns>
        AnalyticsReportRequestsResponse AppsAnalyticsReportRequestsGetToManyRelated(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AnalyticsReportRequestsResponse</returns>
        ApiResponse<AnalyticsReportRequestsResponse> AppsAnalyticsReportRequestsGetToManyRelatedWithHttpInfo(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <returns>AppAvailabilityResponse</returns>
        [Obsolete]
        AppAvailabilityResponse AppsAppAvailabilityGetToOneRelated(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppAvailabilityResponse</returns>
        [Obsolete]
        ApiResponse<AppAvailabilityResponse> AppsAppAvailabilityGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <returns>AppAvailabilityV2Response</returns>
        AppAvailabilityV2Response AppsAppAvailabilityV2GetToOneRelated(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppAvailabilityV2Response</returns>
        ApiResponse<AppAvailabilityV2Response> AppsAppAvailabilityV2GetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <returns>AppClipsResponse</returns>
        AppClipsResponse AppsAppClipsGetToManyRelated(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppClipsResponse</returns>
        ApiResponse<AppClipsResponse> AppsAppClipsGetToManyRelatedWithHttpInfo(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <returns>AppCustomProductPagesResponse</returns>
        AppCustomProductPagesResponse AppsAppCustomProductPagesGetToManyRelated(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppCustomProductPagesResponse</returns>
        ApiResponse<AppCustomProductPagesResponse> AppsAppCustomProductPagesGetToManyRelatedWithHttpInfo(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>AppEncryptionDeclarationsResponse</returns>
        AppEncryptionDeclarationsResponse AppsAppEncryptionDeclarationsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppEncryptionDeclarationsResponse</returns>
        ApiResponse<AppEncryptionDeclarationsResponse> AppsAppEncryptionDeclarationsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <returns>AppEventsResponse</returns>
        AppEventsResponse AppsAppEventsGetToManyRelated(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppEventsResponse</returns>
        ApiResponse<AppEventsResponse> AppsAppEventsGetToManyRelatedWithHttpInfo(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppInfosResponse</returns>
        AppInfosResponse AppsAppInfosGetToManyRelated(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppInfosResponse</returns>
        ApiResponse<AppInfosResponse> AppsAppInfosGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPricePointsV3Response</returns>
        AppPricePointsV3Response AppsAppPricePointsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPricePointsV3Response</returns>
        ApiResponse<AppPricePointsV3Response> AppsAppPricePointsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <returns>AppPriceScheduleResponse</returns>
        AppPriceScheduleResponse AppsAppPriceScheduleGetToOneRelated(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppPriceScheduleResponse</returns>
        ApiResponse<AppPriceScheduleResponse> AppsAppPriceScheduleGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentsV2Response</returns>
        AppStoreVersionExperimentsV2Response AppsAppStoreVersionExperimentsV2GetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentsV2Response</returns>
        ApiResponse<AppStoreVersionExperimentsV2Response> AppsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionsResponse</returns>
        AppStoreVersionsResponse AppsAppStoreVersionsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionsResponse</returns>
        ApiResponse<AppStoreVersionsResponse> AppsAppStoreVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaAppLocalizationsWithoutIncludesResponse</returns>
        BetaAppLocalizationsWithoutIncludesResponse AppsBetaAppLocalizationsGetToManyRelated(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaAppLocalizationsWithoutIncludesResponse</returns>
        ApiResponse<BetaAppLocalizationsWithoutIncludesResponse> AppsBetaAppLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <returns>BetaAppReviewDetailWithoutIncludesResponse</returns>
        BetaAppReviewDetailWithoutIncludesResponse AppsBetaAppReviewDetailGetToOneRelated(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <returns>ApiResponse of BetaAppReviewDetailWithoutIncludesResponse</returns>
        ApiResponse<BetaAppReviewDetailWithoutIncludesResponse> AppsBetaAppReviewDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaGroupsWithoutIncludesResponse</returns>
        BetaGroupsWithoutIncludesResponse AppsBetaGroupsGetToManyRelated(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaGroupsWithoutIncludesResponse</returns>
        ApiResponse<BetaGroupsWithoutIncludesResponse> AppsBetaGroupsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <returns>BetaLicenseAgreementWithoutIncludesResponse</returns>
        BetaLicenseAgreementWithoutIncludesResponse AppsBetaLicenseAgreementGetToOneRelated(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <returns>ApiResponse of BetaLicenseAgreementWithoutIncludesResponse</returns>
        ApiResponse<BetaLicenseAgreementWithoutIncludesResponse> AppsBetaLicenseAgreementGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>AppsBetaTesterUsagesV1MetricResponse</returns>
        AppsBetaTesterUsagesV1MetricResponse AppsBetaTesterUsagesGetMetrics(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of AppsBetaTesterUsagesV1MetricResponse</returns>
        ApiResponse<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetricsWithHttpInfo(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void AppsBetaTestersDeleteToManyRelationship(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppsBetaTestersDeleteToManyRelationshipWithHttpInfo(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BuildsWithoutIncludesResponse</returns>
        BuildsWithoutIncludesResponse AppsBuildsGetToManyRelated(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BuildsWithoutIncludesResponse</returns>
        ApiResponse<BuildsWithoutIncludesResponse> AppsBuildsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>CiProductResponse</returns>
        CiProductResponse AppsCiProductGetToOneRelated(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiProductResponse</returns>
        ApiResponse<CiProductResponse> AppsCiProductGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>CustomerReviewsResponse</returns>
        CustomerReviewsResponse AppsCustomerReviewsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of CustomerReviewsResponse</returns>
        ApiResponse<CustomerReviewsResponse> AppsCustomerReviewsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <returns>EndUserLicenseAgreementWithoutIncludesResponse</returns>
        EndUserLicenseAgreementWithoutIncludesResponse AppsEndUserLicenseAgreementGetToOneRelated(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <returns>ApiResponse of EndUserLicenseAgreementWithoutIncludesResponse</returns>
        ApiResponse<EndUserLicenseAgreementWithoutIncludesResponse> AppsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>GameCenterDetailResponse</returns>
        GameCenterDetailResponse AppsGameCenterDetailGetToOneRelated(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        ApiResponse<GameCenterDetailResponse> AppsGameCenterDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <returns>GameCenterEnabledVersionsResponse</returns>
        [Obsolete]
        GameCenterEnabledVersionsResponse AppsGameCenterEnabledVersionsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <returns>ApiResponse of GameCenterEnabledVersionsResponse</returns>
        [Obsolete]
        ApiResponse<GameCenterEnabledVersionsResponse> AppsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>AppsResponse</returns>
        AppsResponse AppsGetCollection(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppsResponse</returns>
        ApiResponse<AppsResponse> AppsGetCollectionWithHttpInfo(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>AppResponse</returns>
        AppResponse AppsGetInstance(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppResponse</returns>
        ApiResponse<AppResponse> AppsGetInstanceWithHttpInfo(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>InAppPurchasesResponse</returns>
        [Obsolete]
        InAppPurchasesResponse AppsInAppPurchasesGetToManyRelated(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchasesResponse</returns>
        [Obsolete]
        ApiResponse<InAppPurchasesResponse> AppsInAppPurchasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <returns>InAppPurchasesV2Response</returns>
        InAppPurchasesV2Response AppsInAppPurchasesV2GetToManyRelated(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchasesV2Response</returns>
        ApiResponse<InAppPurchasesV2Response> AppsInAppPurchasesV2GetToManyRelatedWithHttpInfo(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <returns>MarketplaceSearchDetailResponse</returns>
        MarketplaceSearchDetailResponse AppsMarketplaceSearchDetailGetToOneRelated(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <returns>ApiResponse of MarketplaceSearchDetailResponse</returns>
        ApiResponse<MarketplaceSearchDetailResponse> AppsMarketplaceSearchDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>XcodeMetrics</returns>
        XcodeMetrics AppsPerfPowerMetricsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>ApiResponse of XcodeMetrics</returns>
        ApiResponse<XcodeMetrics> AppsPerfPowerMetricsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <returns>AppPreOrderWithoutIncludesResponse</returns>
        [Obsolete]
        AppPreOrderWithoutIncludesResponse AppsPreOrderGetToOneRelated(string id, List<string>? fieldsAppPreOrders = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <returns>ApiResponse of AppPreOrderWithoutIncludesResponse</returns>
        [Obsolete]
        ApiResponse<AppPreOrderWithoutIncludesResponse> AppsPreOrderGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppPreOrders = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>PreReleaseVersionsWithoutIncludesResponse</returns>
        PreReleaseVersionsWithoutIncludesResponse AppsPreReleaseVersionsGetToManyRelated(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of PreReleaseVersionsWithoutIncludesResponse</returns>
        ApiResponse<PreReleaseVersionsWithoutIncludesResponse> AppsPreReleaseVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <returns>PromotedPurchasesResponse</returns>
        PromotedPurchasesResponse AppsPromotedPurchasesGetToManyRelated(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <returns>ApiResponse of PromotedPurchasesResponse</returns>
        ApiResponse<PromotedPurchasesResponse> AppsPromotedPurchasesGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>AppPromotedPurchasesLinkagesResponse</returns>
        AppPromotedPurchasesLinkagesResponse AppsPromotedPurchasesGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of AppPromotedPurchasesLinkagesResponse</returns>
        ApiResponse<AppPromotedPurchasesLinkagesResponse> AppsPromotedPurchasesGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void AppsPromotedPurchasesReplaceToManyRelationship(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppsPromotedPurchasesReplaceToManyRelationshipWithHttpInfo(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <returns>ReviewSubmissionsResponse</returns>
        ReviewSubmissionsResponse AppsReviewSubmissionsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of ReviewSubmissionsResponse</returns>
        ApiResponse<ReviewSubmissionsResponse> AppsReviewSubmissionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <returns>SubscriptionGracePeriodResponse</returns>
        SubscriptionGracePeriodResponse AppsSubscriptionGracePeriodGetToOneRelated(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <returns>ApiResponse of SubscriptionGracePeriodResponse</returns>
        ApiResponse<SubscriptionGracePeriodResponse> AppsSubscriptionGracePeriodGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <returns>SubscriptionGroupsResponse</returns>
        SubscriptionGroupsResponse AppsSubscriptionGroupsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionGroupsResponse</returns>
        ApiResponse<SubscriptionGroupsResponse> AppsSubscriptionGroupsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <returns>AppResponse</returns>
        AppResponse AppsUpdateInstance(string id, AppUpdateRequest appUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <returns>ApiResponse of AppResponse</returns>
        ApiResponse<AppResponse> AppsUpdateInstanceWithHttpInfo(string id, AppUpdateRequest appUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionKeyResponse</returns>
        System.Threading.Tasks.Task<AlternativeDistributionKeyResponse> AppsAlternativeDistributionKeyGetToOneRelatedAsync(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlternativeDistributionKeyResponse>> AppsAlternativeDistributionKeyGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsReportRequestsResponse</returns>
        System.Threading.Tasks.Task<AnalyticsReportRequestsResponse> AppsAnalyticsReportRequestsGetToManyRelatedAsync(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsReportRequestsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticsReportRequestsResponse>> AppsAnalyticsReportRequestsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppAvailabilityResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppAvailabilityResponse> AppsAppAvailabilityGetToOneRelatedAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppAvailabilityResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppAvailabilityResponse>> AppsAppAvailabilityGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppAvailabilityV2Response</returns>
        System.Threading.Tasks.Task<AppAvailabilityV2Response> AppsAppAvailabilityV2GetToOneRelatedAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppAvailabilityV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppAvailabilityV2Response>> AppsAppAvailabilityV2GetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipsResponse</returns>
        System.Threading.Tasks.Task<AppClipsResponse> AppsAppClipsGetToManyRelatedAsync(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipsResponse>> AppsAppClipsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPagesResponse</returns>
        System.Threading.Tasks.Task<AppCustomProductPagesResponse> AppsAppCustomProductPagesGetToManyRelatedAsync(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppCustomProductPagesResponse>> AppsAppCustomProductPagesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppEncryptionDeclarationsResponse</returns>
        System.Threading.Tasks.Task<AppEncryptionDeclarationsResponse> AppsAppEncryptionDeclarationsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppEncryptionDeclarationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppEncryptionDeclarationsResponse>> AppsAppEncryptionDeclarationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppEventsResponse</returns>
        System.Threading.Tasks.Task<AppEventsResponse> AppsAppEventsGetToManyRelatedAsync(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppEventsResponse>> AppsAppEventsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppInfosResponse</returns>
        System.Threading.Tasks.Task<AppInfosResponse> AppsAppInfosGetToManyRelatedAsync(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppInfosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppInfosResponse>> AppsAppInfosGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPricePointsV3Response</returns>
        System.Threading.Tasks.Task<AppPricePointsV3Response> AppsAppPricePointsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPricePointsV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPricePointsV3Response>> AppsAppPricePointsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPriceScheduleResponse</returns>
        System.Threading.Tasks.Task<AppPriceScheduleResponse> AppsAppPriceScheduleGetToOneRelatedAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPriceScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPriceScheduleResponse>> AppsAppPriceScheduleGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentsV2Response</returns>
        System.Threading.Tasks.Task<AppStoreVersionExperimentsV2Response> AppsAppStoreVersionExperimentsV2GetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentsV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentsV2Response>> AppsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionsResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionsResponse> AppsAppStoreVersionsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionsResponse>> AppsAppStoreVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaAppLocalizationsWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BetaAppLocalizationsWithoutIncludesResponse> AppsBetaAppLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaAppLocalizationsWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaAppLocalizationsWithoutIncludesResponse>> AppsBetaAppLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaAppReviewDetailWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BetaAppReviewDetailWithoutIncludesResponse> AppsBetaAppReviewDetailGetToOneRelatedAsync(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaAppReviewDetailWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaAppReviewDetailWithoutIncludesResponse>> AppsBetaAppReviewDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaGroupsWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BetaGroupsWithoutIncludesResponse> AppsBetaGroupsGetToManyRelatedAsync(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaGroupsWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaGroupsWithoutIncludesResponse>> AppsBetaGroupsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaLicenseAgreementWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BetaLicenseAgreementWithoutIncludesResponse> AppsBetaLicenseAgreementGetToOneRelatedAsync(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaLicenseAgreementWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaLicenseAgreementWithoutIncludesResponse>> AppsBetaLicenseAgreementGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsBetaTesterUsagesV1MetricResponse</returns>
        System.Threading.Tasks.Task<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetricsAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsBetaTesterUsagesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> AppsBetaTesterUsagesGetMetricsWithHttpInfoAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppsBetaTestersDeleteToManyRelationshipAsync(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsBetaTestersDeleteToManyRelationshipWithHttpInfoAsync(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildsWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BuildsWithoutIncludesResponse> AppsBuildsGetToManyRelatedAsync(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildsWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildsWithoutIncludesResponse>> AppsBuildsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiProductResponse</returns>
        System.Threading.Tasks.Task<CiProductResponse> AppsCiProductGetToOneRelatedAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CiProductResponse>> AppsCiProductGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerReviewsResponse</returns>
        System.Threading.Tasks.Task<CustomerReviewsResponse> AppsCustomerReviewsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerReviewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerReviewsResponse>> AppsCustomerReviewsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EndUserLicenseAgreementWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<EndUserLicenseAgreementWithoutIncludesResponse> AppsEndUserLicenseAgreementGetToOneRelatedAsync(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EndUserLicenseAgreementWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EndUserLicenseAgreementWithoutIncludesResponse>> AppsEndUserLicenseAgreementGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailResponse> AppsGameCenterDetailGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailResponse>> AppsGameCenterDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterEnabledVersionsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GameCenterEnabledVersionsResponse> AppsGameCenterEnabledVersionsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterEnabledVersionsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GameCenterEnabledVersionsResponse>> AppsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsResponse</returns>
        System.Threading.Tasks.Task<AppsResponse> AppsGetCollectionAsync(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppsResponse>> AppsGetCollectionWithHttpInfoAsync(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppResponse</returns>
        System.Threading.Tasks.Task<AppResponse> AppsGetInstanceAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppResponse>> AppsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasesResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<InAppPurchasesResponse> AppsInAppPurchasesGetToManyRelatedAsync(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasesResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<InAppPurchasesResponse>> AppsInAppPurchasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasesV2Response</returns>
        System.Threading.Tasks.Task<InAppPurchasesV2Response> AppsInAppPurchasesV2GetToManyRelatedAsync(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasesV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InAppPurchasesV2Response>> AppsInAppPurchasesV2GetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketplaceSearchDetailResponse</returns>
        System.Threading.Tasks.Task<MarketplaceSearchDetailResponse> AppsMarketplaceSearchDetailGetToOneRelatedAsync(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketplaceSearchDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketplaceSearchDetailResponse>> AppsMarketplaceSearchDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of XcodeMetrics</returns>
        System.Threading.Tasks.Task<XcodeMetrics> AppsPerfPowerMetricsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (XcodeMetrics)</returns>
        System.Threading.Tasks.Task<ApiResponse<XcodeMetrics>> AppsPerfPowerMetricsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPreOrderWithoutIncludesResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppPreOrderWithoutIncludesResponse> AppsPreOrderGetToOneRelatedAsync(string id, List<string>? fieldsAppPreOrders = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPreOrderWithoutIncludesResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppPreOrderWithoutIncludesResponse>> AppsPreOrderGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppPreOrders = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreReleaseVersionsWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<PreReleaseVersionsWithoutIncludesResponse> AppsPreReleaseVersionsGetToManyRelatedAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreReleaseVersionsWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreReleaseVersionsWithoutIncludesResponse>> AppsPreReleaseVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotedPurchasesResponse</returns>
        System.Threading.Tasks.Task<PromotedPurchasesResponse> AppsPromotedPurchasesGetToManyRelatedAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotedPurchasesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotedPurchasesResponse>> AppsPromotedPurchasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPromotedPurchasesLinkagesResponse</returns>
        System.Threading.Tasks.Task<AppPromotedPurchasesLinkagesResponse> AppsPromotedPurchasesGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPromotedPurchasesLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppPromotedPurchasesLinkagesResponse>> AppsPromotedPurchasesGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppsPromotedPurchasesReplaceToManyRelationshipAsync(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppsPromotedPurchasesReplaceToManyRelationshipWithHttpInfoAsync(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewSubmissionsResponse</returns>
        System.Threading.Tasks.Task<ReviewSubmissionsResponse> AppsReviewSubmissionsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewSubmissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReviewSubmissionsResponse>> AppsReviewSubmissionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGracePeriodResponse</returns>
        System.Threading.Tasks.Task<SubscriptionGracePeriodResponse> AppsSubscriptionGracePeriodGetToOneRelatedAsync(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGracePeriodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionGracePeriodResponse>> AppsSubscriptionGracePeriodGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupsResponse</returns>
        System.Threading.Tasks.Task<SubscriptionGroupsResponse> AppsSubscriptionGroupsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionGroupsResponse>> AppsSubscriptionGroupsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppResponse</returns>
        System.Threading.Tasks.Task<AppResponse> AppsUpdateInstanceAsync(string id, AppUpdateRequest appUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppResponse>> AppsUpdateInstanceWithHttpInfoAsync(string id, AppUpdateRequest appUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppsApi : IAppsApiSync, IAppsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppsApi : IDisposable, IAppsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <returns>AlternativeDistributionKeyResponse</returns>
        public AlternativeDistributionKeyResponse AppsAlternativeDistributionKeyGetToOneRelated(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionKeyResponse> localVarResponse = AppsAlternativeDistributionKeyGetToOneRelatedWithHttpInfo(id, fieldsAlternativeDistributionKeys);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionKeyResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionKeyResponse> AppsAlternativeDistributionKeyGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAlternativeDistributionKeyGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAlternativeDistributionKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionKeys]", fieldsAlternativeDistributionKeys));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlternativeDistributionKeyResponse>("/v1/apps/{id}/alternativeDistributionKey", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAlternativeDistributionKeyGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionKeyResponse</returns>
        public async System.Threading.Tasks.Task<AlternativeDistributionKeyResponse> AppsAlternativeDistributionKeyGetToOneRelatedAsync(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionKeyResponse> localVarResponse = await AppsAlternativeDistributionKeyGetToOneRelatedWithHttpInfoAsync(id, fieldsAlternativeDistributionKeys, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionKeys">the fields to include for returned resources of type alternativeDistributionKeys (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionKeyResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionKeyResponse>> AppsAlternativeDistributionKeyGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAlternativeDistributionKeys = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAlternativeDistributionKeyGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAlternativeDistributionKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionKeys]", fieldsAlternativeDistributionKeys));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AlternativeDistributionKeyResponse>("/v1/apps/{id}/alternativeDistributionKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAlternativeDistributionKeyGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <returns>AnalyticsReportRequestsResponse</returns>
        public AnalyticsReportRequestsResponse AppsAnalyticsReportRequestsGetToManyRelated(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AnalyticsReportRequestsResponse> localVarResponse = AppsAnalyticsReportRequestsGetToManyRelatedWithHttpInfo(id, filterAccessType, fieldsAnalyticsReportRequests, fieldsAnalyticsReports, limit, include, limitReports);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AnalyticsReportRequestsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AnalyticsReportRequestsResponse> AppsAnalyticsReportRequestsGetToManyRelatedWithHttpInfo(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAnalyticsReportRequestsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterAccessType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[accessType]", filterAccessType));
            }
            if (fieldsAnalyticsReportRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[analyticsReportRequests]", fieldsAnalyticsReportRequests));
            }
            if (fieldsAnalyticsReports != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[analyticsReports]", fieldsAnalyticsReports));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitReports != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reports]", limitReports));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnalyticsReportRequestsResponse>("/v1/apps/{id}/analyticsReportRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAnalyticsReportRequestsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsReportRequestsResponse</returns>
        public async System.Threading.Tasks.Task<AnalyticsReportRequestsResponse> AppsAnalyticsReportRequestsGetToManyRelatedAsync(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AnalyticsReportRequestsResponse> localVarResponse = await AppsAnalyticsReportRequestsGetToManyRelatedWithHttpInfoAsync(id, filterAccessType, fieldsAnalyticsReportRequests, fieldsAnalyticsReports, limit, include, limitReports, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterAccessType">filter by attribute &#39;accessType&#39; (optional)</param>
        /// <param name="fieldsAnalyticsReportRequests">the fields to include for returned resources of type analyticsReportRequests (optional)</param>
        /// <param name="fieldsAnalyticsReports">the fields to include for returned resources of type analyticsReports (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitReports">maximum number of related reports returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsReportRequestsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AnalyticsReportRequestsResponse>> AppsAnalyticsReportRequestsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterAccessType = default(List<string>?), List<string>? fieldsAnalyticsReportRequests = default(List<string>?), List<string>? fieldsAnalyticsReports = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitReports = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAnalyticsReportRequestsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterAccessType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[accessType]", filterAccessType));
            }
            if (fieldsAnalyticsReportRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[analyticsReportRequests]", fieldsAnalyticsReportRequests));
            }
            if (fieldsAnalyticsReports != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[analyticsReports]", fieldsAnalyticsReports));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitReports != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reports]", limitReports));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AnalyticsReportRequestsResponse>("/v1/apps/{id}/analyticsReportRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAnalyticsReportRequestsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <returns>AppAvailabilityResponse</returns>
        [Obsolete]
        public AppAvailabilityResponse AppsAppAvailabilityGetToOneRelated(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityResponse> localVarResponse = AppsAppAvailabilityGetToOneRelatedWithHttpInfo(id, fieldsAppAvailabilities, fieldsApps, fieldsTerritories, include, limitAvailableTerritories);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppAvailabilityResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityResponse> AppsAppAvailabilityGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppAvailabilityGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appAvailabilities]", fieldsAppAvailabilities));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAvailableTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[availableTerritories]", limitAvailableTerritories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppAvailabilityResponse>("/v1/apps/{id}/appAvailability", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppAvailabilityGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppAvailabilityResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppAvailabilityResponse> AppsAppAvailabilityGetToOneRelatedAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityResponse> localVarResponse = await AppsAppAvailabilityGetToOneRelatedWithHttpInfoAsync(id, fieldsAppAvailabilities, fieldsApps, fieldsTerritories, include, limitAvailableTerritories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAvailableTerritories">maximum number of related availableTerritories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppAvailabilityResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityResponse>> AppsAppAvailabilityGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? include = default(List<string>?), int? limitAvailableTerritories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppAvailabilityGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appAvailabilities]", fieldsAppAvailabilities));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAvailableTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[availableTerritories]", limitAvailableTerritories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppAvailabilityResponse>("/v1/apps/{id}/appAvailability", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppAvailabilityGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <returns>AppAvailabilityV2Response</returns>
        public AppAvailabilityV2Response AppsAppAvailabilityV2GetToOneRelated(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityV2Response> localVarResponse = AppsAppAvailabilityV2GetToOneRelatedWithHttpInfo(id, fieldsAppAvailabilities, fieldsTerritoryAvailabilities, include, limitTerritoryAvailabilities);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppAvailabilityV2Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityV2Response> AppsAppAvailabilityV2GetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppAvailabilityV2GetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appAvailabilities]", fieldsAppAvailabilities));
            }
            if (fieldsTerritoryAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territoryAvailabilities]", fieldsTerritoryAvailabilities));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitTerritoryAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[territoryAvailabilities]", limitTerritoryAvailabilities));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppAvailabilityV2Response>("/v1/apps/{id}/appAvailabilityV2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppAvailabilityV2GetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppAvailabilityV2Response</returns>
        public async System.Threading.Tasks.Task<AppAvailabilityV2Response> AppsAppAvailabilityV2GetToOneRelatedAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityV2Response> localVarResponse = await AppsAppAvailabilityV2GetToOneRelatedWithHttpInfoAsync(id, fieldsAppAvailabilities, fieldsTerritoryAvailabilities, include, limitTerritoryAvailabilities, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppAvailabilities">the fields to include for returned resources of type appAvailabilities (optional)</param>
        /// <param name="fieldsTerritoryAvailabilities">the fields to include for returned resources of type territoryAvailabilities (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitTerritoryAvailabilities">maximum number of related territoryAvailabilities returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppAvailabilityV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppAvailabilityV2Response>> AppsAppAvailabilityV2GetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppAvailabilities = default(List<string>?), List<string>? fieldsTerritoryAvailabilities = default(List<string>?), List<string>? include = default(List<string>?), int? limitTerritoryAvailabilities = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppAvailabilityV2GetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appAvailabilities]", fieldsAppAvailabilities));
            }
            if (fieldsTerritoryAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territoryAvailabilities]", fieldsTerritoryAvailabilities));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitTerritoryAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[territoryAvailabilities]", limitTerritoryAvailabilities));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppAvailabilityV2Response>("/v1/apps/{id}/appAvailabilityV2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppAvailabilityV2GetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <returns>AppClipsResponse</returns>
        public AppClipsResponse AppsAppClipsGetToManyRelated(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppClipsResponse> localVarResponse = AppsAppClipsGetToManyRelatedWithHttpInfo(id, filterBundleId, fieldsAppClips, fieldsApps, fieldsAppClipDefaultExperiences, limit, include, limitAppClipDefaultExperiences);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppClipsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppClipsResponse> AppsAppClipsGetToManyRelatedWithHttpInfo(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppClipsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterBundleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[bundleId]", filterBundleId));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClipDefaultExperiences]", limitAppClipDefaultExperiences));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppClipsResponse>("/v1/apps/{id}/appClips", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppClipsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipsResponse</returns>
        public async System.Threading.Tasks.Task<AppClipsResponse> AppsAppClipsGetToManyRelatedAsync(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppClipsResponse> localVarResponse = await AppsAppClipsGetToManyRelatedWithHttpInfoAsync(id, filterBundleId, fieldsAppClips, fieldsApps, fieldsAppClipDefaultExperiences, limit, include, limitAppClipDefaultExperiences, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperiences">maximum number of related appClipDefaultExperiences returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppClipsResponse>> AppsAppClipsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterBundleId = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperiences = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppClipsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterBundleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[bundleId]", filterBundleId));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClipDefaultExperiences]", limitAppClipDefaultExperiences));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppClipsResponse>("/v1/apps/{id}/appClips", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppClipsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <returns>AppCustomProductPagesResponse</returns>
        public AppCustomProductPagesResponse AppsAppCustomProductPagesGetToManyRelated(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppCustomProductPagesResponse> localVarResponse = AppsAppCustomProductPagesGetToManyRelatedWithHttpInfo(id, filterVisible, fieldsAppCustomProductPages, fieldsApps, fieldsAppCustomProductPageVersions, limit, include, limitAppCustomProductPageVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppCustomProductPagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppCustomProductPagesResponse> AppsAppCustomProductPagesGetToManyRelatedWithHttpInfo(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppCustomProductPagesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterVisible != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[visible]", filterVisible));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppCustomProductPageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageVersions]", fieldsAppCustomProductPageVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppCustomProductPageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPageVersions]", limitAppCustomProductPageVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppCustomProductPagesResponse>("/v1/apps/{id}/appCustomProductPages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppCustomProductPagesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppCustomProductPagesResponse</returns>
        public async System.Threading.Tasks.Task<AppCustomProductPagesResponse> AppsAppCustomProductPagesGetToManyRelatedAsync(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppCustomProductPagesResponse> localVarResponse = await AppsAppCustomProductPagesGetToManyRelatedWithHttpInfoAsync(id, filterVisible, fieldsAppCustomProductPages, fieldsApps, fieldsAppCustomProductPageVersions, limit, include, limitAppCustomProductPageVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterVisible">filter by attribute &#39;visible&#39; (optional)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppCustomProductPageVersions">the fields to include for returned resources of type appCustomProductPageVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppCustomProductPageVersions">maximum number of related appCustomProductPageVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppCustomProductPagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppCustomProductPagesResponse>> AppsAppCustomProductPagesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterVisible = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppCustomProductPageVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppCustomProductPageVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppCustomProductPagesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterVisible != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[visible]", filterVisible));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppCustomProductPageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPageVersions]", fieldsAppCustomProductPageVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppCustomProductPageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPageVersions]", limitAppCustomProductPageVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppCustomProductPagesResponse>("/v1/apps/{id}/appCustomProductPages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppCustomProductPagesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>AppEncryptionDeclarationsResponse</returns>
        public AppEncryptionDeclarationsResponse AppsAppEncryptionDeclarationsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationsResponse> localVarResponse = AppsAppEncryptionDeclarationsGetToManyRelatedWithHttpInfo(id, filterPlatform, filterBuilds, fieldsAppEncryptionDeclarations, fieldsApps, fieldsBuilds, fieldsAppEncryptionDeclarationDocuments, limit, include, limitBuilds);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppEncryptionDeclarationsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationsResponse> AppsAppEncryptionDeclarationsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppEncryptionDeclarationsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[builds]", filterBuilds));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppEncryptionDeclarationDocuments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarationDocuments]", fieldsAppEncryptionDeclarationDocuments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppEncryptionDeclarationsResponse>("/v1/apps/{id}/appEncryptionDeclarations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppEncryptionDeclarationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppEncryptionDeclarationsResponse</returns>
        public async System.Threading.Tasks.Task<AppEncryptionDeclarationsResponse> AppsAppEncryptionDeclarationsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationsResponse> localVarResponse = await AppsAppEncryptionDeclarationsGetToManyRelatedWithHttpInfoAsync(id, filterPlatform, filterBuilds, fieldsAppEncryptionDeclarations, fieldsApps, fieldsBuilds, fieldsAppEncryptionDeclarationDocuments, limit, include, limitBuilds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterBuilds">filter by id(s) of related &#39;builds&#39; (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarationDocuments">the fields to include for returned resources of type appEncryptionDeclarationDocuments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppEncryptionDeclarationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationsResponse>> AppsAppEncryptionDeclarationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppEncryptionDeclarationDocuments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBuilds = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppEncryptionDeclarationsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[builds]", filterBuilds));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppEncryptionDeclarationDocuments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarationDocuments]", fieldsAppEncryptionDeclarationDocuments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppEncryptionDeclarationsResponse>("/v1/apps/{id}/appEncryptionDeclarations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppEncryptionDeclarationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <returns>AppEventsResponse</returns>
        public AppEventsResponse AppsAppEventsGetToManyRelated(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppEventsResponse> localVarResponse = AppsAppEventsGetToManyRelatedWithHttpInfo(id, filterEventState, filterId, fieldsAppEvents, fieldsAppEventLocalizations, limit, include, limitLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppEventsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppEventsResponse> AppsAppEventsGetToManyRelatedWithHttpInfo(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppEventsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEventState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[eventState]", filterEventState));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsAppEventLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEventLocalizations]", fieldsAppEventLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppEventsResponse>("/v1/apps/{id}/appEvents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppEventsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppEventsResponse</returns>
        public async System.Threading.Tasks.Task<AppEventsResponse> AppsAppEventsGetToManyRelatedAsync(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppEventsResponse> localVarResponse = await AppsAppEventsGetToManyRelatedWithHttpInfoAsync(id, filterEventState, filterId, fieldsAppEvents, fieldsAppEventLocalizations, limit, include, limitLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEventState">filter by attribute &#39;eventState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsAppEventLocalizations">the fields to include for returned resources of type appEventLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppEventsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppEventsResponse>> AppsAppEventsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEventState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsAppEventLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppEventsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEventState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[eventState]", filterEventState));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsAppEventLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEventLocalizations]", fieldsAppEventLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppEventsResponse>("/v1/apps/{id}/appEvents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppEventsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppInfosResponse</returns>
        public AppInfosResponse AppsAppInfosGetToManyRelated(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppInfosResponse> localVarResponse = AppsAppInfosGetToManyRelatedWithHttpInfo(id, fieldsAppInfos, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppInfoLocalizations, fieldsAppCategories, limit, include, limitAppInfoLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppInfosResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppInfosResponse> AppsAppInfosGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppInfosGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppInfoLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfoLocalizations]", fieldsAppInfoLocalizations));
            }
            if (fieldsAppCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCategories]", fieldsAppCategories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppInfoLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfoLocalizations]", limitAppInfoLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppInfosResponse>("/v1/apps/{id}/appInfos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppInfosGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppInfosResponse</returns>
        public async System.Threading.Tasks.Task<AppInfosResponse> AppsAppInfosGetToManyRelatedAsync(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppInfosResponse> localVarResponse = await AppsAppInfosGetToManyRelatedWithHttpInfoAsync(id, fieldsAppInfos, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppInfoLocalizations, fieldsAppCategories, limit, include, limitAppInfoLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppInfoLocalizations">the fields to include for returned resources of type appInfoLocalizations (optional)</param>
        /// <param name="fieldsAppCategories">the fields to include for returned resources of type appCategories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppInfoLocalizations">maximum number of related appInfoLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppInfosResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppInfosResponse>> AppsAppInfosGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppInfoLocalizations = default(List<string>?), List<string>? fieldsAppCategories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppInfoLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppInfosGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppInfoLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfoLocalizations]", fieldsAppInfoLocalizations));
            }
            if (fieldsAppCategories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCategories]", fieldsAppCategories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppInfoLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfoLocalizations]", limitAppInfoLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppInfosResponse>("/v1/apps/{id}/appInfos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppInfosGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppPricePointsV3Response</returns>
        public AppPricePointsV3Response AppsAppPricePointsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPricePointsV3Response> localVarResponse = AppsAppPricePointsGetToManyRelatedWithHttpInfo(id, filterTerritory, fieldsAppPricePoints, fieldsApps, fieldsTerritories, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppPricePointsV3Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppPricePointsV3Response> AppsAppPricePointsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppPricePointsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsAppPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPricePoints]", fieldsAppPricePoints));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPricePointsV3Response>("/v1/apps/{id}/appPricePoints", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppPricePointsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPricePointsV3Response</returns>
        public async System.Threading.Tasks.Task<AppPricePointsV3Response> AppsAppPricePointsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPricePointsV3Response> localVarResponse = await AppsAppPricePointsGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, fieldsAppPricePoints, fieldsApps, fieldsTerritories, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by id(s) of related &#39;territory&#39; (optional)</param>
        /// <param name="fieldsAppPricePoints">the fields to include for returned resources of type appPricePoints (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPricePointsV3Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppPricePointsV3Response>> AppsAppPricePointsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? fieldsAppPricePoints = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppPricePointsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (fieldsAppPricePoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPricePoints]", fieldsAppPricePoints));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPricePointsV3Response>("/v1/apps/{id}/appPricePoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppPricePointsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <returns>AppPriceScheduleResponse</returns>
        public AppPriceScheduleResponse AppsAppPriceScheduleGetToOneRelated(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPriceScheduleResponse> localVarResponse = AppsAppPriceScheduleGetToOneRelatedWithHttpInfo(id, fieldsAppPriceSchedules, fieldsApps, fieldsTerritories, fieldsAppPrices, include, limitManualPrices, limitAutomaticPrices);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppPriceScheduleResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppPriceScheduleResponse> AppsAppPriceScheduleGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppPriceScheduleGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppPriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPriceSchedules]", fieldsAppPriceSchedules));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitManualPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[manualPrices]", limitManualPrices));
            }
            if (limitAutomaticPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[automaticPrices]", limitAutomaticPrices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPriceScheduleResponse>("/v1/apps/{id}/appPriceSchedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppPriceScheduleGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPriceScheduleResponse</returns>
        public async System.Threading.Tasks.Task<AppPriceScheduleResponse> AppsAppPriceScheduleGetToOneRelatedAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPriceScheduleResponse> localVarResponse = await AppsAppPriceScheduleGetToOneRelatedWithHttpInfoAsync(id, fieldsAppPriceSchedules, fieldsApps, fieldsTerritories, fieldsAppPrices, include, limitManualPrices, limitAutomaticPrices, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPriceSchedules">the fields to include for returned resources of type appPriceSchedules (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsTerritories">the fields to include for returned resources of type territories (optional)</param>
        /// <param name="fieldsAppPrices">the fields to include for returned resources of type appPrices (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitManualPrices">maximum number of related manualPrices returned (when they are included) (optional)</param>
        /// <param name="limitAutomaticPrices">maximum number of related automaticPrices returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPriceScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppPriceScheduleResponse>> AppsAppPriceScheduleGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppPriceSchedules = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsTerritories = default(List<string>?), List<string>? fieldsAppPrices = default(List<string>?), List<string>? include = default(List<string>?), int? limitManualPrices = default(int?), int? limitAutomaticPrices = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppPriceScheduleGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppPriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPriceSchedules]", fieldsAppPriceSchedules));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsTerritories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[territories]", fieldsTerritories));
            }
            if (fieldsAppPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPrices]", fieldsAppPrices));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitManualPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[manualPrices]", limitManualPrices));
            }
            if (limitAutomaticPrices != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[automaticPrices]", limitAutomaticPrices));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPriceScheduleResponse>("/v1/apps/{id}/appPriceSchedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppPriceScheduleGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentsV2Response</returns>
        public AppStoreVersionExperimentsV2Response AppsAppStoreVersionExperimentsV2GetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response> localVarResponse = AppsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfo(id, filterState, fieldsAppStoreVersionExperiments, fieldsApps, fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments, limit, include, limitControlVersions, limitAppStoreVersionExperimentTreatments);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentsV2Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response> AppsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppStoreVersionExperimentsV2GetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitControlVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[controlVersions]", limitControlVersions));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionExperimentsV2Response>("/v1/apps/{id}/appStoreVersionExperimentsV2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppStoreVersionExperimentsV2GetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentsV2Response</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentsV2Response> AppsAppStoreVersionExperimentsV2GetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response> localVarResponse = await AppsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfoAsync(id, filterState, fieldsAppStoreVersionExperiments, fieldsApps, fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments, limit, include, limitControlVersions, limitAppStoreVersionExperimentTreatments, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentsV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response>> AppsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppStoreVersionExperimentsV2GetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitControlVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[controlVersions]", limitControlVersions));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionExperimentsV2Response>("/v1/apps/{id}/appStoreVersionExperimentsV2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppStoreVersionExperimentsV2GetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionsResponse</returns>
        public AppStoreVersionsResponse AppsAppStoreVersionsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionsResponse> localVarResponse = AppsAppStoreVersionsGetToManyRelatedWithHttpInfo(id, filterPlatform, filterVersionString, filterAppStoreState, filterAppVersionState, filterId, fieldsAppStoreVersions, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, limit, include, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionsResponse> AppsAppStoreVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppStoreVersionsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterVersionString != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[versionString]", filterVersionString));
            }
            if (filterAppStoreState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreState]", filterAppStoreState));
            }
            if (filterAppVersionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appVersionState]", filterAppVersionState));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionsResponse>("/v1/apps/{id}/appStoreVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppStoreVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionsResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionsResponse> AppsAppStoreVersionsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionsResponse> localVarResponse = await AppsAppStoreVersionsGetToManyRelatedWithHttpInfoAsync(id, filterPlatform, filterVersionString, filterAppStoreState, filterAppVersionState, filterId, fieldsAppStoreVersions, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, limit, include, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterAppStoreState">filter by attribute &#39;appStoreState&#39; (optional)</param>
        /// <param name="filterAppVersionState">filter by attribute &#39;appVersionState&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionsResponse>> AppsAppStoreVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterAppStoreState = default(List<string>?), List<string>? filterAppVersionState = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsAppStoreVersionsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterVersionString != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[versionString]", filterVersionString));
            }
            if (filterAppStoreState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreState]", filterAppStoreState));
            }
            if (filterAppVersionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appVersionState]", filterAppVersionState));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionsResponse>("/v1/apps/{id}/appStoreVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsAppStoreVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaAppLocalizationsWithoutIncludesResponse</returns>
        public BetaAppLocalizationsWithoutIncludesResponse AppsBetaAppLocalizationsGetToManyRelated(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaAppLocalizationsWithoutIncludesResponse> localVarResponse = AppsBetaAppLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsBetaAppLocalizations, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaAppLocalizationsWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaAppLocalizationsWithoutIncludesResponse> AppsBetaAppLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaAppLocalizationsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaAppLocalizationsWithoutIncludesResponse>("/v1/apps/{id}/betaAppLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaAppLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaAppLocalizationsWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BetaAppLocalizationsWithoutIncludesResponse> AppsBetaAppLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaAppLocalizationsWithoutIncludesResponse> localVarResponse = await AppsBetaAppLocalizationsGetToManyRelatedWithHttpInfoAsync(id, fieldsBetaAppLocalizations, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaAppLocalizationsWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaAppLocalizationsWithoutIncludesResponse>> AppsBetaAppLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaAppLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaAppLocalizationsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaAppLocalizationsWithoutIncludesResponse>("/v1/apps/{id}/betaAppLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaAppLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <returns>BetaAppReviewDetailWithoutIncludesResponse</returns>
        public BetaAppReviewDetailWithoutIncludesResponse AppsBetaAppReviewDetailGetToOneRelated(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewDetailWithoutIncludesResponse> localVarResponse = AppsBetaAppReviewDetailGetToOneRelatedWithHttpInfo(id, fieldsBetaAppReviewDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <returns>ApiResponse of BetaAppReviewDetailWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewDetailWithoutIncludesResponse> AppsBetaAppReviewDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaAppReviewDetailGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaAppReviewDetailWithoutIncludesResponse>("/v1/apps/{id}/betaAppReviewDetail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaAppReviewDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaAppReviewDetailWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BetaAppReviewDetailWithoutIncludesResponse> AppsBetaAppReviewDetailGetToOneRelatedAsync(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewDetailWithoutIncludesResponse> localVarResponse = await AppsBetaAppReviewDetailGetToOneRelatedWithHttpInfoAsync(id, fieldsBetaAppReviewDetails, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaAppReviewDetailWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewDetailWithoutIncludesResponse>> AppsBetaAppReviewDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaAppReviewDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaAppReviewDetailGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaAppReviewDetailWithoutIncludesResponse>("/v1/apps/{id}/betaAppReviewDetail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaAppReviewDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaGroupsWithoutIncludesResponse</returns>
        public BetaGroupsWithoutIncludesResponse AppsBetaGroupsGetToManyRelated(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaGroupsWithoutIncludesResponse> localVarResponse = AppsBetaGroupsGetToManyRelatedWithHttpInfo(id, fieldsBetaGroups, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaGroupsWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaGroupsWithoutIncludesResponse> AppsBetaGroupsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaGroupsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaGroupsWithoutIncludesResponse>("/v1/apps/{id}/betaGroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaGroupsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaGroupsWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BetaGroupsWithoutIncludesResponse> AppsBetaGroupsGetToManyRelatedAsync(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaGroupsWithoutIncludesResponse> localVarResponse = await AppsBetaGroupsGetToManyRelatedWithHttpInfoAsync(id, fieldsBetaGroups, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaGroupsWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaGroupsWithoutIncludesResponse>> AppsBetaGroupsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaGroups = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaGroupsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaGroupsWithoutIncludesResponse>("/v1/apps/{id}/betaGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaGroupsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <returns>BetaLicenseAgreementWithoutIncludesResponse</returns>
        public BetaLicenseAgreementWithoutIncludesResponse AppsBetaLicenseAgreementGetToOneRelated(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaLicenseAgreementWithoutIncludesResponse> localVarResponse = AppsBetaLicenseAgreementGetToOneRelatedWithHttpInfo(id, fieldsBetaLicenseAgreements);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <returns>ApiResponse of BetaLicenseAgreementWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaLicenseAgreementWithoutIncludesResponse> AppsBetaLicenseAgreementGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaLicenseAgreementGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaLicenseAgreementWithoutIncludesResponse>("/v1/apps/{id}/betaLicenseAgreement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaLicenseAgreementGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaLicenseAgreementWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BetaLicenseAgreementWithoutIncludesResponse> AppsBetaLicenseAgreementGetToOneRelatedAsync(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaLicenseAgreementWithoutIncludesResponse> localVarResponse = await AppsBetaLicenseAgreementGetToOneRelatedWithHttpInfoAsync(id, fieldsBetaLicenseAgreements, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaLicenseAgreementWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaLicenseAgreementWithoutIncludesResponse>> AppsBetaLicenseAgreementGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaLicenseAgreementGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaLicenseAgreementWithoutIncludesResponse>("/v1/apps/{id}/betaLicenseAgreement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaLicenseAgreementGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>AppsBetaTesterUsagesV1MetricResponse</returns>
        public AppsBetaTesterUsagesV1MetricResponse AppsBetaTesterUsagesGetMetrics(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> localVarResponse = AppsBetaTesterUsagesGetMetricsWithHttpInfo(id, period, groupBy, filterBetaTesters, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of AppsBetaTesterUsagesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetricsWithHttpInfo(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaTesterUsagesGetMetrics");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[betaTesters]", filterBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppsBetaTesterUsagesV1MetricResponse>("/v1/apps/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaTesterUsagesGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsBetaTesterUsagesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<AppsBetaTesterUsagesV1MetricResponse> AppsBetaTesterUsagesGetMetricsAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse> localVarResponse = await AppsBetaTesterUsagesGetMetricsWithHttpInfoAsync(id, period, groupBy, filterBetaTesters, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="period">the duration of the reporting period (optional)</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterBetaTesters">filter by &#39;betaTesters&#39; relationship dimension (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsBetaTesterUsagesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppsBetaTesterUsagesV1MetricResponse>> AppsBetaTesterUsagesGetMetricsWithHttpInfoAsync(string id, string? period = default(string?), List<string>? groupBy = default(List<string>?), string? filterBetaTesters = default(string?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaTesterUsagesGetMetrics");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (period != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "period", period));
            }
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[betaTesters]", filterBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppsBetaTesterUsagesV1MetricResponse>("/v1/apps/{id}/metrics/betaTesterUsages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaTesterUsagesGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void AppsBetaTestersDeleteToManyRelationship(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest)
        {
            AppsBetaTestersDeleteToManyRelationshipWithHttpInfo(id, appBetaTestersLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> AppsBetaTestersDeleteToManyRelationshipWithHttpInfo(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaTestersDeleteToManyRelationship");

            // verify the required parameter 'appBetaTestersLinkagesRequest' is set
            if (appBetaTestersLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appBetaTestersLinkagesRequest' when calling AppsApi->AppsBetaTestersDeleteToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appBetaTestersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/apps/{id}/relationships/betaTesters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaTestersDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppsBetaTestersDeleteToManyRelationshipAsync(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppsBetaTestersDeleteToManyRelationshipWithHttpInfoAsync(id, appBetaTestersLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appBetaTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> AppsBetaTestersDeleteToManyRelationshipWithHttpInfoAsync(string id, AppBetaTestersLinkagesRequest appBetaTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBetaTestersDeleteToManyRelationship");

            // verify the required parameter 'appBetaTestersLinkagesRequest' is set
            if (appBetaTestersLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appBetaTestersLinkagesRequest' when calling AppsApi->AppsBetaTestersDeleteToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appBetaTestersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/apps/{id}/relationships/betaTesters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBetaTestersDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BuildsWithoutIncludesResponse</returns>
        public BuildsWithoutIncludesResponse AppsBuildsGetToManyRelated(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildsWithoutIncludesResponse> localVarResponse = AppsBuildsGetToManyRelatedWithHttpInfo(id, fieldsBuilds, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BuildsWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildsWithoutIncludesResponse> AppsBuildsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBuildsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildsWithoutIncludesResponse>("/v1/apps/{id}/builds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBuildsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildsWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BuildsWithoutIncludesResponse> AppsBuildsGetToManyRelatedAsync(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildsWithoutIncludesResponse> localVarResponse = await AppsBuildsGetToManyRelatedWithHttpInfoAsync(id, fieldsBuilds, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildsWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildsWithoutIncludesResponse>> AppsBuildsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuilds = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsBuildsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildsWithoutIncludesResponse>("/v1/apps/{id}/builds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsBuildsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>CiProductResponse</returns>
        public CiProductResponse AppsCiProductGetToOneRelated(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiProductResponse> localVarResponse = AppsCiProductGetToOneRelatedWithHttpInfo(id, fieldsCiProducts, fieldsApps, fieldsBundleIds, fieldsScmRepositories, include, limitPrimaryRepositories);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of CiProductResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<CiProductResponse> AppsCiProductGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsCiProductGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBundleIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[bundleIds]", fieldsBundleIds));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPrimaryRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[primaryRepositories]", limitPrimaryRepositories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CiProductResponse>("/v1/apps/{id}/ciProduct", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsCiProductGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CiProductResponse</returns>
        public async System.Threading.Tasks.Task<CiProductResponse> AppsCiProductGetToOneRelatedAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<CiProductResponse> localVarResponse = await AppsCiProductGetToOneRelatedWithHttpInfoAsync(id, fieldsCiProducts, fieldsApps, fieldsBundleIds, fieldsScmRepositories, include, limitPrimaryRepositories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBundleIds">the fields to include for returned resources of type bundleIds (optional)</param>
        /// <param name="fieldsScmRepositories">the fields to include for returned resources of type scmRepositories (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPrimaryRepositories">maximum number of related primaryRepositories returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CiProductResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<CiProductResponse>> AppsCiProductGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBundleIds = default(List<string>?), List<string>? fieldsScmRepositories = default(List<string>?), List<string>? include = default(List<string>?), int? limitPrimaryRepositories = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsCiProductGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBundleIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[bundleIds]", fieldsBundleIds));
            }
            if (fieldsScmRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[scmRepositories]", fieldsScmRepositories));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPrimaryRepositories != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[primaryRepositories]", limitPrimaryRepositories));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CiProductResponse>("/v1/apps/{id}/ciProduct", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsCiProductGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>CustomerReviewsResponse</returns>
        public CustomerReviewsResponse AppsCustomerReviewsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse> localVarResponse = AppsCustomerReviewsGetToManyRelatedWithHttpInfo(id, filterTerritory, filterRating, existsPublishedResponse, sort, fieldsCustomerReviews, fieldsCustomerReviewResponses, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of CustomerReviewsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse> AppsCustomerReviewsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsCustomerReviewsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (filterRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[rating]", filterRating));
            }
            if (existsPublishedResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "exists[publishedResponse]", existsPublishedResponse));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsCustomerReviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviews]", fieldsCustomerReviews));
            }
            if (fieldsCustomerReviewResponses != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviewResponses]", fieldsCustomerReviewResponses));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerReviewsResponse>("/v1/apps/{id}/customerReviews", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsCustomerReviewsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerReviewsResponse</returns>
        public async System.Threading.Tasks.Task<CustomerReviewsResponse> AppsCustomerReviewsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse> localVarResponse = await AppsCustomerReviewsGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, filterRating, existsPublishedResponse, sort, fieldsCustomerReviews, fieldsCustomerReviewResponses, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerReviewsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse>> AppsCustomerReviewsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsCustomerReviewsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (filterRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[rating]", filterRating));
            }
            if (existsPublishedResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "exists[publishedResponse]", existsPublishedResponse));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsCustomerReviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviews]", fieldsCustomerReviews));
            }
            if (fieldsCustomerReviewResponses != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviewResponses]", fieldsCustomerReviewResponses));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerReviewsResponse>("/v1/apps/{id}/customerReviews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsCustomerReviewsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <returns>EndUserLicenseAgreementWithoutIncludesResponse</returns>
        public EndUserLicenseAgreementWithoutIncludesResponse AppsEndUserLicenseAgreementGetToOneRelated(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<EndUserLicenseAgreementWithoutIncludesResponse> localVarResponse = AppsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo(id, fieldsEndUserLicenseAgreements);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <returns>ApiResponse of EndUserLicenseAgreementWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<EndUserLicenseAgreementWithoutIncludesResponse> AppsEndUserLicenseAgreementGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsEndUserLicenseAgreementGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EndUserLicenseAgreementWithoutIncludesResponse>("/v1/apps/{id}/endUserLicenseAgreement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsEndUserLicenseAgreementGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EndUserLicenseAgreementWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<EndUserLicenseAgreementWithoutIncludesResponse> AppsEndUserLicenseAgreementGetToOneRelatedAsync(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<EndUserLicenseAgreementWithoutIncludesResponse> localVarResponse = await AppsEndUserLicenseAgreementGetToOneRelatedWithHttpInfoAsync(id, fieldsEndUserLicenseAgreements, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EndUserLicenseAgreementWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<EndUserLicenseAgreementWithoutIncludesResponse>> AppsEndUserLicenseAgreementGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsEndUserLicenseAgreementGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EndUserLicenseAgreementWithoutIncludesResponse>("/v1/apps/{id}/endUserLicenseAgreement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsEndUserLicenseAgreementGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>GameCenterDetailResponse</returns>
        public GameCenterDetailResponse AppsGameCenterDetailGetToOneRelated(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = AppsGameCenterDetailGetToOneRelatedWithHttpInfo(id, fieldsGameCenterDetails, fieldsApps, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, include, limitGameCenterAppVersions, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements, limitAchievementReleases, limitLeaderboardReleases, limitLeaderboardSetReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> AppsGameCenterDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsGameCenterDetailGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAppVersions]", limitGameCenterAppVersions));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[achievementReleases]", limitAchievementReleases));
            }
            if (limitLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardReleases]", limitLeaderboardReleases));
            }
            if (limitLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardSetReleases]", limitLeaderboardSetReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterDetailResponse>("/v1/apps/{id}/gameCenterDetail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGameCenterDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailResponse> AppsGameCenterDetailGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = await AppsGameCenterDetailGetToOneRelatedWithHttpInfoAsync(id, fieldsGameCenterDetails, fieldsApps, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, include, limitGameCenterAppVersions, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements, limitAchievementReleases, limitLeaderboardReleases, limitLeaderboardSetReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse>> AppsGameCenterDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsGameCenterDetailGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAppVersions]", limitGameCenterAppVersions));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[achievementReleases]", limitAchievementReleases));
            }
            if (limitLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardReleases]", limitLeaderboardReleases));
            }
            if (limitLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardSetReleases]", limitLeaderboardSetReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterDetailResponse>("/v1/apps/{id}/gameCenterDetail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGameCenterDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <returns>GameCenterEnabledVersionsResponse</returns>
        [Obsolete]
        public GameCenterEnabledVersionsResponse AppsGameCenterEnabledVersionsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterEnabledVersionsResponse> localVarResponse = AppsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo(id, filterPlatform, filterVersionString, filterId, sort, fieldsGameCenterEnabledVersions, fieldsApps, limit, include, limitCompatibleVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <returns>ApiResponse of GameCenterEnabledVersionsResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterEnabledVersionsResponse> AppsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsGameCenterEnabledVersionsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterVersionString != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[versionString]", filterVersionString));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibleVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibleVersions]", limitCompatibleVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterEnabledVersionsResponse>("/v1/apps/{id}/gameCenterEnabledVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGameCenterEnabledVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterEnabledVersionsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GameCenterEnabledVersionsResponse> AppsGameCenterEnabledVersionsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterEnabledVersionsResponse> localVarResponse = await AppsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfoAsync(id, filterPlatform, filterVersionString, filterId, sort, fieldsGameCenterEnabledVersions, fieldsApps, limit, include, limitCompatibleVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterVersionString">filter by attribute &#39;versionString&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibleVersions">maximum number of related compatibleVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterEnabledVersionsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterEnabledVersionsResponse>> AppsGameCenterEnabledVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterVersionString = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibleVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsGameCenterEnabledVersionsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterVersionString != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[versionString]", filterVersionString));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibleVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibleVersions]", limitCompatibleVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterEnabledVersionsResponse>("/v1/apps/{id}/gameCenterEnabledVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGameCenterEnabledVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>AppsResponse</returns>
        public AppsResponse AppsGetCollection(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsResponse> localVarResponse = AppsGetCollectionWithHttpInfo(filterName, filterBundleId, filterSku, filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform, filterAppStoreVersionsAppVersionState, filterReviewSubmissionsState, filterReviewSubmissionsPlatform, filterAppStoreVersions, filterId, existsGameCenterEnabledVersions, sort, fieldsApps, fieldsAppEncryptionDeclarations, fieldsCiProducts, fieldsBetaGroups, fieldsAppStoreVersions, fieldsPreReleaseVersions, fieldsBetaAppLocalizations, fieldsBuilds, fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails, fieldsAppInfos, fieldsAppClips, fieldsEndUserLicenseAgreements, fieldsAppPreOrders, fieldsInAppPurchases, fieldsSubscriptionGroups, fieldsGameCenterEnabledVersions, fieldsAppCustomProductPages, fieldsPromotedPurchases, fieldsAppEvents, fieldsReviewSubmissions, fieldsSubscriptionGracePeriods, fieldsGameCenterDetails, fieldsAppStoreVersionExperiments, limit, include, limitAppClips, limitAppCustomProductPages, limitAppEncryptionDeclarations, limitAppEvents, limitAppInfos, limitAppStoreVersionExperimentsV2, limitAppStoreVersions, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitInAppPurchasesV2, limitPreReleaseVersions, limitPromotedPurchases, limitReviewSubmissions, limitSubscriptionGroups);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppsResponse> AppsGetCollectionWithHttpInfo(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?))
        {
            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterBundleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[bundleId]", filterBundleId));
            }
            if (filterSku != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[sku]", filterSku));
            }
            if (filterAppStoreVersionsAppStoreState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions.appStoreState]", filterAppStoreVersionsAppStoreState));
            }
            if (filterAppStoreVersionsPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions.platform]", filterAppStoreVersionsPlatform));
            }
            if (filterAppStoreVersionsAppVersionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions.appVersionState]", filterAppStoreVersionsAppVersionState));
            }
            if (filterReviewSubmissionsState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[reviewSubmissions.state]", filterReviewSubmissionsState));
            }
            if (filterReviewSubmissionsPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[reviewSubmissions.platform]", filterReviewSubmissionsPlatform));
            }
            if (filterAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions]", filterAppStoreVersions));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (existsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "exists[gameCenterEnabledVersions]", existsGameCenterEnabledVersions));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClips]", limitAppClips));
            }
            if (limitAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPages]", limitAppCustomProductPages));
            }
            if (limitAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations));
            }
            if (limitAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEvents]", limitAppEvents));
            }
            if (limitAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfos]", limitAppInfos));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }
            if (limitAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersions]", limitAppStoreVersions));
            }
            if (limitBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaAppLocalizations]", limitBetaAppLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }
            if (limitGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
            }
            if (limitInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchases]", limitInAppPurchases));
            }
            if (limitInAppPurchasesV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchasesV2]", limitInAppPurchasesV2));
            }
            if (limitPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[preReleaseVersions]", limitPreReleaseVersions));
            }
            if (limitPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotedPurchases]", limitPromotedPurchases));
            }
            if (limitReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reviewSubmissions]", limitReviewSubmissions));
            }
            if (limitSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroups]", limitSubscriptionGroups));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppsResponse>("/v1/apps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppsResponse</returns>
        public async System.Threading.Tasks.Task<AppsResponse> AppsGetCollectionAsync(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppsResponse> localVarResponse = await AppsGetCollectionWithHttpInfoAsync(filterName, filterBundleId, filterSku, filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform, filterAppStoreVersionsAppVersionState, filterReviewSubmissionsState, filterReviewSubmissionsPlatform, filterAppStoreVersions, filterId, existsGameCenterEnabledVersions, sort, fieldsApps, fieldsAppEncryptionDeclarations, fieldsCiProducts, fieldsBetaGroups, fieldsAppStoreVersions, fieldsPreReleaseVersions, fieldsBetaAppLocalizations, fieldsBuilds, fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails, fieldsAppInfos, fieldsAppClips, fieldsEndUserLicenseAgreements, fieldsAppPreOrders, fieldsInAppPurchases, fieldsSubscriptionGroups, fieldsGameCenterEnabledVersions, fieldsAppCustomProductPages, fieldsPromotedPurchases, fieldsAppEvents, fieldsReviewSubmissions, fieldsSubscriptionGracePeriods, fieldsGameCenterDetails, fieldsAppStoreVersionExperiments, limit, include, limitAppClips, limitAppCustomProductPages, limitAppEncryptionDeclarations, limitAppEvents, limitAppInfos, limitAppStoreVersionExperimentsV2, limitAppStoreVersions, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitInAppPurchasesV2, limitPreReleaseVersions, limitPromotedPurchases, limitReviewSubmissions, limitSubscriptionGroups, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterBundleId">filter by attribute &#39;bundleId&#39; (optional)</param>
        /// <param name="filterSku">filter by attribute &#39;sku&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppStoreState">filter by attribute &#39;appStoreVersions.appStoreState&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsPlatform">filter by attribute &#39;appStoreVersions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersionsAppVersionState">filter by attribute &#39;appStoreVersions.appVersionState&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsState">filter by attribute &#39;reviewSubmissions.state&#39; (optional)</param>
        /// <param name="filterReviewSubmissionsPlatform">filter by attribute &#39;reviewSubmissions.platform&#39; (optional)</param>
        /// <param name="filterAppStoreVersions">filter by id(s) of related &#39;appStoreVersions&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="existsGameCenterEnabledVersions">filter by existence or non-existence of related &#39;gameCenterEnabledVersions&#39; (optional) (deprecated)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppsResponse>> AppsGetCollectionWithHttpInfoAsync(List<string>? filterName = default(List<string>?), List<string>? filterBundleId = default(List<string>?), List<string>? filterSku = default(List<string>?), List<string>? filterAppStoreVersionsAppStoreState = default(List<string>?), List<string>? filterAppStoreVersionsPlatform = default(List<string>?), List<string>? filterAppStoreVersionsAppVersionState = default(List<string>?), List<string>? filterReviewSubmissionsState = default(List<string>?), List<string>? filterReviewSubmissionsPlatform = default(List<string>?), List<string>? filterAppStoreVersions = default(List<string>?), List<string>? filterId = default(List<string>?), bool? existsGameCenterEnabledVersions = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterBundleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[bundleId]", filterBundleId));
            }
            if (filterSku != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[sku]", filterSku));
            }
            if (filterAppStoreVersionsAppStoreState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions.appStoreState]", filterAppStoreVersionsAppStoreState));
            }
            if (filterAppStoreVersionsPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions.platform]", filterAppStoreVersionsPlatform));
            }
            if (filterAppStoreVersionsAppVersionState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions.appVersionState]", filterAppStoreVersionsAppVersionState));
            }
            if (filterReviewSubmissionsState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[reviewSubmissions.state]", filterReviewSubmissionsState));
            }
            if (filterReviewSubmissionsPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[reviewSubmissions.platform]", filterReviewSubmissionsPlatform));
            }
            if (filterAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersions]", filterAppStoreVersions));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (existsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "exists[gameCenterEnabledVersions]", existsGameCenterEnabledVersions));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClips]", limitAppClips));
            }
            if (limitAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPages]", limitAppCustomProductPages));
            }
            if (limitAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations));
            }
            if (limitAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEvents]", limitAppEvents));
            }
            if (limitAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfos]", limitAppInfos));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }
            if (limitAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersions]", limitAppStoreVersions));
            }
            if (limitBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaAppLocalizations]", limitBetaAppLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }
            if (limitGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
            }
            if (limitInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchases]", limitInAppPurchases));
            }
            if (limitInAppPurchasesV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchasesV2]", limitInAppPurchasesV2));
            }
            if (limitPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[preReleaseVersions]", limitPreReleaseVersions));
            }
            if (limitPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotedPurchases]", limitPromotedPurchases));
            }
            if (limitReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reviewSubmissions]", limitReviewSubmissions));
            }
            if (limitSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroups]", limitSubscriptionGroups));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppsResponse>("/v1/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>AppResponse</returns>
        public AppResponse AppsGetInstance(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppResponse> localVarResponse = AppsGetInstanceWithHttpInfo(id, fieldsApps, fieldsAppEncryptionDeclarations, fieldsCiProducts, fieldsBetaGroups, fieldsAppStoreVersions, fieldsPreReleaseVersions, fieldsBetaAppLocalizations, fieldsBuilds, fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails, fieldsAppInfos, fieldsAppClips, fieldsEndUserLicenseAgreements, fieldsAppPreOrders, fieldsInAppPurchases, fieldsSubscriptionGroups, fieldsGameCenterEnabledVersions, fieldsAppCustomProductPages, fieldsPromotedPurchases, fieldsAppEvents, fieldsReviewSubmissions, fieldsSubscriptionGracePeriods, fieldsGameCenterDetails, fieldsAppStoreVersionExperiments, include, limitAppClips, limitAppCustomProductPages, limitAppEncryptionDeclarations, limitAppEvents, limitAppInfos, limitAppStoreVersionExperimentsV2, limitAppStoreVersions, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitInAppPurchasesV2, limitPreReleaseVersions, limitPromotedPurchases, limitReviewSubmissions, limitSubscriptionGroups);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppResponse> AppsGetInstanceWithHttpInfo(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClips]", limitAppClips));
            }
            if (limitAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPages]", limitAppCustomProductPages));
            }
            if (limitAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations));
            }
            if (limitAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEvents]", limitAppEvents));
            }
            if (limitAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfos]", limitAppInfos));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }
            if (limitAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersions]", limitAppStoreVersions));
            }
            if (limitBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaAppLocalizations]", limitBetaAppLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }
            if (limitGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
            }
            if (limitInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchases]", limitInAppPurchases));
            }
            if (limitInAppPurchasesV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchasesV2]", limitInAppPurchasesV2));
            }
            if (limitPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[preReleaseVersions]", limitPreReleaseVersions));
            }
            if (limitPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotedPurchases]", limitPromotedPurchases));
            }
            if (limitReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reviewSubmissions]", limitReviewSubmissions));
            }
            if (limitSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroups]", limitSubscriptionGroups));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppResponse>("/v1/apps/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppResponse</returns>
        public async System.Threading.Tasks.Task<AppResponse> AppsGetInstanceAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppResponse> localVarResponse = await AppsGetInstanceWithHttpInfoAsync(id, fieldsApps, fieldsAppEncryptionDeclarations, fieldsCiProducts, fieldsBetaGroups, fieldsAppStoreVersions, fieldsPreReleaseVersions, fieldsBetaAppLocalizations, fieldsBuilds, fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails, fieldsAppInfos, fieldsAppClips, fieldsEndUserLicenseAgreements, fieldsAppPreOrders, fieldsInAppPurchases, fieldsSubscriptionGroups, fieldsGameCenterEnabledVersions, fieldsAppCustomProductPages, fieldsPromotedPurchases, fieldsAppEvents, fieldsReviewSubmissions, fieldsSubscriptionGracePeriods, fieldsGameCenterDetails, fieldsAppStoreVersionExperiments, include, limitAppClips, limitAppCustomProductPages, limitAppEncryptionDeclarations, limitAppEvents, limitAppInfos, limitAppStoreVersionExperimentsV2, limitAppStoreVersions, limitBetaAppLocalizations, limitBetaGroups, limitBuilds, limitGameCenterEnabledVersions, limitInAppPurchases, limitInAppPurchasesV2, limitPreReleaseVersions, limitPromotedPurchases, limitReviewSubmissions, limitSubscriptionGroups, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsCiProducts">the fields to include for returned resources of type ciProducts (optional)</param>
        /// <param name="fieldsBetaGroups">the fields to include for returned resources of type betaGroups (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaAppLocalizations">the fields to include for returned resources of type betaAppLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsBetaLicenseAgreements">the fields to include for returned resources of type betaLicenseAgreements (optional)</param>
        /// <param name="fieldsBetaAppReviewDetails">the fields to include for returned resources of type betaAppReviewDetails (optional)</param>
        /// <param name="fieldsAppInfos">the fields to include for returned resources of type appInfos (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsEndUserLicenseAgreements">the fields to include for returned resources of type endUserLicenseAgreements (optional)</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional) (deprecated)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsGameCenterEnabledVersions">the fields to include for returned resources of type gameCenterEnabledVersions (optional) (deprecated)</param>
        /// <param name="fieldsAppCustomProductPages">the fields to include for returned resources of type appCustomProductPages (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsAppEvents">the fields to include for returned resources of type appEvents (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClips">maximum number of related appClips returned (when they are included) (optional)</param>
        /// <param name="limitAppCustomProductPages">maximum number of related appCustomProductPages returned (when they are included) (optional)</param>
        /// <param name="limitAppEncryptionDeclarations">maximum number of related appEncryptionDeclarations returned (when they are included) (optional)</param>
        /// <param name="limitAppEvents">maximum number of related appEvents returned (when they are included) (optional)</param>
        /// <param name="limitAppInfos">maximum number of related appInfos returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersions">maximum number of related appStoreVersions returned (when they are included) (optional)</param>
        /// <param name="limitBetaAppLocalizations">maximum number of related betaAppLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuilds">maximum number of related builds returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterEnabledVersions">maximum number of related gameCenterEnabledVersions returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchases">maximum number of related inAppPurchases returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitInAppPurchasesV2">maximum number of related inAppPurchasesV2 returned (when they are included) (optional)</param>
        /// <param name="limitPreReleaseVersions">maximum number of related preReleaseVersions returned (when they are included) (optional)</param>
        /// <param name="limitPromotedPurchases">maximum number of related promotedPurchases returned (when they are included) (optional)</param>
        /// <param name="limitReviewSubmissions">maximum number of related reviewSubmissions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroups">maximum number of related subscriptionGroups returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppResponse>> AppsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsCiProducts = default(List<string>?), List<string>? fieldsBetaGroups = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaAppLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsBetaLicenseAgreements = default(List<string>?), List<string>? fieldsBetaAppReviewDetails = default(List<string>?), List<string>? fieldsAppInfos = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsEndUserLicenseAgreements = default(List<string>?), List<string>? fieldsAppPreOrders = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsGameCenterEnabledVersions = default(List<string>?), List<string>? fieldsAppCustomProductPages = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsAppEvents = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClips = default(int?), int? limitAppCustomProductPages = default(int?), int? limitAppEncryptionDeclarations = default(int?), int? limitAppEvents = default(int?), int? limitAppInfos = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersions = default(int?), int? limitBetaAppLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuilds = default(int?), int? limitGameCenterEnabledVersions = default(int?), int? limitInAppPurchases = default(int?), int? limitInAppPurchasesV2 = default(int?), int? limitPreReleaseVersions = default(int?), int? limitPromotedPurchases = default(int?), int? limitReviewSubmissions = default(int?), int? limitSubscriptionGroups = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsCiProducts != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ciProducts]", fieldsCiProducts));
            }
            if (fieldsBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaGroups]", fieldsBetaGroups));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppLocalizations]", fieldsBetaAppLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsBetaLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaLicenseAgreements]", fieldsBetaLicenseAgreements));
            }
            if (fieldsBetaAppReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewDetails]", fieldsBetaAppReviewDetails));
            }
            if (fieldsAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appInfos]", fieldsAppInfos));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsEndUserLicenseAgreements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[endUserLicenseAgreements]", fieldsEndUserLicenseAgreements));
            }
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterEnabledVersions]", fieldsGameCenterEnabledVersions));
            }
            if (fieldsAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appCustomProductPages]", fieldsAppCustomProductPages));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEvents]", fieldsAppEvents));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClips]", limitAppClips));
            }
            if (limitAppCustomProductPages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appCustomProductPages]", limitAppCustomProductPages));
            }
            if (limitAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEncryptionDeclarations]", limitAppEncryptionDeclarations));
            }
            if (limitAppEvents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appEvents]", limitAppEvents));
            }
            if (limitAppInfos != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appInfos]", limitAppInfos));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }
            if (limitAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersions]", limitAppStoreVersions));
            }
            if (limitBetaAppLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaAppLocalizations]", limitBetaAppLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[builds]", limitBuilds));
            }
            if (limitGameCenterEnabledVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions));
            }
            if (limitInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchases]", limitInAppPurchases));
            }
            if (limitInAppPurchasesV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchasesV2]", limitInAppPurchasesV2));
            }
            if (limitPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[preReleaseVersions]", limitPreReleaseVersions));
            }
            if (limitPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotedPurchases]", limitPromotedPurchases));
            }
            if (limitReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[reviewSubmissions]", limitReviewSubmissions));
            }
            if (limitSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroups]", limitSubscriptionGroups));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppResponse>("/v1/apps/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>InAppPurchasesResponse</returns>
        [Obsolete]
        public InAppPurchasesResponse AppsInAppPurchasesGetToManyRelated(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesResponse> localVarResponse = AppsInAppPurchasesGetToManyRelatedWithHttpInfo(id, filterInAppPurchaseType, filterCanBeSubmitted, sort, fieldsInAppPurchases, fieldsApps, limit, include, limitApps);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchasesResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesResponse> AppsInAppPurchasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsInAppPurchasesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterInAppPurchaseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[inAppPurchaseType]", filterInAppPurchaseType));
            }
            if (filterCanBeSubmitted != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[canBeSubmitted]", filterCanBeSubmitted));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[apps]", limitApps));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchasesResponse>("/v1/apps/{id}/inAppPurchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsInAppPurchasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasesResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<InAppPurchasesResponse> AppsInAppPurchasesGetToManyRelatedAsync(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesResponse> localVarResponse = await AppsInAppPurchasesGetToManyRelatedWithHttpInfoAsync(id, filterInAppPurchaseType, filterCanBeSubmitted, sort, fieldsInAppPurchases, fieldsApps, limit, include, limitApps, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="filterCanBeSubmitted">filter by canBeSubmitted (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitApps">maximum number of related apps returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasesResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesResponse>> AppsInAppPurchasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? filterCanBeSubmitted = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsApps = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitApps = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsInAppPurchasesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterInAppPurchaseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[inAppPurchaseType]", filterInAppPurchaseType));
            }
            if (filterCanBeSubmitted != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[canBeSubmitted]", filterCanBeSubmitted));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[apps]", limitApps));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchasesResponse>("/v1/apps/{id}/inAppPurchases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsInAppPurchasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <returns>InAppPurchasesV2Response</returns>
        public InAppPurchasesV2Response AppsInAppPurchasesV2GetToManyRelated(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesV2Response> localVarResponse = AppsInAppPurchasesV2GetToManyRelatedWithHttpInfo(id, filterProductId, filterName, filterState, filterInAppPurchaseType, sort, fieldsInAppPurchases, fieldsInAppPurchaseLocalizations, fieldsInAppPurchaseContents, fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsPromotedPurchases, fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseAvailabilities, fieldsInAppPurchaseImages, limit, include, limitInAppPurchaseLocalizations, limitImages);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of InAppPurchasesV2Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesV2Response> AppsInAppPurchasesV2GetToManyRelatedWithHttpInfo(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsInAppPurchasesV2GetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterProductId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[productId]", filterProductId));
            }
            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (filterInAppPurchaseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[inAppPurchaseType]", filterInAppPurchaseType));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseLocalizations]", fieldsInAppPurchaseLocalizations));
            }
            if (fieldsInAppPurchaseContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseContents]", fieldsInAppPurchaseContents));
            }
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAppStoreReviewScreenshots]", fieldsInAppPurchaseAppStoreReviewScreenshots));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsInAppPurchasePriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePriceSchedules]", fieldsInAppPurchasePriceSchedules));
            }
            if (fieldsInAppPurchaseAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAvailabilities]", fieldsInAppPurchaseAvailabilities));
            }
            if (fieldsInAppPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseImages]", fieldsInAppPurchaseImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations));
            }
            if (limitImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[images]", limitImages));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InAppPurchasesV2Response>("/v1/apps/{id}/inAppPurchasesV2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsInAppPurchasesV2GetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InAppPurchasesV2Response</returns>
        public async System.Threading.Tasks.Task<InAppPurchasesV2Response> AppsInAppPurchasesV2GetToManyRelatedAsync(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesV2Response> localVarResponse = await AppsInAppPurchasesV2GetToManyRelatedWithHttpInfoAsync(id, filterProductId, filterName, filterState, filterInAppPurchaseType, sort, fieldsInAppPurchases, fieldsInAppPurchaseLocalizations, fieldsInAppPurchaseContents, fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsPromotedPurchases, fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseAvailabilities, fieldsInAppPurchaseImages, limit, include, limitInAppPurchaseLocalizations, limitImages, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterProductId">filter by attribute &#39;productId&#39; (optional)</param>
        /// <param name="filterName">filter by attribute &#39;name&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="filterInAppPurchaseType">filter by attribute &#39;inAppPurchaseType&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsInAppPurchaseLocalizations">the fields to include for returned resources of type inAppPurchaseLocalizations (optional)</param>
        /// <param name="fieldsInAppPurchaseContents">the fields to include for returned resources of type inAppPurchaseContents (optional)</param>
        /// <param name="fieldsInAppPurchaseAppStoreReviewScreenshots">the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchasePriceSchedules">the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)</param>
        /// <param name="fieldsInAppPurchaseAvailabilities">the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)</param>
        /// <param name="fieldsInAppPurchaseImages">the fields to include for returned resources of type inAppPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitInAppPurchaseLocalizations">maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitImages">maximum number of related images returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InAppPurchasesV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<InAppPurchasesV2Response>> AppsInAppPurchasesV2GetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterProductId = default(List<string>?), List<string>? filterName = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? filterInAppPurchaseType = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsInAppPurchaseLocalizations = default(List<string>?), List<string>? fieldsInAppPurchaseContents = default(List<string>?), List<string>? fieldsInAppPurchaseAppStoreReviewScreenshots = default(List<string>?), List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchasePriceSchedules = default(List<string>?), List<string>? fieldsInAppPurchaseAvailabilities = default(List<string>?), List<string>? fieldsInAppPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitInAppPurchaseLocalizations = default(int?), int? limitImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsInAppPurchasesV2GetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterProductId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[productId]", filterProductId));
            }
            if (filterName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[name]", filterName));
            }
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (filterInAppPurchaseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[inAppPurchaseType]", filterInAppPurchaseType));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseLocalizations]", fieldsInAppPurchaseLocalizations));
            }
            if (fieldsInAppPurchaseContents != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseContents]", fieldsInAppPurchaseContents));
            }
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAppStoreReviewScreenshots]", fieldsInAppPurchaseAppStoreReviewScreenshots));
            }
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsInAppPurchasePriceSchedules != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchasePriceSchedules]", fieldsInAppPurchasePriceSchedules));
            }
            if (fieldsInAppPurchaseAvailabilities != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseAvailabilities]", fieldsInAppPurchaseAvailabilities));
            }
            if (fieldsInAppPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchaseImages]", fieldsInAppPurchaseImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitInAppPurchaseLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations));
            }
            if (limitImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[images]", limitImages));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InAppPurchasesV2Response>("/v1/apps/{id}/inAppPurchasesV2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsInAppPurchasesV2GetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <returns>MarketplaceSearchDetailResponse</returns>
        public MarketplaceSearchDetailResponse AppsMarketplaceSearchDetailGetToOneRelated(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<MarketplaceSearchDetailResponse> localVarResponse = AppsMarketplaceSearchDetailGetToOneRelatedWithHttpInfo(id, fieldsMarketplaceSearchDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <returns>ApiResponse of MarketplaceSearchDetailResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<MarketplaceSearchDetailResponse> AppsMarketplaceSearchDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsMarketplaceSearchDetailGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsMarketplaceSearchDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[marketplaceSearchDetails]", fieldsMarketplaceSearchDetails));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MarketplaceSearchDetailResponse>("/v1/apps/{id}/marketplaceSearchDetail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsMarketplaceSearchDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketplaceSearchDetailResponse</returns>
        public async System.Threading.Tasks.Task<MarketplaceSearchDetailResponse> AppsMarketplaceSearchDetailGetToOneRelatedAsync(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<MarketplaceSearchDetailResponse> localVarResponse = await AppsMarketplaceSearchDetailGetToOneRelatedWithHttpInfoAsync(id, fieldsMarketplaceSearchDetails, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsMarketplaceSearchDetails">the fields to include for returned resources of type marketplaceSearchDetails (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketplaceSearchDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<MarketplaceSearchDetailResponse>> AppsMarketplaceSearchDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsMarketplaceSearchDetails = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsMarketplaceSearchDetailGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsMarketplaceSearchDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[marketplaceSearchDetails]", fieldsMarketplaceSearchDetails));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MarketplaceSearchDetailResponse>("/v1/apps/{id}/marketplaceSearchDetail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsMarketplaceSearchDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>XcodeMetrics</returns>
        public XcodeMetrics AppsPerfPowerMetricsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics> localVarResponse = AppsPerfPowerMetricsGetToManyRelatedWithHttpInfo(id, filterPlatform, filterMetricType, filterDeviceType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>ApiResponse of XcodeMetrics</returns>
        public AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics> AppsPerfPowerMetricsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPerfPowerMetricsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.apple.xcode-metrics+json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterMetricType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[metricType]", filterMetricType));
            }
            if (filterDeviceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[deviceType]", filterDeviceType));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<XcodeMetrics>("/v1/apps/{id}/perfPowerMetrics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPerfPowerMetricsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of XcodeMetrics</returns>
        public async System.Threading.Tasks.Task<XcodeMetrics> AppsPerfPowerMetricsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics> localVarResponse = await AppsPerfPowerMetricsGetToManyRelatedWithHttpInfoAsync(id, filterPlatform, filterMetricType, filterDeviceType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (XcodeMetrics)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics>> AppsPerfPowerMetricsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPerfPowerMetricsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.apple.xcode-metrics+json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterMetricType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[metricType]", filterMetricType));
            }
            if (filterDeviceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[deviceType]", filterDeviceType));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<XcodeMetrics>("/v1/apps/{id}/perfPowerMetrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPerfPowerMetricsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <returns>AppPreOrderWithoutIncludesResponse</returns>
        [Obsolete]
        public AppPreOrderWithoutIncludesResponse AppsPreOrderGetToOneRelated(string id, List<string>? fieldsAppPreOrders = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPreOrderWithoutIncludesResponse> localVarResponse = AppsPreOrderGetToOneRelatedWithHttpInfo(id, fieldsAppPreOrders);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <returns>ApiResponse of AppPreOrderWithoutIncludesResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppPreOrderWithoutIncludesResponse> AppsPreOrderGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppPreOrders = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPreOrderGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPreOrderWithoutIncludesResponse>("/v1/apps/{id}/preOrder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPreOrderGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPreOrderWithoutIncludesResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppPreOrderWithoutIncludesResponse> AppsPreOrderGetToOneRelatedAsync(string id, List<string>? fieldsAppPreOrders = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPreOrderWithoutIncludesResponse> localVarResponse = await AppsPreOrderGetToOneRelatedWithHttpInfoAsync(id, fieldsAppPreOrders, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppPreOrders">the fields to include for returned resources of type appPreOrders (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPreOrderWithoutIncludesResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppPreOrderWithoutIncludesResponse>> AppsPreOrderGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppPreOrders = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPreOrderGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppPreOrders != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreOrders]", fieldsAppPreOrders));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPreOrderWithoutIncludesResponse>("/v1/apps/{id}/preOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPreOrderGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>PreReleaseVersionsWithoutIncludesResponse</returns>
        public PreReleaseVersionsWithoutIncludesResponse AppsPreReleaseVersionsGetToManyRelated(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<PreReleaseVersionsWithoutIncludesResponse> localVarResponse = AppsPreReleaseVersionsGetToManyRelatedWithHttpInfo(id, fieldsPreReleaseVersions, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of PreReleaseVersionsWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<PreReleaseVersionsWithoutIncludesResponse> AppsPreReleaseVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPreReleaseVersionsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PreReleaseVersionsWithoutIncludesResponse>("/v1/apps/{id}/preReleaseVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPreReleaseVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreReleaseVersionsWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<PreReleaseVersionsWithoutIncludesResponse> AppsPreReleaseVersionsGetToManyRelatedAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<PreReleaseVersionsWithoutIncludesResponse> localVarResponse = await AppsPreReleaseVersionsGetToManyRelatedWithHttpInfoAsync(id, fieldsPreReleaseVersions, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreReleaseVersionsWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<PreReleaseVersionsWithoutIncludesResponse>> AppsPreReleaseVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPreReleaseVersionsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PreReleaseVersionsWithoutIncludesResponse>("/v1/apps/{id}/preReleaseVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPreReleaseVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <returns>PromotedPurchasesResponse</returns>
        public PromotedPurchasesResponse AppsPromotedPurchasesGetToManyRelated(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<PromotedPurchasesResponse> localVarResponse = AppsPromotedPurchasesGetToManyRelatedWithHttpInfo(id, fieldsPromotedPurchases, fieldsInAppPurchases, fieldsSubscriptions, fieldsPromotedPurchaseImages, limit, include, limitPromotionImages);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <returns>ApiResponse of PromotedPurchasesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<PromotedPurchasesResponse> AppsPromotedPurchasesGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPromotedPurchasesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsPromotedPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchaseImages]", fieldsPromotedPurchaseImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPromotionImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionImages]", limitPromotionImages));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotedPurchasesResponse>("/v1/apps/{id}/promotedPurchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPromotedPurchasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotedPurchasesResponse</returns>
        public async System.Threading.Tasks.Task<PromotedPurchasesResponse> AppsPromotedPurchasesGetToManyRelatedAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<PromotedPurchasesResponse> localVarResponse = await AppsPromotedPurchasesGetToManyRelatedWithHttpInfoAsync(id, fieldsPromotedPurchases, fieldsInAppPurchases, fieldsSubscriptions, fieldsPromotedPurchaseImages, limit, include, limitPromotionImages, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPromotedPurchases">the fields to include for returned resources of type promotedPurchases (optional)</param>
        /// <param name="fieldsInAppPurchases">the fields to include for returned resources of type inAppPurchases (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsPromotedPurchaseImages">the fields to include for returned resources of type promotedPurchaseImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitPromotionImages">maximum number of related promotionImages returned (when they are included) (optional) (deprecated)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotedPurchasesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<PromotedPurchasesResponse>> AppsPromotedPurchasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsPromotedPurchases = default(List<string>?), List<string>? fieldsInAppPurchases = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsPromotedPurchaseImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitPromotionImages = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPromotedPurchasesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPromotedPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchases]", fieldsPromotedPurchases));
            }
            if (fieldsInAppPurchases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[inAppPurchases]", fieldsInAppPurchases));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsPromotedPurchaseImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[promotedPurchaseImages]", fieldsPromotedPurchaseImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitPromotionImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[promotionImages]", limitPromotionImages));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotedPurchasesResponse>("/v1/apps/{id}/promotedPurchases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPromotedPurchasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>AppPromotedPurchasesLinkagesResponse</returns>
        public AppPromotedPurchasesLinkagesResponse AppsPromotedPurchasesGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPromotedPurchasesLinkagesResponse> localVarResponse = AppsPromotedPurchasesGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of AppPromotedPurchasesLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppPromotedPurchasesLinkagesResponse> AppsPromotedPurchasesGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPromotedPurchasesGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppPromotedPurchasesLinkagesResponse>("/v1/apps/{id}/relationships/promotedPurchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPromotedPurchasesGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppPromotedPurchasesLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<AppPromotedPurchasesLinkagesResponse> AppsPromotedPurchasesGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppPromotedPurchasesLinkagesResponse> localVarResponse = await AppsPromotedPurchasesGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppPromotedPurchasesLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppPromotedPurchasesLinkagesResponse>> AppsPromotedPurchasesGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPromotedPurchasesGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppPromotedPurchasesLinkagesResponse>("/v1/apps/{id}/relationships/promotedPurchases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPromotedPurchasesGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void AppsPromotedPurchasesReplaceToManyRelationship(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest)
        {
            AppsPromotedPurchasesReplaceToManyRelationshipWithHttpInfo(id, appPromotedPurchasesLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> AppsPromotedPurchasesReplaceToManyRelationshipWithHttpInfo(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPromotedPurchasesReplaceToManyRelationship");

            // verify the required parameter 'appPromotedPurchasesLinkagesRequest' is set
            if (appPromotedPurchasesLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appPromotedPurchasesLinkagesRequest' when calling AppsApi->AppsPromotedPurchasesReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appPromotedPurchasesLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/apps/{id}/relationships/promotedPurchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPromotedPurchasesReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppsPromotedPurchasesReplaceToManyRelationshipAsync(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppsPromotedPurchasesReplaceToManyRelationshipWithHttpInfoAsync(id, appPromotedPurchasesLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appPromotedPurchasesLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> AppsPromotedPurchasesReplaceToManyRelationshipWithHttpInfoAsync(string id, AppPromotedPurchasesLinkagesRequest appPromotedPurchasesLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsPromotedPurchasesReplaceToManyRelationship");

            // verify the required parameter 'appPromotedPurchasesLinkagesRequest' is set
            if (appPromotedPurchasesLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appPromotedPurchasesLinkagesRequest' when calling AppsApi->AppsPromotedPurchasesReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appPromotedPurchasesLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/apps/{id}/relationships/promotedPurchases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsPromotedPurchasesReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <returns>ReviewSubmissionsResponse</returns>
        public ReviewSubmissionsResponse AppsReviewSubmissionsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<ReviewSubmissionsResponse> localVarResponse = AppsReviewSubmissionsGetToManyRelatedWithHttpInfo(id, filterPlatform, filterState, fieldsReviewSubmissions, fieldsApps, fieldsReviewSubmissionItems, fieldsAppStoreVersions, fieldsActors, limit, include, limitItems);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of ReviewSubmissionsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<ReviewSubmissionsResponse> AppsReviewSubmissionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsReviewSubmissionsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsReviewSubmissionItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissionItems]", fieldsReviewSubmissionItems));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsActors != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[actors]", fieldsActors));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[items]", limitItems));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReviewSubmissionsResponse>("/v1/apps/{id}/reviewSubmissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsReviewSubmissionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReviewSubmissionsResponse</returns>
        public async System.Threading.Tasks.Task<ReviewSubmissionsResponse> AppsReviewSubmissionsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<ReviewSubmissionsResponse> localVarResponse = await AppsReviewSubmissionsGetToManyRelatedWithHttpInfoAsync(id, filterPlatform, filterState, fieldsReviewSubmissions, fieldsApps, fieldsReviewSubmissionItems, fieldsAppStoreVersions, fieldsActors, limit, include, limitItems, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsReviewSubmissions">the fields to include for returned resources of type reviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsReviewSubmissionItems">the fields to include for returned resources of type reviewSubmissionItems (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsActors">the fields to include for returned resources of type actors (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitItems">maximum number of related items returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReviewSubmissionsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<ReviewSubmissionsResponse>> AppsReviewSubmissionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterState = default(List<string>?), List<string>? fieldsReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsReviewSubmissionItems = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsActors = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitItems = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsReviewSubmissionsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissions]", fieldsReviewSubmissions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsReviewSubmissionItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[reviewSubmissionItems]", fieldsReviewSubmissionItems));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsActors != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[actors]", fieldsActors));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitItems != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[items]", limitItems));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ReviewSubmissionsResponse>("/v1/apps/{id}/reviewSubmissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsReviewSubmissionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <returns>SubscriptionGracePeriodResponse</returns>
        public SubscriptionGracePeriodResponse AppsSubscriptionGracePeriodGetToOneRelated(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<SubscriptionGracePeriodResponse> localVarResponse = AppsSubscriptionGracePeriodGetToOneRelatedWithHttpInfo(id, fieldsSubscriptionGracePeriods);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <returns>ApiResponse of SubscriptionGracePeriodResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<SubscriptionGracePeriodResponse> AppsSubscriptionGracePeriodGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsSubscriptionGracePeriodGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionGracePeriodResponse>("/v1/apps/{id}/subscriptionGracePeriod", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsSubscriptionGracePeriodGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGracePeriodResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionGracePeriodResponse> AppsSubscriptionGracePeriodGetToOneRelatedAsync(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<SubscriptionGracePeriodResponse> localVarResponse = await AppsSubscriptionGracePeriodGetToOneRelatedWithHttpInfoAsync(id, fieldsSubscriptionGracePeriods, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsSubscriptionGracePeriods">the fields to include for returned resources of type subscriptionGracePeriods (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGracePeriodResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<SubscriptionGracePeriodResponse>> AppsSubscriptionGracePeriodGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsSubscriptionGracePeriods = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsSubscriptionGracePeriodGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsSubscriptionGracePeriods != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGracePeriods]", fieldsSubscriptionGracePeriods));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionGracePeriodResponse>("/v1/apps/{id}/subscriptionGracePeriod", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsSubscriptionGracePeriodGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <returns>SubscriptionGroupsResponse</returns>
        public SubscriptionGroupsResponse AppsSubscriptionGroupsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<SubscriptionGroupsResponse> localVarResponse = AppsSubscriptionGroupsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterSubscriptionsState, sort, fieldsSubscriptionGroups, fieldsSubscriptions, fieldsSubscriptionGroupLocalizations, limit, include, limitSubscriptions, limitSubscriptionGroupLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of SubscriptionGroupsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<SubscriptionGroupsResponse> AppsSubscriptionGroupsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsSubscriptionGroupsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterSubscriptionsState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[subscriptions.state]", filterSubscriptionsState));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroupLocalizations]", fieldsSubscriptionGroupLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptions]", limitSubscriptions));
            }
            if (limitSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionGroupsResponse>("/v1/apps/{id}/subscriptionGroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsSubscriptionGroupsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionGroupsResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionGroupsResponse> AppsSubscriptionGroupsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<SubscriptionGroupsResponse> localVarResponse = await AppsSubscriptionGroupsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterSubscriptionsState, sort, fieldsSubscriptionGroups, fieldsSubscriptions, fieldsSubscriptionGroupLocalizations, limit, include, limitSubscriptions, limitSubscriptionGroupLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterSubscriptionsState">filter by attribute &#39;subscriptions.state&#39; (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsSubscriptionGroups">the fields to include for returned resources of type subscriptionGroups (optional)</param>
        /// <param name="fieldsSubscriptions">the fields to include for returned resources of type subscriptions (optional)</param>
        /// <param name="fieldsSubscriptionGroupLocalizations">the fields to include for returned resources of type subscriptionGroupLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitSubscriptions">maximum number of related subscriptions returned (when they are included) (optional)</param>
        /// <param name="limitSubscriptionGroupLocalizations">maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<SubscriptionGroupsResponse>> AppsSubscriptionGroupsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterSubscriptionsState = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsSubscriptionGroups = default(List<string>?), List<string>? fieldsSubscriptions = default(List<string>?), List<string>? fieldsSubscriptionGroupLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitSubscriptions = default(int?), int? limitSubscriptionGroupLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsSubscriptionGroupsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterSubscriptionsState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[subscriptions.state]", filterSubscriptionsState));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsSubscriptionGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroups]", fieldsSubscriptionGroups));
            }
            if (fieldsSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptions]", fieldsSubscriptions));
            }
            if (fieldsSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[subscriptionGroupLocalizations]", fieldsSubscriptionGroupLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitSubscriptions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptions]", limitSubscriptions));
            }
            if (limitSubscriptionGroupLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionGroupsResponse>("/v1/apps/{id}/subscriptionGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsSubscriptionGroupsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <returns>AppResponse</returns>
        public AppResponse AppsUpdateInstance(string id, AppUpdateRequest appUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppResponse> localVarResponse = AppsUpdateInstanceWithHttpInfo(id, appUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <returns>ApiResponse of AppResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppResponse> AppsUpdateInstanceWithHttpInfo(string id, AppUpdateRequest appUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsUpdateInstance");

            // verify the required parameter 'appUpdateRequest' is set
            if (appUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appUpdateRequest' when calling AppsApi->AppsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AppResponse>("/v1/apps/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppResponse</returns>
        public async System.Threading.Tasks.Task<AppResponse> AppsUpdateInstanceAsync(string id, AppUpdateRequest appUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppResponse> localVarResponse = await AppsUpdateInstanceWithHttpInfoAsync(id, appUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appUpdateRequest">App representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppResponse>> AppsUpdateInstanceWithHttpInfoAsync(string id, AppUpdateRequest appUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppsApi->AppsUpdateInstance");

            // verify the required parameter 'appUpdateRequest' is set
            if (appUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appUpdateRequest' when calling AppsApi->AppsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AppResponse>("/v1/apps/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
