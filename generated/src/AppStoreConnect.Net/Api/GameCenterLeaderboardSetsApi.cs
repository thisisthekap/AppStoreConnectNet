/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterLeaderboardSetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsCreateInstance(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsCreateInstanceWithHttpInfo(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void GameCenterLeaderboardSetsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterLeaderboardSetsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardsResponse</returns>
        GameCenterLeaderboardsResponse GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardsResponse</returns>
        ApiResponse<GameCenterLeaderboardsResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse</returns>
        GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse</returns>
        ApiResponse<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsGetInstance(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse</returns>
        GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse</returns>
        ApiResponse<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <returns></returns>
        void GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetLocalizationsResponse</returns>
        GameCenterLeaderboardSetLocalizationsResponse GameCenterLeaderboardSetsLocalizationsGetToManyRelated(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetLocalizationsResponse</returns>
        ApiResponse<GameCenterLeaderboardSetLocalizationsResponse> GameCenterLeaderboardSetsLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetReleasesResponse</returns>
        GameCenterLeaderboardSetReleasesResponse GameCenterLeaderboardSetsReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetReleasesResponse</returns>
        ApiResponse<GameCenterLeaderboardSetReleasesResponse> GameCenterLeaderboardSetsReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsUpdateInstance(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsUpdateInstanceWithHttpInfo(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterLeaderboardSetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsCreateInstanceAsync(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsCreateInstanceWithHttpInfoAsync(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterLeaderboardSetsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterLeaderboardSetsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardsResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardsResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardsResponse>> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse>> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGetInstanceAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse>> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipAsync(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetLocalizationsResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetLocalizationsResponse> GameCenterLeaderboardSetsLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetLocalizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetLocalizationsResponse>> GameCenterLeaderboardSetsLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetReleasesResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetReleasesResponse> GameCenterLeaderboardSetsReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetReleasesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetReleasesResponse>> GameCenterLeaderboardSetsReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsUpdateInstanceAsync(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsUpdateInstanceWithHttpInfoAsync(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterLeaderboardSetsApi : IGameCenterLeaderboardSetsApiSync, IGameCenterLeaderboardSetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameCenterLeaderboardSetsApi : IDisposable, IGameCenterLeaderboardSetsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GameCenterLeaderboardSetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GameCenterLeaderboardSetsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GameCenterLeaderboardSetsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterLeaderboardSetsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterLeaderboardSetsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterLeaderboardSetsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GameCenterLeaderboardSetsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        public GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsCreateInstance(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = GameCenterLeaderboardSetsCreateInstanceWithHttpInfo(gameCenterLeaderboardSetCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsCreateInstanceWithHttpInfo(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest)
        {
            // verify the required parameter 'gameCenterLeaderboardSetCreateRequest' is set
            if (gameCenterLeaderboardSetCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetCreateRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterLeaderboardSetCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsCreateInstanceAsync(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = await GameCenterLeaderboardSetsCreateInstanceWithHttpInfoAsync(gameCenterLeaderboardSetCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetCreateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsCreateInstanceWithHttpInfoAsync(GameCenterLeaderboardSetCreateRequest gameCenterLeaderboardSetCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameCenterLeaderboardSetCreateRequest' is set
            if (gameCenterLeaderboardSetCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetCreateRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterLeaderboardSetCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void GameCenterLeaderboardSetsDeleteInstance(string id)
        {
            GameCenterLeaderboardSetsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterLeaderboardSetsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsDeleteInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/gameCenterLeaderboardSets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterLeaderboardSetsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterLeaderboardSetsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterLeaderboardSetsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsDeleteInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/gameCenterLeaderboardSets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
        {
            GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipWithHttpInfo(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipWithHttpInfoAsync(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
        {
            GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipWithHttpInfo(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipWithHttpInfoAsync(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardsResponse</returns>
        public GameCenterLeaderboardsResponse GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> localVarResponse = GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardsResponse>("/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardsResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> localVarResponse = await GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse>> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardsResponse>("/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse</returns>
        public GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> localVarResponse = GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse> localVarResponse = await GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse>> GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
        {
            GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(id, gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        public GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsGetInstance(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = GameCenterLeaderboardSetsGetInstanceWithHttpInfo(id, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, include, limitGameCenterLeaderboards, limitLocalizations, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGetInstanceAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = await GameCenterLeaderboardSetsGetInstanceWithHttpInfoAsync(id, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, include, limitGameCenterLeaderboards, limitLocalizations, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboards = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        public GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedWithHttpInfo(id, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = await GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedWithHttpInfoAsync(id, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse</returns>
        public GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship(string id)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> localVarResponse = GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse>("/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse> localVarResponse = await GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse>> GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse>("/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <returns></returns>
        public void GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest)
        {
            GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipWithHttpInfo(id, gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipWithHttpInfo(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest' is set
            if (gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipAsync(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipWithHttpInfoAsync(id, gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipWithHttpInfoAsync(string id, GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship");

            // verify the required parameter 'gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest' is set
            if (gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetLocalizationsResponse</returns>
        public GameCenterLeaderboardSetLocalizationsResponse GameCenterLeaderboardSetsLocalizationsGetToManyRelated(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetLocalizationsResponse> localVarResponse = GameCenterLeaderboardSetsLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardSetImages, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetLocalizationsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetLocalizationsResponse> GameCenterLeaderboardSetsLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsLocalizationsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardSetImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetImages]", fieldsGameCenterLeaderboardSetImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetLocalizationsResponse>("/v1/gameCenterLeaderboardSets/{id}/localizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetLocalizationsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetLocalizationsResponse> GameCenterLeaderboardSetsLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetLocalizationsResponse> localVarResponse = await GameCenterLeaderboardSetsLocalizationsGetToManyRelatedWithHttpInfoAsync(id, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardSetImages, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetImages">the fields to include for returned resources of type gameCenterLeaderboardSetImages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetLocalizationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetLocalizationsResponse>> GameCenterLeaderboardSetsLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetImages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsLocalizationsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardSetImages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetImages]", fieldsGameCenterLeaderboardSetImages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetLocalizationsResponse>("/v1/gameCenterLeaderboardSets/{id}/localizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetReleasesResponse</returns>
        public GameCenterLeaderboardSetReleasesResponse GameCenterLeaderboardSetsReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse> localVarResponse = GameCenterLeaderboardSetsReleasesGetToManyRelatedWithHttpInfo(id, filterLive, filterGameCenterDetail, fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboardSets, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetReleasesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse> GameCenterLeaderboardSetsReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsReleasesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterDetail != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterDetail]", filterGameCenterDetail));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetReleasesResponse>("/v1/gameCenterLeaderboardSets/{id}/releases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetReleasesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetReleasesResponse> GameCenterLeaderboardSetsReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse> localVarResponse = await GameCenterLeaderboardSetsReleasesGetToManyRelatedWithHttpInfoAsync(id, filterLive, filterGameCenterDetail, fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboardSets, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterDetail">filter by id(s) of related &#39;gameCenterDetail&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetReleasesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse>> GameCenterLeaderboardSetsReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterDetail = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsReleasesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterDetail != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterDetail]", filterGameCenterDetail));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetReleasesResponse>("/v1/gameCenterLeaderboardSets/{id}/releases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        public GameCenterLeaderboardSetResponse GameCenterLeaderboardSetsUpdateInstance(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = GameCenterLeaderboardSetsUpdateInstanceWithHttpInfo(id, gameCenterLeaderboardSetUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsUpdateInstanceWithHttpInfo(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsUpdateInstance");

            // verify the required parameter 'gameCenterLeaderboardSetUpdateRequest' is set
            if (gameCenterLeaderboardSetUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetUpdateRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetsUpdateInstanceAsync(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = await GameCenterLeaderboardSetsUpdateInstanceWithHttpInfoAsync(id, gameCenterLeaderboardSetUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetUpdateRequest">GameCenterLeaderboardSet representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetsUpdateInstanceWithHttpInfoAsync(string id, GameCenterLeaderboardSetUpdateRequest gameCenterLeaderboardSetUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsUpdateInstance");

            // verify the required parameter 'gameCenterLeaderboardSetUpdateRequest' is set
            if (gameCenterLeaderboardSetUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetUpdateRequest' when calling GameCenterLeaderboardSetsApi->GameCenterLeaderboardSetsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
