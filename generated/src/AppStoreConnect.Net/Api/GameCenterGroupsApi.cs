/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <returns>GameCenterGroupResponse</returns>
        GameCenterGroupResponse GameCenterGroupsCreateInstance(GameCenterGroupCreateRequest gameCenterGroupCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        ApiResponse<GameCenterGroupResponse> GameCenterGroupsCreateInstanceWithHttpInfo(GameCenterGroupCreateRequest gameCenterGroupCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void GameCenterGroupsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterGroupsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterAchievementsResponse</returns>
        GameCenterAchievementsResponse GameCenterGroupsGameCenterAchievementsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAchievementsResponse</returns>
        ApiResponse<GameCenterAchievementsResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterGroupGameCenterAchievementsLinkagesResponse</returns>
        GameCenterGroupGameCenterAchievementsLinkagesResponse GameCenterGroupsGameCenterAchievementsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupGameCenterAchievementsLinkagesResponse</returns>
        ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>GameCenterDetailsResponse</returns>
        GameCenterDetailsResponse GameCenterGroupsGameCenterDetailsGetToManyRelated(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailsResponse</returns>
        ApiResponse<GameCenterDetailsResponse> GameCenterGroupsGameCenterDetailsGetToManyRelatedWithHttpInfo(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetsResponse</returns>
        GameCenterLeaderboardSetsResponse GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetsResponse</returns>
        ApiResponse<GameCenterLeaderboardSetsResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse</returns>
        GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse</returns>
        ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardsResponse</returns>
        GameCenterLeaderboardsResponse GameCenterGroupsGameCenterLeaderboardsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardsResponse</returns>
        ApiResponse<GameCenterLeaderboardsResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterGroupGameCenterLeaderboardsLinkagesResponse</returns>
        GameCenterGroupGameCenterLeaderboardsLinkagesResponse GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupGameCenterLeaderboardsLinkagesResponse</returns>
        ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>GameCenterGroupsResponse</returns>
        GameCenterGroupsResponse GameCenterGroupsGetCollection(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupsResponse</returns>
        ApiResponse<GameCenterGroupsResponse> GameCenterGroupsGetCollectionWithHttpInfo(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>GameCenterGroupResponse</returns>
        GameCenterGroupResponse GameCenterGroupsGetInstance(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        ApiResponse<GameCenterGroupResponse> GameCenterGroupsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <returns>GameCenterGroupResponse</returns>
        GameCenterGroupResponse GameCenterGroupsUpdateInstance(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        ApiResponse<GameCenterGroupResponse> GameCenterGroupsUpdateInstanceWithHttpInfo(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterGroupsCreateInstanceAsync(GameCenterGroupCreateRequest gameCenterGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupResponse>> GameCenterGroupsCreateInstanceWithHttpInfoAsync(GameCenterGroupCreateRequest gameCenterGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterGroupsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterGroupsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAchievementsResponse</returns>
        System.Threading.Tasks.Task<GameCenterAchievementsResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAchievementsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAchievementsResponse>> GameCenterGroupsGameCenterAchievementsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupGameCenterAchievementsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupGameCenterAchievementsLinkagesResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupGameCenterAchievementsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse>> GameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipAsync(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailsResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailsResponse> GameCenterGroupsGameCenterDetailsGetToManyRelatedAsync(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailsResponse>> GameCenterGroupsGameCenterDetailsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetsResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetsResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetsResponse>> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipAsync(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardsResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardsResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardsResponse>> GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupGameCenterLeaderboardsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupGameCenterLeaderboardsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>> GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipAsync(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupsResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupsResponse> GameCenterGroupsGetCollectionAsync(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupsResponse>> GameCenterGroupsGetCollectionWithHttpInfoAsync(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterGroupsGetInstanceAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupResponse>> GameCenterGroupsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterGroupsUpdateInstanceAsync(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupResponse>> GameCenterGroupsUpdateInstanceWithHttpInfoAsync(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterGroupsApi : IGameCenterGroupsApiSync, IGameCenterGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameCenterGroupsApi : IDisposable, IGameCenterGroupsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterGroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GameCenterGroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterGroupsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GameCenterGroupsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterGroupsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GameCenterGroupsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterGroupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterGroupsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterGroupsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterGroupsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterGroupsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterGroupsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterGroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GameCenterGroupsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <returns>GameCenterGroupResponse</returns>
        public GameCenterGroupResponse GameCenterGroupsCreateInstance(GameCenterGroupCreateRequest gameCenterGroupCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = GameCenterGroupsCreateInstanceWithHttpInfo(gameCenterGroupCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> GameCenterGroupsCreateInstanceWithHttpInfo(GameCenterGroupCreateRequest gameCenterGroupCreateRequest)
        {
            // verify the required parameter 'gameCenterGroupCreateRequest' is set
            if (gameCenterGroupCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupCreateRequest' when calling GameCenterGroupsApi->GameCenterGroupsCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterGroupCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GameCenterGroupResponse>("/v1/gameCenterGroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterGroupsCreateInstanceAsync(GameCenterGroupCreateRequest gameCenterGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = await GameCenterGroupsCreateInstanceWithHttpInfoAsync(gameCenterGroupCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterGroupCreateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse>> GameCenterGroupsCreateInstanceWithHttpInfoAsync(GameCenterGroupCreateRequest gameCenterGroupCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameCenterGroupCreateRequest' is set
            if (gameCenterGroupCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupCreateRequest' when calling GameCenterGroupsApi->GameCenterGroupsCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterGroupCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GameCenterGroupResponse>("/v1/gameCenterGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void GameCenterGroupsDeleteInstance(string id)
        {
            GameCenterGroupsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterGroupsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsDeleteInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/gameCenterGroups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterGroupsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterGroupsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterGroupsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsDeleteInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/gameCenterGroups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterAchievementsResponse</returns>
        public GameCenterAchievementsResponse GameCenterGroupsGameCenterAchievementsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse> localVarResponse = GameCenterGroupsGameCenterAchievementsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, limit, include, limitLocalizations, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAchievementsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterAchievementLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementLocalizations]", fieldsGameCenterAchievementLocalizations));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAchievementsResponse>("/v1/gameCenterGroups/{id}/gameCenterAchievements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterAchievementsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAchievementsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAchievementsResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse> localVarResponse = await GameCenterGroupsGameCenterAchievementsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, limit, include, limitLocalizations, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAchievementsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse>> GameCenterGroupsGameCenterAchievementsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterAchievementLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementLocalizations]", fieldsGameCenterAchievementLocalizations));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAchievementsResponse>("/v1/gameCenterGroups/{id}/gameCenterAchievements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterAchievementsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterGroupGameCenterAchievementsLinkagesResponse</returns>
        public GameCenterGroupGameCenterAchievementsLinkagesResponse GameCenterGroupsGameCenterAchievementsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse> localVarResponse = GameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupGameCenterAchievementsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterGroupGameCenterAchievementsLinkagesResponse>("/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterAchievementsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupGameCenterAchievementsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupGameCenterAchievementsLinkagesResponse> GameCenterGroupsGameCenterAchievementsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse> localVarResponse = await GameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupGameCenterAchievementsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse>> GameCenterGroupsGameCenterAchievementsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterGroupGameCenterAchievementsLinkagesResponse>("/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterAchievementsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest)
        {
            GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfo(id, gameCenterGroupGameCenterAchievementsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterGroupGameCenterAchievementsLinkagesRequest' is set
            if (gameCenterGroupGameCenterAchievementsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupGameCenterAchievementsLinkagesRequest' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupGameCenterAchievementsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipAsync(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfoAsync(id, gameCenterGroupGameCenterAchievementsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterGroupGameCenterAchievementsLinkagesRequest' is set
            if (gameCenterGroupGameCenterAchievementsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupGameCenterAchievementsLinkagesRequest' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupGameCenterAchievementsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>GameCenterDetailsResponse</returns>
        public GameCenterDetailsResponse GameCenterGroupsGameCenterDetailsGetToManyRelated(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailsResponse> localVarResponse = GameCenterGroupsGameCenterDetailsGetToManyRelatedWithHttpInfo(id, filterGameCenterAppVersionsEnabled, fieldsGameCenterDetails, fieldsApps, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, limit, include, limitGameCenterAppVersions, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements, limitAchievementReleases, limitLeaderboardReleases, limitLeaderboardSetReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailsResponse> GameCenterGroupsGameCenterDetailsGetToManyRelatedWithHttpInfo(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterDetailsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterGameCenterAppVersionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterAppVersions.enabled]", filterGameCenterAppVersionsEnabled));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAppVersions]", limitGameCenterAppVersions));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[achievementReleases]", limitAchievementReleases));
            }
            if (limitLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardReleases]", limitLeaderboardReleases));
            }
            if (limitLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardSetReleases]", limitLeaderboardSetReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterDetailsResponse>("/v1/gameCenterGroups/{id}/gameCenterDetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterDetailsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailsResponse> GameCenterGroupsGameCenterDetailsGetToManyRelatedAsync(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailsResponse> localVarResponse = await GameCenterGroupsGameCenterDetailsGetToManyRelatedWithHttpInfoAsync(id, filterGameCenterAppVersionsEnabled, fieldsGameCenterDetails, fieldsApps, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, limit, include, limitGameCenterAppVersions, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements, limitAchievementReleases, limitLeaderboardReleases, limitLeaderboardSetReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterGameCenterAppVersionsEnabled">filter by attribute &#39;gameCenterAppVersions.enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailsResponse>> GameCenterGroupsGameCenterDetailsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterGameCenterAppVersionsEnabled = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), int? limitAchievementReleases = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterDetailsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterGameCenterAppVersionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterAppVersions.enabled]", filterGameCenterAppVersionsEnabled));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAppVersions]", limitGameCenterAppVersions));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[achievementReleases]", limitAchievementReleases));
            }
            if (limitLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardReleases]", limitLeaderboardReleases));
            }
            if (limitLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardSetReleases]", limitLeaderboardSetReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterDetailsResponse>("/v1/gameCenterGroups/{id}/gameCenterDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterDetailsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetsResponse</returns>
        public GameCenterLeaderboardSetsResponse GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse> localVarResponse = GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterId, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, limit, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetsResponse>("/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetsResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse> localVarResponse = await GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterId, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, limit, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse>> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetsResponse>("/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse</returns>
        public GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> localVarResponse = GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse> localVarResponse = await GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>> GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest)
        {
            GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfo(id, gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest' is set
            if (gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipAsync(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfoAsync(id, gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest' is set
            if (gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardsResponse</returns>
        public GameCenterLeaderboardsResponse GameCenterGroupsGameCenterLeaderboardsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> localVarResponse = GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardsResponse>("/v1/gameCenterGroups/{id}/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardsResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> localVarResponse = await GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse>> GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardsResponse>("/v1/gameCenterGroups/{id}/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterGroupGameCenterLeaderboardsLinkagesResponse</returns>
        public GameCenterGroupGameCenterLeaderboardsLinkagesResponse GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> localVarResponse = GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupGameCenterLeaderboardsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupGameCenterLeaderboardsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse> localVarResponse = await GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupGameCenterLeaderboardsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>> GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest)
        {
            GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(id, gameCenterGroupGameCenterLeaderboardsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterGroupGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterGroupGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupGameCenterLeaderboardsLinkagesRequest' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipAsync(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(id, gameCenterGroupGameCenterLeaderboardsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterGroupGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterGroupGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupGameCenterLeaderboardsLinkagesRequest' when calling GameCenterGroupsApi->GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>GameCenterGroupsResponse</returns>
        public GameCenterGroupsResponse GameCenterGroupsGetCollection(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupsResponse> localVarResponse = GameCenterGroupsGetCollectionWithHttpInfo(filterGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, limit, include, limitGameCenterAchievements, limitGameCenterDetails, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupsResponse> GameCenterGroupsGetCollectionWithHttpInfo(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?))
        {
            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterDetails]", filterGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterDetails]", limitGameCenterDetails));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterGroupsResponse>("/v1/gameCenterGroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupsResponse> GameCenterGroupsGetCollectionAsync(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupsResponse> localVarResponse = await GameCenterGroupsGetCollectionWithHttpInfoAsync(filterGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, limit, include, limitGameCenterAchievements, limitGameCenterDetails, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterDetails">filter by id(s) of related &#39;gameCenterDetails&#39; (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupsResponse>> GameCenterGroupsGetCollectionWithHttpInfoAsync(List<string>? filterGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterDetails]", filterGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterDetails]", limitGameCenterDetails));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterGroupsResponse>("/v1/gameCenterGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>GameCenterGroupResponse</returns>
        public GameCenterGroupResponse GameCenterGroupsGetInstance(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = GameCenterGroupsGetInstanceWithHttpInfo(id, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, include, limitGameCenterAchievements, limitGameCenterDetails, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> GameCenterGroupsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterDetails]", limitGameCenterDetails));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterGroupResponse>("/v1/gameCenterGroups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterGroupsGetInstanceAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = await GameCenterGroupsGetInstanceWithHttpInfoAsync(id, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, include, limitGameCenterAchievements, limitGameCenterDetails, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse>> GameCenterGroupsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterDetails]", limitGameCenterDetails));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterGroupResponse>("/v1/gameCenterGroups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <returns>GameCenterGroupResponse</returns>
        public GameCenterGroupResponse GameCenterGroupsUpdateInstance(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = GameCenterGroupsUpdateInstanceWithHttpInfo(id, gameCenterGroupUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> GameCenterGroupsUpdateInstanceWithHttpInfo(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsUpdateInstance");

            // verify the required parameter 'gameCenterGroupUpdateRequest' is set
            if (gameCenterGroupUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupUpdateRequest' when calling GameCenterGroupsApi->GameCenterGroupsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GameCenterGroupResponse>("/v1/gameCenterGroups/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterGroupsUpdateInstanceAsync(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = await GameCenterGroupsUpdateInstanceWithHttpInfoAsync(id, gameCenterGroupUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterGroupUpdateRequest">GameCenterGroup representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse>> GameCenterGroupsUpdateInstanceWithHttpInfoAsync(string id, GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterGroupsApi->GameCenterGroupsUpdateInstance");

            // verify the required parameter 'gameCenterGroupUpdateRequest' is set
            if (gameCenterGroupUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterGroupUpdateRequest' when calling GameCenterGroupsApi->GameCenterGroupsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterGroupUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<GameCenterGroupResponse>("/v1/gameCenterGroups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterGroupsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
