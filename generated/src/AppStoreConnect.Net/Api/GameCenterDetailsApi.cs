/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterDetailsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterAchievementReleasesResponse</returns>
        GameCenterAchievementReleasesResponse GameCenterDetailsAchievementReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterAchievementReleasesResponse</returns>
        ApiResponse<GameCenterAchievementReleasesResponse> GameCenterDetailsAchievementReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsClassicMatchmakingRequestsGetMetrics(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetricsWithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <returns>GameCenterDetailResponse</returns>
        GameCenterDetailResponse GameCenterDetailsCreateInstance(GameCenterDetailCreateRequest gameCenterDetailCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        ApiResponse<GameCenterDetailResponse> GameCenterDetailsCreateInstanceWithHttpInfo(GameCenterDetailCreateRequest gameCenterDetailCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterAchievementsResponse</returns>
        GameCenterAchievementsResponse GameCenterDetailsGameCenterAchievementsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAchievementsResponse</returns>
        ApiResponse<GameCenterAchievementsResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterDetailGameCenterAchievementsLinkagesResponse</returns>
        GameCenterDetailGameCenterAchievementsLinkagesResponse GameCenterDetailsGameCenterAchievementsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailGameCenterAchievementsLinkagesResponse</returns>
        ApiResponse<GameCenterDetailGameCenterAchievementsLinkagesResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionsResponse</returns>
        GameCenterAppVersionsResponse GameCenterDetailsGameCenterAppVersionsGetToManyRelated(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionsResponse</returns>
        ApiResponse<GameCenterAppVersionsResponse> GameCenterDetailsGameCenterAppVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <returns>GameCenterGroupResponse</returns>
        GameCenterGroupResponse GameCenterDetailsGameCenterGroupGetToOneRelated(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        ApiResponse<GameCenterGroupResponse> GameCenterDetailsGameCenterGroupGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetsResponse</returns>
        GameCenterLeaderboardSetsResponse GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetsResponse</returns>
        ApiResponse<GameCenterLeaderboardSetsResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse</returns>
        GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse</returns>
        ApiResponse<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardsResponse</returns>
        GameCenterLeaderboardsResponse GameCenterDetailsGameCenterLeaderboardsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardsResponse</returns>
        ApiResponse<GameCenterLeaderboardsResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterDetailGameCenterLeaderboardsLinkagesResponse</returns>
        GameCenterDetailGameCenterLeaderboardsLinkagesResponse GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailGameCenterLeaderboardsLinkagesResponse</returns>
        ApiResponse<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>GameCenterDetailResponse</returns>
        GameCenterDetailResponse GameCenterDetailsGetInstance(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        ApiResponse<GameCenterDetailResponse> GameCenterDetailsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardReleasesResponse</returns>
        GameCenterLeaderboardReleasesResponse GameCenterDetailsLeaderboardReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardReleasesResponse</returns>
        ApiResponse<GameCenterLeaderboardReleasesResponse> GameCenterDetailsLeaderboardReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetReleasesResponse</returns>
        GameCenterLeaderboardSetReleasesResponse GameCenterDetailsLeaderboardSetReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetReleasesResponse</returns>
        ApiResponse<GameCenterLeaderboardSetReleasesResponse> GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <returns>GameCenterDetailResponse</returns>
        GameCenterDetailResponse GameCenterDetailsUpdateInstance(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        ApiResponse<GameCenterDetailResponse> GameCenterDetailsUpdateInstanceWithHttpInfo(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterDetailsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAchievementReleasesResponse</returns>
        System.Threading.Tasks.Task<GameCenterAchievementReleasesResponse> GameCenterDetailsAchievementReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAchievementReleasesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAchievementReleasesResponse>> GameCenterDetailsAchievementReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetricsAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsClassicMatchmakingRequestsGetMetricsWithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailResponse> GameCenterDetailsCreateInstanceAsync(GameCenterDetailCreateRequest gameCenterDetailCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailResponse>> GameCenterDetailsCreateInstanceWithHttpInfoAsync(GameCenterDetailCreateRequest gameCenterDetailCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAchievementsResponse</returns>
        System.Threading.Tasks.Task<GameCenterAchievementsResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAchievementsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAchievementsResponse>> GameCenterDetailsGameCenterAchievementsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailGameCenterAchievementsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailGameCenterAchievementsLinkagesResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailGameCenterAchievementsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailGameCenterAchievementsLinkagesResponse>> GameCenterDetailsGameCenterAchievementsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipAsync(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionsResponse</returns>
        System.Threading.Tasks.Task<GameCenterAppVersionsResponse> GameCenterDetailsGameCenterAppVersionsGetToManyRelatedAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAppVersionsResponse>> GameCenterDetailsGameCenterAppVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterDetailsGameCenterGroupGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterGroupResponse>> GameCenterDetailsGameCenterGroupGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetsResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetsResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetsResponse>> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse>> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipAsync(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardsResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardsResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardsResponse>> GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailGameCenterLeaderboardsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailGameCenterLeaderboardsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailGameCenterLeaderboardsLinkagesResponse>> GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipAsync(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailResponse> GameCenterDetailsGetInstanceAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailResponse>> GameCenterDetailsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardReleasesResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardReleasesResponse> GameCenterDetailsLeaderboardReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardReleasesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardReleasesResponse>> GameCenterDetailsLeaderboardReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetReleasesResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetReleasesResponse> GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetReleasesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetReleasesResponse>> GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        System.Threading.Tasks.Task<GameCenterDetailResponse> GameCenterDetailsUpdateInstanceAsync(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterDetailResponse>> GameCenterDetailsUpdateInstanceWithHttpInfoAsync(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterDetailsApi : IGameCenterDetailsApiSync, IGameCenterDetailsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameCenterDetailsApi : IDisposable, IGameCenterDetailsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterDetailsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GameCenterDetailsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterDetailsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GameCenterDetailsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterDetailsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GameCenterDetailsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterDetailsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterDetailsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterDetailsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterDetailsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterDetailsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterDetailsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterDetailsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GameCenterDetailsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterAchievementReleasesResponse</returns>
        public GameCenterAchievementReleasesResponse GameCenterDetailsAchievementReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementReleasesResponse> localVarResponse = GameCenterDetailsAchievementReleasesGetToManyRelatedWithHttpInfo(id, filterLive, filterGameCenterAchievement, fieldsGameCenterAchievementReleases, fieldsGameCenterDetails, fieldsGameCenterAchievements, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterAchievementReleasesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementReleasesResponse> GameCenterDetailsAchievementReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsAchievementReleasesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterAchievement != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterAchievement]", filterGameCenterAchievement));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAchievementReleasesResponse>("/v1/gameCenterDetails/{id}/achievementReleases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsAchievementReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAchievementReleasesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAchievementReleasesResponse> GameCenterDetailsAchievementReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementReleasesResponse> localVarResponse = await GameCenterDetailsAchievementReleasesGetToManyRelatedWithHttpInfoAsync(id, filterLive, filterGameCenterAchievement, fieldsGameCenterAchievementReleases, fieldsGameCenterDetails, fieldsGameCenterAchievements, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterAchievement">filter by id(s) of related &#39;gameCenterAchievement&#39; (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAchievementReleasesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementReleasesResponse>> GameCenterDetailsAchievementReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterAchievement = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsAchievementReleasesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterAchievement != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterAchievement]", filterGameCenterAchievement));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAchievementReleasesResponse>("/v1/gameCenterDetails/{id}/achievementReleases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsAchievementReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsClassicMatchmakingRequestsGetMetrics(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = GameCenterDetailsClassicMatchmakingRequestsGetMetricsWithHttpInfo(id, granularity, groupBy, filterResult, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetricsWithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling GameCenterDetailsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsClassicMatchmakingRequestsGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsClassicMatchmakingRequestsGetMetricsAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = await GameCenterDetailsClassicMatchmakingRequestsGetMetricsWithHttpInfoAsync(id, granularity, groupBy, filterResult, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsClassicMatchmakingRequestsGetMetricsWithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling GameCenterDetailsApi->GameCenterDetailsClassicMatchmakingRequestsGetMetrics");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsClassicMatchmakingRequestsGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <returns>GameCenterDetailResponse</returns>
        public GameCenterDetailResponse GameCenterDetailsCreateInstance(GameCenterDetailCreateRequest gameCenterDetailCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = GameCenterDetailsCreateInstanceWithHttpInfo(gameCenterDetailCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> GameCenterDetailsCreateInstanceWithHttpInfo(GameCenterDetailCreateRequest gameCenterDetailCreateRequest)
        {
            // verify the required parameter 'gameCenterDetailCreateRequest' is set
            if (gameCenterDetailCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailCreateRequest' when calling GameCenterDetailsApi->GameCenterDetailsCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterDetailCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GameCenterDetailResponse>("/v1/gameCenterDetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailResponse> GameCenterDetailsCreateInstanceAsync(GameCenterDetailCreateRequest gameCenterDetailCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = await GameCenterDetailsCreateInstanceWithHttpInfoAsync(gameCenterDetailCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterDetailCreateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse>> GameCenterDetailsCreateInstanceWithHttpInfoAsync(GameCenterDetailCreateRequest gameCenterDetailCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameCenterDetailCreateRequest' is set
            if (gameCenterDetailCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailCreateRequest' when calling GameCenterDetailsApi->GameCenterDetailsCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterDetailCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GameCenterDetailResponse>("/v1/gameCenterDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterAchievementsResponse</returns>
        public GameCenterAchievementsResponse GameCenterDetailsGameCenterAchievementsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse> localVarResponse = GameCenterDetailsGameCenterAchievementsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, limit, include, limitLocalizations, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAchievementsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterAchievementLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementLocalizations]", fieldsGameCenterAchievementLocalizations));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAchievementsResponse>("/v1/gameCenterDetails/{id}/gameCenterAchievements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAchievementsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAchievementsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAchievementsResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse> localVarResponse = await GameCenterDetailsGameCenterAchievementsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, limit, include, limitLocalizations, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterAchievementLocalizations">the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAchievementsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAchievementsResponse>> GameCenterDetailsGameCenterAchievementsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterAchievementLocalizations = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterAchievementLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementLocalizations]", fieldsGameCenterAchievementLocalizations));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAchievementsResponse>("/v1/gameCenterDetails/{id}/gameCenterAchievements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAchievementsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterDetailGameCenterAchievementsLinkagesResponse</returns>
        public GameCenterDetailGameCenterAchievementsLinkagesResponse GameCenterDetailsGameCenterAchievementsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterAchievementsLinkagesResponse> localVarResponse = GameCenterDetailsGameCenterAchievementsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailGameCenterAchievementsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterAchievementsLinkagesResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterDetailGameCenterAchievementsLinkagesResponse>("/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAchievementsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailGameCenterAchievementsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailGameCenterAchievementsLinkagesResponse> GameCenterDetailsGameCenterAchievementsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterAchievementsLinkagesResponse> localVarResponse = await GameCenterDetailsGameCenterAchievementsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailGameCenterAchievementsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterAchievementsLinkagesResponse>> GameCenterDetailsGameCenterAchievementsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterDetailGameCenterAchievementsLinkagesResponse>("/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAchievementsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest)
        {
            GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfo(id, gameCenterDetailGameCenterAchievementsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterDetailGameCenterAchievementsLinkagesRequest' is set
            if (gameCenterDetailGameCenterAchievementsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailGameCenterAchievementsLinkagesRequest' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailGameCenterAchievementsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipAsync(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfoAsync(id, gameCenterDetailGameCenterAchievementsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterAchievementsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterDetailGameCenterAchievementsLinkagesRequest' is set
            if (gameCenterDetailGameCenterAchievementsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailGameCenterAchievementsLinkagesRequest' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailGameCenterAchievementsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionsResponse</returns>
        public GameCenterAppVersionsResponse GameCenterDetailsGameCenterAppVersionsGetToManyRelated(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse> localVarResponse = GameCenterDetailsGameCenterAppVersionsGetToManyRelatedWithHttpInfo(id, filterEnabled, fieldsGameCenterAppVersions, fieldsAppStoreVersions, limit, include, limitCompatibilityVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse> GameCenterDetailsGameCenterAppVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAppVersionsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[enabled]", filterEnabled));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAppVersionsResponse>("/v1/gameCenterDetails/{id}/gameCenterAppVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAppVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAppVersionsResponse> GameCenterDetailsGameCenterAppVersionsGetToManyRelatedAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse> localVarResponse = await GameCenterDetailsGameCenterAppVersionsGetToManyRelatedWithHttpInfoAsync(id, filterEnabled, fieldsGameCenterAppVersions, fieldsAppStoreVersions, limit, include, limitCompatibilityVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse>> GameCenterDetailsGameCenterAppVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterAppVersionsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[enabled]", filterEnabled));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAppVersionsResponse>("/v1/gameCenterDetails/{id}/gameCenterAppVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterAppVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <returns>GameCenterGroupResponse</returns>
        public GameCenterGroupResponse GameCenterDetailsGameCenterGroupGetToOneRelated(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = GameCenterDetailsGameCenterGroupGetToOneRelatedWithHttpInfo(id, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, include, limitGameCenterDetails, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterGroupResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> GameCenterDetailsGameCenterGroupGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterGroupGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterDetails]", limitGameCenterDetails));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterGroupResponse>("/v1/gameCenterDetails/{id}/gameCenterGroup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterGroupGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterGroupResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterGroupResponse> GameCenterDetailsGameCenterGroupGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse> localVarResponse = await GameCenterDetailsGameCenterGroupGetToOneRelatedWithHttpInfoAsync(id, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, include, limitGameCenterDetails, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterDetails">maximum number of related gameCenterDetails returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterGroupResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterGroupResponse>> GameCenterDetailsGameCenterGroupGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterDetails = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterAchievements = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterGroupGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterDetails]", limitGameCenterDetails));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterGroupResponse>("/v1/gameCenterDetails/{id}/gameCenterGroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterGroupGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetsResponse</returns>
        public GameCenterLeaderboardSetsResponse GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse> localVarResponse = GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterId, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, limit, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetsResponse>("/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetsResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse> localVarResponse = await GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterId, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, limit, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetsResponse>> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetsResponse>("/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse</returns>
        public GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> localVarResponse = GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse> localVarResponse = await GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse>> GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest)
        {
            GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfo(id, gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest' is set
            if (gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipAsync(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfoAsync(id, gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest' is set
            if (gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardsResponse</returns>
        public GameCenterLeaderboardsResponse GameCenterDetailsGameCenterLeaderboardsGetToManyRelated(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> localVarResponse = GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedWithHttpInfo(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardsResponse>("/v1/gameCenterDetails/{id}/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardsResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse> localVarResponse = await GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterReferenceName">filter by attribute &#39;referenceName&#39; (optional)</param>
        /// <param name="filterArchived">filter by attribute &#39;archived&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardsResponse>> GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterReferenceName = default(List<string>?), List<string>? filterArchived = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterReferenceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[referenceName]", filterReferenceName));
            }
            if (filterArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[archived]", filterArchived));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardsResponse>("/v1/gameCenterDetails/{id}/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterDetailGameCenterLeaderboardsLinkagesResponse</returns>
        public GameCenterDetailGameCenterLeaderboardsLinkagesResponse GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> localVarResponse = GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailGameCenterLeaderboardsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterDetailGameCenterLeaderboardsLinkagesResponse>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailGameCenterLeaderboardsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardsLinkagesResponse> localVarResponse = await GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailGameCenterLeaderboardsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailGameCenterLeaderboardsLinkagesResponse>> GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterDetailGameCenterLeaderboardsLinkagesResponse>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest)
        {
            GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(id, gameCenterDetailGameCenterLeaderboardsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfo(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterDetailGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterDetailGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailGameCenterLeaderboardsLinkagesRequest' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipAsync(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(id, gameCenterDetailGameCenterLeaderboardsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailGameCenterLeaderboardsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipWithHttpInfoAsync(string id, GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship");

            // verify the required parameter 'gameCenterDetailGameCenterLeaderboardsLinkagesRequest' is set
            if (gameCenterDetailGameCenterLeaderboardsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailGameCenterLeaderboardsLinkagesRequest' when calling GameCenterDetailsApi->GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailGameCenterLeaderboardsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>GameCenterDetailResponse</returns>
        public GameCenterDetailResponse GameCenterDetailsGetInstance(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = GameCenterDetailsGetInstanceWithHttpInfo(id, fieldsGameCenterDetails, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, include, limitAchievementReleases, limitGameCenterAchievements, limitGameCenterAppVersions, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards, limitLeaderboardReleases, limitLeaderboardSetReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> GameCenterDetailsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[achievementReleases]", limitAchievementReleases));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAppVersions]", limitGameCenterAppVersions));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardReleases]", limitLeaderboardReleases));
            }
            if (limitLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardSetReleases]", limitLeaderboardSetReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterDetailResponse>("/v1/gameCenterDetails/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailResponse> GameCenterDetailsGetInstanceAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = await GameCenterDetailsGetInstanceWithHttpInfoAsync(id, fieldsGameCenterDetails, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, include, limitAchievementReleases, limitGameCenterAchievements, limitGameCenterAppVersions, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards, limitLeaderboardReleases, limitLeaderboardSetReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterAchievements">the fields to include for returned resources of type gameCenterAchievements (optional)</param>
        /// <param name="fieldsGameCenterAchievementReleases">the fields to include for returned resources of type gameCenterAchievementReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAchievementReleases">maximum number of related achievementReleases returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAchievements">maximum number of related gameCenterAchievements returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterAppVersions">maximum number of related gameCenterAppVersions returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardReleases">maximum number of related leaderboardReleases returned (when they are included) (optional)</param>
        /// <param name="limitLeaderboardSetReleases">maximum number of related leaderboardSetReleases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse>> GameCenterDetailsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterAchievements = default(List<string>?), List<string>? fieldsGameCenterAchievementReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitAchievementReleases = default(int?), int? limitGameCenterAchievements = default(int?), int? limitGameCenterAppVersions = default(int?), int? limitGameCenterLeaderboardSets = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitLeaderboardReleases = default(int?), int? limitLeaderboardSetReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievements]", fieldsGameCenterAchievements));
            }
            if (fieldsGameCenterAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAchievementReleases]", fieldsGameCenterAchievementReleases));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAchievementReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[achievementReleases]", limitAchievementReleases));
            }
            if (limitGameCenterAchievements != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAchievements]", limitGameCenterAchievements));
            }
            if (limitGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterAppVersions]", limitGameCenterAppVersions));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardReleases]", limitLeaderboardReleases));
            }
            if (limitLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[leaderboardSetReleases]", limitLeaderboardSetReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterDetailResponse>("/v1/gameCenterDetails/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardReleasesResponse</returns>
        public GameCenterLeaderboardReleasesResponse GameCenterDetailsLeaderboardReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardReleasesResponse> localVarResponse = GameCenterDetailsLeaderboardReleasesGetToManyRelatedWithHttpInfo(id, filterLive, filterGameCenterLeaderboard, fieldsGameCenterLeaderboardReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardReleasesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardReleasesResponse> GameCenterDetailsLeaderboardReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsLeaderboardReleasesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterLeaderboard != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboard]", filterGameCenterLeaderboard));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardReleasesResponse>("/v1/gameCenterDetails/{id}/leaderboardReleases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsLeaderboardReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardReleasesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardReleasesResponse> GameCenterDetailsLeaderboardReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardReleasesResponse> localVarResponse = await GameCenterDetailsLeaderboardReleasesGetToManyRelatedWithHttpInfoAsync(id, filterLive, filterGameCenterLeaderboard, fieldsGameCenterLeaderboardReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardReleasesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardReleasesResponse>> GameCenterDetailsLeaderboardReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboard = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsLeaderboardReleasesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterLeaderboard != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboard]", filterGameCenterLeaderboard));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardReleasesResponse>("/v1/gameCenterDetails/{id}/leaderboardReleases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsLeaderboardReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetReleasesResponse</returns>
        public GameCenterLeaderboardSetReleasesResponse GameCenterDetailsLeaderboardSetReleasesGetToManyRelated(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse> localVarResponse = GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedWithHttpInfo(id, filterLive, filterGameCenterLeaderboardSet, fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboardSets, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetReleasesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse> GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedWithHttpInfo(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsLeaderboardSetReleasesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterLeaderboardSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboardSet]", filterGameCenterLeaderboardSet));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetReleasesResponse>("/v1/gameCenterDetails/{id}/leaderboardSetReleases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsLeaderboardSetReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetReleasesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetReleasesResponse> GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse> localVarResponse = await GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedWithHttpInfoAsync(id, filterLive, filterGameCenterLeaderboardSet, fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboardSets, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLive">filter by attribute &#39;live&#39; (optional)</param>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39; (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetReleasesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetReleasesResponse>> GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLive = default(List<string>?), List<string>? filterGameCenterLeaderboardSet = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsLeaderboardSetReleasesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLive != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[live]", filterLive));
            }
            if (filterGameCenterLeaderboardSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboardSet]", filterGameCenterLeaderboardSet));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetReleasesResponse>("/v1/gameCenterDetails/{id}/leaderboardSetReleases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsLeaderboardSetReleasesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public GameCenterMatchmakingAppRequestsV1MetricResponse GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithHttpInfo(id, granularity, groupBy, filterResult, sort, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithHttpInfo(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling GameCenterDetailsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterMatchmakingAppRequestsV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterMatchmakingAppRequestsV1MetricResponse> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse> localVarResponse = await GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithHttpInfoAsync(id, granularity, groupBy, filterResult, sort, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="granularity">the granularity of the per-group dataset</param>
        /// <param name="groupBy">the dimension by which to group the results (optional)</param>
        /// <param name="filterResult">filter by &#39;result&#39; attribute dimension (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; metrics will be sorted as specified (optional)</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterMatchmakingAppRequestsV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterMatchmakingAppRequestsV1MetricResponse>> GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsWithHttpInfoAsync(string id, string granularity, List<string>? groupBy = default(List<string>?), string? filterResult = default(string?), List<string>? sort = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");

            // verify the required parameter 'granularity' is set
            if (granularity == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'granularity' when calling GameCenterDetailsApi->GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "groupBy", groupBy));
            }
            if (filterResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "filter[result]", filterResult));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterMatchmakingAppRequestsV1MetricResponse>("/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <returns>GameCenterDetailResponse</returns>
        public GameCenterDetailResponse GameCenterDetailsUpdateInstance(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = GameCenterDetailsUpdateInstanceWithHttpInfo(id, gameCenterDetailUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <returns>ApiResponse of GameCenterDetailResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> GameCenterDetailsUpdateInstanceWithHttpInfo(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsUpdateInstance");

            // verify the required parameter 'gameCenterDetailUpdateRequest' is set
            if (gameCenterDetailUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailUpdateRequest' when calling GameCenterDetailsApi->GameCenterDetailsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GameCenterDetailResponse>("/v1/gameCenterDetails/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterDetailResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterDetailResponse> GameCenterDetailsUpdateInstanceAsync(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse> localVarResponse = await GameCenterDetailsUpdateInstanceWithHttpInfoAsync(id, gameCenterDetailUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterDetailUpdateRequest">GameCenterDetail representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterDetailResponse>> GameCenterDetailsUpdateInstanceWithHttpInfoAsync(string id, GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterDetailsApi->GameCenterDetailsUpdateInstance");

            // verify the required parameter 'gameCenterDetailUpdateRequest' is set
            if (gameCenterDetailUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterDetailUpdateRequest' when calling GameCenterDetailsApi->GameCenterDetailsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterDetailUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<GameCenterDetailResponse>("/v1/gameCenterDetails/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterDetailsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
