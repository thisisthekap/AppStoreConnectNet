/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterLeaderboardSetMemberLocalizationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        GameCenterLeaderboardSetMemberLocalizationResponse GameCenterLeaderboardSetMemberLocalizationsCreateInstance(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsCreateInstanceWithHttpInfo(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void GameCenterLeaderboardSetMemberLocalizationsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardResponse</returns>
        GameCenterLeaderboardResponse GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardResponse</returns>
        ApiResponse<GameCenterLeaderboardResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        GameCenterLeaderboardSetResponse GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetMemberLocalizationsResponse</returns>
        GameCenterLeaderboardSetMemberLocalizationsResponse GameCenterLeaderboardSetMemberLocalizationsGetCollection(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetMemberLocalizationsResponse</returns>
        ApiResponse<GameCenterLeaderboardSetMemberLocalizationsResponse> GameCenterLeaderboardSetMemberLocalizationsGetCollectionWithHttpInfo(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        GameCenterLeaderboardSetMemberLocalizationResponse GameCenterLeaderboardSetMemberLocalizationsUpdateInstance(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceWithHttpInfo(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterLeaderboardSetMemberLocalizationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsCreateInstanceAsync(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetMemberLocalizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse>> GameCenterLeaderboardSetMemberLocalizationsCreateInstanceWithHttpInfoAsync(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardResponse>> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetMemberLocalizationsResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetMemberLocalizationsResponse> GameCenterLeaderboardSetMemberLocalizationsGetCollectionAsync(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetMemberLocalizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetMemberLocalizationsResponse>> GameCenterLeaderboardSetMemberLocalizationsGetCollectionWithHttpInfoAsync(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        System.Threading.Tasks.Task<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceAsync(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetMemberLocalizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse>> GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceWithHttpInfoAsync(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterLeaderboardSetMemberLocalizationsApi : IGameCenterLeaderboardSetMemberLocalizationsApiSync, IGameCenterLeaderboardSetMemberLocalizationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameCenterLeaderboardSetMemberLocalizationsApi : IDisposable, IGameCenterLeaderboardSetMemberLocalizationsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetMemberLocalizationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GameCenterLeaderboardSetMemberLocalizationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetMemberLocalizationsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GameCenterLeaderboardSetMemberLocalizationsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetMemberLocalizationsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GameCenterLeaderboardSetMemberLocalizationsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetMemberLocalizationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterLeaderboardSetMemberLocalizationsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetMemberLocalizationsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterLeaderboardSetMemberLocalizationsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetMemberLocalizationsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterLeaderboardSetMemberLocalizationsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardSetMemberLocalizationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GameCenterLeaderboardSetMemberLocalizationsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        public GameCenterLeaderboardSetMemberLocalizationResponse GameCenterLeaderboardSetMemberLocalizationsCreateInstance(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> localVarResponse = GameCenterLeaderboardSetMemberLocalizationsCreateInstanceWithHttpInfo(gameCenterLeaderboardSetMemberLocalizationCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsCreateInstanceWithHttpInfo(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest)
        {
            // verify the required parameter 'gameCenterLeaderboardSetMemberLocalizationCreateRequest' is set
            if (gameCenterLeaderboardSetMemberLocalizationCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetMemberLocalizationCreateRequest' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterLeaderboardSetMemberLocalizationCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GameCenterLeaderboardSetMemberLocalizationResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsCreateInstanceAsync(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> localVarResponse = await GameCenterLeaderboardSetMemberLocalizationsCreateInstanceWithHttpInfoAsync(gameCenterLeaderboardSetMemberLocalizationCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationCreateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetMemberLocalizationResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse>> GameCenterLeaderboardSetMemberLocalizationsCreateInstanceWithHttpInfoAsync(GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameCenterLeaderboardSetMemberLocalizationCreateRequest' is set
            if (gameCenterLeaderboardSetMemberLocalizationCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetMemberLocalizationCreateRequest' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterLeaderboardSetMemberLocalizationCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GameCenterLeaderboardSetMemberLocalizationResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void GameCenterLeaderboardSetMemberLocalizationsDeleteInstance(string id)
        {
            GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsDeleteInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsDeleteInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardResponse</returns>
        public GameCenterLeaderboardResponse GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardResponse> localVarResponse = GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedWithHttpInfo(id, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardResponse> localVarResponse = await GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedWithHttpInfoAsync(id, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardLocalizations">the fields to include for returned resources of type gameCenterLeaderboardLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardReleases">the fields to include for returned resources of type gameCenterLeaderboardReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitGameCenterLeaderboardSets">maximum number of related gameCenterLeaderboardSets returned (when they are included) (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardResponse>> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboardLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitGameCenterLeaderboardSets = default(int?), int? limitLocalizations = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboardLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardLocalizations]", fieldsGameCenterLeaderboardLocalizations));
            }
            if (fieldsGameCenterLeaderboardReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardReleases]", fieldsGameCenterLeaderboardReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboardSets]", limitGameCenterLeaderboardSets));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>GameCenterLeaderboardSetResponse</returns>
        public GameCenterLeaderboardSetResponse GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedWithHttpInfo(id, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetResponse> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse> localVarResponse = await GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedWithHttpInfoAsync(id, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterDetails">the fields to include for returned resources of type gameCenterDetails (optional)</param>
        /// <param name="fieldsGameCenterGroups">the fields to include for returned resources of type gameCenterGroups (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSetReleases">the fields to include for returned resources of type gameCenterLeaderboardSetReleases (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitLocalizations">maximum number of related localizations returned (when they are included) (optional)</param>
        /// <param name="limitGameCenterLeaderboards">maximum number of related gameCenterLeaderboards returned (when they are included) (optional)</param>
        /// <param name="limitReleases">maximum number of related releases returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetResponse>> GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterDetails = default(List<string>?), List<string>? fieldsGameCenterGroups = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSetReleases = default(List<string>?), List<string>? include = default(List<string>?), int? limitLocalizations = default(int?), int? limitGameCenterLeaderboards = default(int?), int? limitReleases = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterDetails]", fieldsGameCenterDetails));
            }
            if (fieldsGameCenterGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterGroups]", fieldsGameCenterGroups));
            }
            if (fieldsGameCenterLeaderboardSetLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetLocalizations]", fieldsGameCenterLeaderboardSetLocalizations));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (fieldsGameCenterLeaderboardSetReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetReleases]", fieldsGameCenterLeaderboardSetReleases));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[localizations]", limitLocalizations));
            }
            if (limitGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[gameCenterLeaderboards]", limitGameCenterLeaderboards));
            }
            if (limitReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[releases]", limitReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>GameCenterLeaderboardSetMemberLocalizationsResponse</returns>
        public GameCenterLeaderboardSetMemberLocalizationsResponse GameCenterLeaderboardSetMemberLocalizationsGetCollection(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationsResponse> localVarResponse = GameCenterLeaderboardSetMemberLocalizationsGetCollectionWithHttpInfo(filterGameCenterLeaderboardSet, filterGameCenterLeaderboard, fieldsGameCenterLeaderboardSetMemberLocalizations, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboards, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetMemberLocalizationsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationsResponse> GameCenterLeaderboardSetMemberLocalizationsGetCollectionWithHttpInfo(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'filterGameCenterLeaderboardSet' is set
            if (filterGameCenterLeaderboardSet == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'filterGameCenterLeaderboardSet' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGetCollection");

            // verify the required parameter 'filterGameCenterLeaderboard' is set
            if (filterGameCenterLeaderboard == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'filterGameCenterLeaderboard' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGetCollection");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboardSet]", filterGameCenterLeaderboardSet));
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboard]", filterGameCenterLeaderboard));
            if (fieldsGameCenterLeaderboardSetMemberLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetMemberLocalizations]", fieldsGameCenterLeaderboardSetMemberLocalizations));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterLeaderboardSetMemberLocalizationsResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetMemberLocalizationsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetMemberLocalizationsResponse> GameCenterLeaderboardSetMemberLocalizationsGetCollectionAsync(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationsResponse> localVarResponse = await GameCenterLeaderboardSetMemberLocalizationsGetCollectionWithHttpInfoAsync(filterGameCenterLeaderboardSet, filterGameCenterLeaderboard, fieldsGameCenterLeaderboardSetMemberLocalizations, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboards, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterGameCenterLeaderboardSet">filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;</param>
        /// <param name="filterGameCenterLeaderboard">filter by id(s) of related &#39;gameCenterLeaderboard&#39;</param>
        /// <param name="fieldsGameCenterLeaderboardSetMemberLocalizations">the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations (optional)</param>
        /// <param name="fieldsGameCenterLeaderboardSets">the fields to include for returned resources of type gameCenterLeaderboardSets (optional)</param>
        /// <param name="fieldsGameCenterLeaderboards">the fields to include for returned resources of type gameCenterLeaderboards (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetMemberLocalizationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationsResponse>> GameCenterLeaderboardSetMemberLocalizationsGetCollectionWithHttpInfoAsync(List<string> filterGameCenterLeaderboardSet, List<string> filterGameCenterLeaderboard, List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = default(List<string>?), List<string>? fieldsGameCenterLeaderboardSets = default(List<string>?), List<string>? fieldsGameCenterLeaderboards = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'filterGameCenterLeaderboardSet' is set
            if (filterGameCenterLeaderboardSet == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'filterGameCenterLeaderboardSet' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGetCollection");

            // verify the required parameter 'filterGameCenterLeaderboard' is set
            if (filterGameCenterLeaderboard == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'filterGameCenterLeaderboard' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsGetCollection");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboardSet]", filterGameCenterLeaderboardSet));
            localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[gameCenterLeaderboard]", filterGameCenterLeaderboard));
            if (fieldsGameCenterLeaderboardSetMemberLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSetMemberLocalizations]", fieldsGameCenterLeaderboardSetMemberLocalizations));
            }
            if (fieldsGameCenterLeaderboardSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboardSets]", fieldsGameCenterLeaderboardSets));
            }
            if (fieldsGameCenterLeaderboards != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterLeaderboards]", fieldsGameCenterLeaderboards));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterLeaderboardSetMemberLocalizationsResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        public GameCenterLeaderboardSetMemberLocalizationResponse GameCenterLeaderboardSetMemberLocalizationsUpdateInstance(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> localVarResponse = GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceWithHttpInfo(id, gameCenterLeaderboardSetMemberLocalizationUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <returns>ApiResponse of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceWithHttpInfo(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsUpdateInstance");

            // verify the required parameter 'gameCenterLeaderboardSetMemberLocalizationUpdateRequest' is set
            if (gameCenterLeaderboardSetMemberLocalizationUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetMemberLocalizationUpdateRequest' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetMemberLocalizationUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GameCenterLeaderboardSetMemberLocalizationResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterLeaderboardSetMemberLocalizationResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterLeaderboardSetMemberLocalizationResponse> GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceAsync(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse> localVarResponse = await GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceWithHttpInfoAsync(id, gameCenterLeaderboardSetMemberLocalizationUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterLeaderboardSetMemberLocalizationUpdateRequest">GameCenterLeaderboardSetMemberLocalization representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterLeaderboardSetMemberLocalizationResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterLeaderboardSetMemberLocalizationResponse>> GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceWithHttpInfoAsync(string id, GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsUpdateInstance");

            // verify the required parameter 'gameCenterLeaderboardSetMemberLocalizationUpdateRequest' is set
            if (gameCenterLeaderboardSetMemberLocalizationUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterLeaderboardSetMemberLocalizationUpdateRequest' when calling GameCenterLeaderboardSetMemberLocalizationsApi->GameCenterLeaderboardSetMemberLocalizationsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterLeaderboardSetMemberLocalizationUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<GameCenterLeaderboardSetMemberLocalizationResponse>("/v1/gameCenterLeaderboardSetMemberLocalizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterLeaderboardSetMemberLocalizationsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
