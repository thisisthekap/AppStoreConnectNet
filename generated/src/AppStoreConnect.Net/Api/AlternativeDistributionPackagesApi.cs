/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlternativeDistributionPackagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <returns>AlternativeDistributionPackageResponse</returns>
        AlternativeDistributionPackageResponse AlternativeDistributionPackagesCreateInstance(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageResponse</returns>
        ApiResponse<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesCreateInstanceWithHttpInfo(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>AlternativeDistributionPackageResponse</returns>
        AlternativeDistributionPackageResponse AlternativeDistributionPackagesGetInstance(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageResponse</returns>
        ApiResponse<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesGetInstanceWithHttpInfo(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <returns>AlternativeDistributionPackageVersionsResponse</returns>
        AlternativeDistributionPackageVersionsResponse AlternativeDistributionPackagesVersionsGetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageVersionsResponse</returns>
        ApiResponse<AlternativeDistributionPackageVersionsResponse> AlternativeDistributionPackagesVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlternativeDistributionPackagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageResponse</returns>
        System.Threading.Tasks.Task<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesCreateInstanceAsync(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlternativeDistributionPackageResponse>> AlternativeDistributionPackagesCreateInstanceWithHttpInfoAsync(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageResponse</returns>
        System.Threading.Tasks.Task<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesGetInstanceAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlternativeDistributionPackageResponse>> AlternativeDistributionPackagesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageVersionsResponse</returns>
        System.Threading.Tasks.Task<AlternativeDistributionPackageVersionsResponse> AlternativeDistributionPackagesVersionsGetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlternativeDistributionPackageVersionsResponse>> AlternativeDistributionPackagesVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlternativeDistributionPackagesApi : IAlternativeDistributionPackagesApiSync, IAlternativeDistributionPackagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlternativeDistributionPackagesApi : IDisposable, IAlternativeDistributionPackagesApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AlternativeDistributionPackagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackagesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AlternativeDistributionPackagesApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackagesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AlternativeDistributionPackagesApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackagesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AlternativeDistributionPackagesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackagesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AlternativeDistributionPackagesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackagesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AlternativeDistributionPackagesApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackagesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AlternativeDistributionPackagesApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <returns>AlternativeDistributionPackageResponse</returns>
        public AlternativeDistributionPackageResponse AlternativeDistributionPackagesCreateInstance(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> localVarResponse = AlternativeDistributionPackagesCreateInstanceWithHttpInfo(alternativeDistributionPackageCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesCreateInstanceWithHttpInfo(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest)
        {
            // verify the required parameter 'alternativeDistributionPackageCreateRequest' is set
            if (alternativeDistributionPackageCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'alternativeDistributionPackageCreateRequest' when calling AlternativeDistributionPackagesApi->AlternativeDistributionPackagesCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = alternativeDistributionPackageCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AlternativeDistributionPackageResponse>("/v1/alternativeDistributionPackages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlternativeDistributionPackagesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageResponse</returns>
        public async System.Threading.Tasks.Task<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesCreateInstanceAsync(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> localVarResponse = await AlternativeDistributionPackagesCreateInstanceWithHttpInfoAsync(alternativeDistributionPackageCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternativeDistributionPackageCreateRequest">AlternativeDistributionPackage representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse>> AlternativeDistributionPackagesCreateInstanceWithHttpInfoAsync(AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alternativeDistributionPackageCreateRequest' is set
            if (alternativeDistributionPackageCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'alternativeDistributionPackageCreateRequest' when calling AlternativeDistributionPackagesApi->AlternativeDistributionPackagesCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = alternativeDistributionPackageCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AlternativeDistributionPackageResponse>("/v1/alternativeDistributionPackages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlternativeDistributionPackagesCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>AlternativeDistributionPackageResponse</returns>
        public AlternativeDistributionPackageResponse AlternativeDistributionPackagesGetInstance(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> localVarResponse = AlternativeDistributionPackagesGetInstanceWithHttpInfo(id, fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions, include, limitVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesGetInstanceWithHttpInfo(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AlternativeDistributionPackagesApi->AlternativeDistributionPackagesGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (fieldsAlternativeDistributionPackageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVersions]", fieldsAlternativeDistributionPackageVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[versions]", limitVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlternativeDistributionPackageResponse>("/v1/alternativeDistributionPackages/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlternativeDistributionPackagesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageResponse</returns>
        public async System.Threading.Tasks.Task<AlternativeDistributionPackageResponse> AlternativeDistributionPackagesGetInstanceAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> localVarResponse = await AlternativeDistributionPackagesGetInstanceWithHttpInfoAsync(id, fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions, include, limitVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse>> AlternativeDistributionPackagesGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AlternativeDistributionPackagesApi->AlternativeDistributionPackagesGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (fieldsAlternativeDistributionPackageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVersions]", fieldsAlternativeDistributionPackageVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[versions]", limitVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AlternativeDistributionPackageResponse>("/v1/alternativeDistributionPackages/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlternativeDistributionPackagesGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <returns>AlternativeDistributionPackageVersionsResponse</returns>
        public AlternativeDistributionPackageVersionsResponse AlternativeDistributionPackagesVersionsGetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageVersionsResponse> localVarResponse = AlternativeDistributionPackagesVersionsGetToManyRelatedWithHttpInfo(id, filterState, fieldsAlternativeDistributionPackageVersions, fieldsAlternativeDistributionPackageVariants, fieldsAlternativeDistributionPackageDeltas, fieldsAlternativeDistributionPackages, limit, include, limitVariants, limitDeltas);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageVersionsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageVersionsResponse> AlternativeDistributionPackagesVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AlternativeDistributionPackagesApi->AlternativeDistributionPackagesVersionsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAlternativeDistributionPackageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVersions]", fieldsAlternativeDistributionPackageVersions));
            }
            if (fieldsAlternativeDistributionPackageVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVariants]", fieldsAlternativeDistributionPackageVariants));
            }
            if (fieldsAlternativeDistributionPackageDeltas != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageDeltas]", fieldsAlternativeDistributionPackageDeltas));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[variants]", limitVariants));
            }
            if (limitDeltas != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[deltas]", limitDeltas));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlternativeDistributionPackageVersionsResponse>("/v1/alternativeDistributionPackages/{id}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlternativeDistributionPackagesVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageVersionsResponse</returns>
        public async System.Threading.Tasks.Task<AlternativeDistributionPackageVersionsResponse> AlternativeDistributionPackagesVersionsGetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageVersionsResponse> localVarResponse = await AlternativeDistributionPackagesVersionsGetToManyRelatedWithHttpInfoAsync(id, filterState, fieldsAlternativeDistributionPackageVersions, fieldsAlternativeDistributionPackageVariants, fieldsAlternativeDistributionPackageDeltas, fieldsAlternativeDistributionPackages, limit, include, limitVariants, limitDeltas, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVariants">the fields to include for returned resources of type alternativeDistributionPackageVariants (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageDeltas">the fields to include for returned resources of type alternativeDistributionPackageDeltas (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVariants">maximum number of related variants returned (when they are included) (optional)</param>
        /// <param name="limitDeltas">maximum number of related deltas returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageVersionsResponse>> AlternativeDistributionPackagesVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVariants = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageDeltas = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitVariants = default(int?), int? limitDeltas = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AlternativeDistributionPackagesApi->AlternativeDistributionPackagesVersionsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAlternativeDistributionPackageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVersions]", fieldsAlternativeDistributionPackageVersions));
            }
            if (fieldsAlternativeDistributionPackageVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVariants]", fieldsAlternativeDistributionPackageVariants));
            }
            if (fieldsAlternativeDistributionPackageDeltas != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageDeltas]", fieldsAlternativeDistributionPackageDeltas));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitVariants != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[variants]", limitVariants));
            }
            if (limitDeltas != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[deltas]", limitDeltas));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AlternativeDistributionPackageVersionsResponse>("/v1/alternativeDistributionPackages/{id}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlternativeDistributionPackagesVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
