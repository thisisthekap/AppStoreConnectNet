/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreVersionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <returns>AgeRatingDeclarationWithoutIncludesResponse</returns>
        [Obsolete]
        AgeRatingDeclarationWithoutIncludesResponse AppStoreVersionsAgeRatingDeclarationGetToOneRelated(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <returns>ApiResponse of AgeRatingDeclarationWithoutIncludesResponse</returns>
        [Obsolete]
        ApiResponse<AgeRatingDeclarationWithoutIncludesResponse> AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>AlternativeDistributionPackageResponse</returns>
        AlternativeDistributionPackageResponse AppStoreVersionsAlternativeDistributionPackageGetToOneRelated(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageResponse</returns>
        ApiResponse<AlternativeDistributionPackageResponse> AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        AppClipDefaultExperienceResponse AppStoreVersionsAppClipDefaultExperienceGetToOneRelated(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        ApiResponse<AppClipDefaultExperienceResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>AppStoreVersionAppClipDefaultExperienceLinkageResponse</returns>
        AppStoreVersionAppClipDefaultExperienceLinkageResponse AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of AppStoreVersionAppClipDefaultExperienceLinkageResponse</returns>
        ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <returns></returns>
        void AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithHttpInfo(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <returns>AppStoreReviewDetailResponse</returns>
        AppStoreReviewDetailResponse AppStoreVersionsAppStoreReviewDetailGetToOneRelated(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreReviewDetailResponse</returns>
        ApiResponse<AppStoreReviewDetailResponse> AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentsResponse</returns>
        [Obsolete]
        AppStoreVersionExperimentsResponse AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentsResponse</returns>
        [Obsolete]
        ApiResponse<AppStoreVersionExperimentsResponse> AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentsV2Response</returns>
        AppStoreVersionExperimentsV2Response AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentsV2Response</returns>
        ApiResponse<AppStoreVersionExperimentsV2Response> AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionLocalizationsResponse</returns>
        AppStoreVersionLocalizationsResponse AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionLocalizationsResponse</returns>
        ApiResponse<AppStoreVersionLocalizationsResponse> AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <returns>AppStoreVersionPhasedReleaseWithoutIncludesResponse</returns>
        AppStoreVersionPhasedReleaseWithoutIncludesResponse AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionPhasedReleaseWithoutIncludesResponse</returns>
        ApiResponse<AppStoreVersionPhasedReleaseWithoutIncludesResponse> AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppStoreVersionSubmissionResponse</returns>
        [Obsolete]
        AppStoreVersionSubmissionResponse AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionSubmissionResponse</returns>
        [Obsolete]
        ApiResponse<AppStoreVersionSubmissionResponse> AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <returns>BuildWithoutIncludesResponse</returns>
        BuildWithoutIncludesResponse AppStoreVersionsBuildGetToOneRelated(string id, List<string>? fieldsBuilds = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <returns>ApiResponse of BuildWithoutIncludesResponse</returns>
        ApiResponse<BuildWithoutIncludesResponse> AppStoreVersionsBuildGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBuilds = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>AppStoreVersionBuildLinkageResponse</returns>
        AppStoreVersionBuildLinkageResponse AppStoreVersionsBuildGetToOneRelationship(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of AppStoreVersionBuildLinkageResponse</returns>
        ApiResponse<AppStoreVersionBuildLinkageResponse> AppStoreVersionsBuildGetToOneRelationshipWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <returns></returns>
        void AppStoreVersionsBuildUpdateToOneRelationship(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppStoreVersionsBuildUpdateToOneRelationshipWithHttpInfo(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <returns>AppStoreVersionResponse</returns>
        AppStoreVersionResponse AppStoreVersionsCreateInstance(AppStoreVersionCreateRequest appStoreVersionCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        ApiResponse<AppStoreVersionResponse> AppStoreVersionsCreateInstanceWithHttpInfo(AppStoreVersionCreateRequest appStoreVersionCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>CustomerReviewsResponse</returns>
        CustomerReviewsResponse AppStoreVersionsCustomerReviewsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of CustomerReviewsResponse</returns>
        ApiResponse<CustomerReviewsResponse> AppStoreVersionsCustomerReviewsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void AppStoreVersionsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppStoreVersionsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        GameCenterAppVersionResponse AppStoreVersionsGameCenterAppVersionGetToOneRelated(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        ApiResponse<GameCenterAppVersionResponse> AppStoreVersionsGameCenterAppVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        AppStoreVersionResponse AppStoreVersionsGetInstance(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        ApiResponse<AppStoreVersionResponse> AppStoreVersionsGetInstanceWithHttpInfo(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <returns>RoutingAppCoverageWithoutIncludesResponse</returns>
        RoutingAppCoverageWithoutIncludesResponse AppStoreVersionsRoutingAppCoverageGetToOneRelated(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <returns>ApiResponse of RoutingAppCoverageWithoutIncludesResponse</returns>
        ApiResponse<RoutingAppCoverageWithoutIncludesResponse> AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <returns>AppStoreVersionResponse</returns>
        AppStoreVersionResponse AppStoreVersionsUpdateInstance(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        ApiResponse<AppStoreVersionResponse> AppStoreVersionsUpdateInstanceWithHttpInfo(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreVersionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgeRatingDeclarationWithoutIncludesResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AgeRatingDeclarationWithoutIncludesResponse> AppStoreVersionsAgeRatingDeclarationGetToOneRelatedAsync(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgeRatingDeclarationWithoutIncludesResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AgeRatingDeclarationWithoutIncludesResponse>> AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageResponse</returns>
        System.Threading.Tasks.Task<AlternativeDistributionPackageResponse> AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlternativeDistributionPackageResponse>> AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppClipDefaultExperienceResponse>> AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionAppClipDefaultExperienceLinkageResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionAppClipDefaultExperienceLinkageResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionAppClipDefaultExperienceLinkageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse>> AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipAsync(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithHttpInfoAsync(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreReviewDetailResponse</returns>
        System.Threading.Tasks.Task<AppStoreReviewDetailResponse> AppStoreVersionsAppStoreReviewDetailGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreReviewDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreReviewDetailResponse>> AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppStoreVersionExperimentsResponse> AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentsResponse>> AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentsV2Response</returns>
        System.Threading.Tasks.Task<AppStoreVersionExperimentsV2Response> AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentsV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentsV2Response>> AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionLocalizationsResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionLocalizationsResponse> AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionLocalizationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionLocalizationsResponse>> AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionPhasedReleaseWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionPhasedReleaseWithoutIncludesResponse> AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionPhasedReleaseWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionPhasedReleaseWithoutIncludesResponse>> AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionSubmissionResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppStoreVersionSubmissionResponse> AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionSubmissionResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionSubmissionResponse>> AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BuildWithoutIncludesResponse> AppStoreVersionsBuildGetToOneRelatedAsync(string id, List<string>? fieldsBuilds = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildWithoutIncludesResponse>> AppStoreVersionsBuildGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuilds = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionBuildLinkageResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionBuildLinkageResponse> AppStoreVersionsBuildGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionBuildLinkageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionBuildLinkageResponse>> AppStoreVersionsBuildGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppStoreVersionsBuildUpdateToOneRelationshipAsync(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppStoreVersionsBuildUpdateToOneRelationshipWithHttpInfoAsync(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionResponse> AppStoreVersionsCreateInstanceAsync(AppStoreVersionCreateRequest appStoreVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionResponse>> AppStoreVersionsCreateInstanceWithHttpInfoAsync(AppStoreVersionCreateRequest appStoreVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerReviewsResponse</returns>
        System.Threading.Tasks.Task<CustomerReviewsResponse> AppStoreVersionsCustomerReviewsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerReviewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerReviewsResponse>> AppStoreVersionsCustomerReviewsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppStoreVersionsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppStoreVersionsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        System.Threading.Tasks.Task<GameCenterAppVersionResponse> AppStoreVersionsGameCenterAppVersionGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAppVersionResponse>> AppStoreVersionsGameCenterAppVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionResponse> AppStoreVersionsGetInstanceAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionResponse>> AppStoreVersionsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoutingAppCoverageWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<RoutingAppCoverageWithoutIncludesResponse> AppStoreVersionsRoutingAppCoverageGetToOneRelatedAsync(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoutingAppCoverageWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoutingAppCoverageWithoutIncludesResponse>> AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionResponse> AppStoreVersionsUpdateInstanceAsync(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionResponse>> AppStoreVersionsUpdateInstanceWithHttpInfoAsync(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreVersionsApi : IAppStoreVersionsApiSync, IAppStoreVersionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppStoreVersionsApi : IDisposable, IAppStoreVersionsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppStoreVersionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppStoreVersionsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppStoreVersionsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppStoreVersionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppStoreVersionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppStoreVersionsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppStoreVersionsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <returns>AgeRatingDeclarationWithoutIncludesResponse</returns>
        [Obsolete]
        public AgeRatingDeclarationWithoutIncludesResponse AppStoreVersionsAgeRatingDeclarationGetToOneRelated(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AgeRatingDeclarationWithoutIncludesResponse> localVarResponse = AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithHttpInfo(id, fieldsAgeRatingDeclarations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <returns>ApiResponse of AgeRatingDeclarationWithoutIncludesResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AgeRatingDeclarationWithoutIncludesResponse> AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAgeRatingDeclarationGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AgeRatingDeclarationWithoutIncludesResponse>("/v1/appStoreVersions/{id}/ageRatingDeclaration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAgeRatingDeclarationGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgeRatingDeclarationWithoutIncludesResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AgeRatingDeclarationWithoutIncludesResponse> AppStoreVersionsAgeRatingDeclarationGetToOneRelatedAsync(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AgeRatingDeclarationWithoutIncludesResponse> localVarResponse = await AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithHttpInfoAsync(id, fieldsAgeRatingDeclarations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgeRatingDeclarationWithoutIncludesResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AgeRatingDeclarationWithoutIncludesResponse>> AppStoreVersionsAgeRatingDeclarationGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAgeRatingDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAgeRatingDeclarationGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AgeRatingDeclarationWithoutIncludesResponse>("/v1/appStoreVersions/{id}/ageRatingDeclaration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAgeRatingDeclarationGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>AlternativeDistributionPackageResponse</returns>
        public AlternativeDistributionPackageResponse AppStoreVersionsAlternativeDistributionPackageGetToOneRelated(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> localVarResponse = AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithHttpInfo(id, fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions, include, limitVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AlternativeDistributionPackageResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAlternativeDistributionPackageGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (fieldsAlternativeDistributionPackageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVersions]", fieldsAlternativeDistributionPackageVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[versions]", limitVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlternativeDistributionPackageResponse>("/v1/appStoreVersions/{id}/alternativeDistributionPackage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAlternativeDistributionPackageGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlternativeDistributionPackageResponse</returns>
        public async System.Threading.Tasks.Task<AlternativeDistributionPackageResponse> AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse> localVarResponse = await AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithHttpInfoAsync(id, fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions, include, limitVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackageVersions">the fields to include for returned resources of type alternativeDistributionPackageVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitVersions">maximum number of related versions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlternativeDistributionPackageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AlternativeDistributionPackageResponse>> AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? fieldsAlternativeDistributionPackageVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAlternativeDistributionPackageGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (fieldsAlternativeDistributionPackageVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackageVersions]", fieldsAlternativeDistributionPackageVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[versions]", limitVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AlternativeDistributionPackageResponse>("/v1/appStoreVersions/{id}/alternativeDistributionPackage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAlternativeDistributionPackageGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppClipDefaultExperienceResponse</returns>
        public AppClipDefaultExperienceResponse AppStoreVersionsAppClipDefaultExperienceGetToOneRelated(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithHttpInfo(id, fieldsAppClipDefaultExperiences, fieldsAppClips, fieldsAppStoreVersions, fieldsAppClipDefaultExperienceLocalizations, fieldsAppClipAppStoreReviewDetails, include, limitAppClipDefaultExperienceLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppClipDefaultExperienceResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppClipDefaultExperienceResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperienceLocalizations]", fieldsAppClipDefaultExperienceLocalizations));
            }
            if (fieldsAppClipAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipAppStoreReviewDetails]", fieldsAppClipAppStoreReviewDetails));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppClipDefaultExperienceResponse>("/v1/appStoreVersions/{id}/appClipDefaultExperience", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppClipDefaultExperienceGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppClipDefaultExperienceResponse</returns>
        public async System.Threading.Tasks.Task<AppClipDefaultExperienceResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppClipDefaultExperienceResponse> localVarResponse = await AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithHttpInfoAsync(id, fieldsAppClipDefaultExperiences, fieldsAppClips, fieldsAppStoreVersions, fieldsAppClipDefaultExperienceLocalizations, fieldsAppClipAppStoreReviewDetails, include, limitAppClipDefaultExperienceLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppClips">the fields to include for returned resources of type appClips (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperienceLocalizations">the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)</param>
        /// <param name="fieldsAppClipAppStoreReviewDetails">the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppClipDefaultExperienceLocalizations">maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppClipDefaultExperienceResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppClipDefaultExperienceResponse>> AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppClips = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppClipDefaultExperienceLocalizations = default(List<string>?), List<string>? fieldsAppClipAppStoreReviewDetails = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppClipDefaultExperienceLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClips]", fieldsAppClips));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperienceLocalizations]", fieldsAppClipDefaultExperienceLocalizations));
            }
            if (fieldsAppClipAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipAppStoreReviewDetails]", fieldsAppClipAppStoreReviewDetails));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppClipDefaultExperienceLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppClipDefaultExperienceResponse>("/v1/appStoreVersions/{id}/appClipDefaultExperience", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppClipDefaultExperienceGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>AppStoreVersionAppClipDefaultExperienceLinkageResponse</returns>
        public AppStoreVersionAppClipDefaultExperienceLinkageResponse AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship(string id)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse> localVarResponse = AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of AppStoreVersionAppClipDefaultExperienceLinkageResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionAppClipDefaultExperienceLinkageResponse>("/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionAppClipDefaultExperienceLinkageResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionAppClipDefaultExperienceLinkageResponse> AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse> localVarResponse = await AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionAppClipDefaultExperienceLinkageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionAppClipDefaultExperienceLinkageResponse>> AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionAppClipDefaultExperienceLinkageResponse>("/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <returns></returns>
        public void AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest)
        {
            AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithHttpInfo(id, appStoreVersionAppClipDefaultExperienceLinkageRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithHttpInfo(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship");

            // verify the required parameter 'appStoreVersionAppClipDefaultExperienceLinkageRequest' is set
            if (appStoreVersionAppClipDefaultExperienceLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionAppClipDefaultExperienceLinkageRequest' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionAppClipDefaultExperienceLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipAsync(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithHttpInfoAsync(id, appStoreVersionAppClipDefaultExperienceLinkageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionAppClipDefaultExperienceLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithHttpInfoAsync(string id, AppStoreVersionAppClipDefaultExperienceLinkageRequest appStoreVersionAppClipDefaultExperienceLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship");

            // verify the required parameter 'appStoreVersionAppClipDefaultExperienceLinkageRequest' is set
            if (appStoreVersionAppClipDefaultExperienceLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionAppClipDefaultExperienceLinkageRequest' when calling AppStoreVersionsApi->AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionAppClipDefaultExperienceLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <returns>AppStoreReviewDetailResponse</returns>
        public AppStoreReviewDetailResponse AppStoreVersionsAppStoreReviewDetailGetToOneRelated(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreReviewDetailResponse> localVarResponse = AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithHttpInfo(id, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsAppStoreReviewAttachments, include, limitAppStoreReviewAttachments);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreReviewDetailResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreReviewDetailResponse> AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreReviewDetailGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreReviewAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewAttachments]", fieldsAppStoreReviewAttachments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreReviewAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreReviewAttachments]", limitAppStoreReviewAttachments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreReviewDetailResponse>("/v1/appStoreVersions/{id}/appStoreReviewDetail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreReviewDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreReviewDetailResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreReviewDetailResponse> AppStoreVersionsAppStoreReviewDetailGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreReviewDetailResponse> localVarResponse = await AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithHttpInfoAsync(id, fieldsAppStoreReviewDetails, fieldsAppStoreVersions, fieldsAppStoreReviewAttachments, include, limitAppStoreReviewAttachments, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreReviewAttachments">the fields to include for returned resources of type appStoreReviewAttachments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreReviewAttachments">maximum number of related appStoreReviewAttachments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreReviewDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreReviewDetailResponse>> AppStoreVersionsAppStoreReviewDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreReviewAttachments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreReviewAttachments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreReviewDetailGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreReviewAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewAttachments]", fieldsAppStoreReviewAttachments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreReviewAttachments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreReviewAttachments]", limitAppStoreReviewAttachments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreReviewDetailResponse>("/v1/appStoreVersions/{id}/appStoreReviewDetail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreReviewDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentsResponse</returns>
        [Obsolete]
        public AppStoreVersionExperimentsResponse AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsResponse> localVarResponse = AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithHttpInfo(id, filterState, fieldsAppStoreVersionExperiments, fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments, limit, include, limitAppStoreVersionExperimentTreatments);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentsResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsResponse> AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionExperimentsResponse>("/v1/appStoreVersions/{id}/appStoreVersionExperiments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentsResponse> AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsResponse> localVarResponse = await AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithHttpInfoAsync(id, filterState, fieldsAppStoreVersionExperiments, fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments, limit, include, limitAppStoreVersionExperimentTreatments, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsResponse>> AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionExperimentsResponse>("/v1/appStoreVersions/{id}/appStoreVersionExperiments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentsV2Response</returns>
        public AppStoreVersionExperimentsV2Response AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response> localVarResponse = AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfo(id, filterState, fieldsAppStoreVersionExperiments, fieldsApps, fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments, limit, include, limitControlVersions, limitAppStoreVersionExperimentTreatments);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentsV2Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response> AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfo(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitControlVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[controlVersions]", limitControlVersions));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionExperimentsV2Response>("/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentsV2Response</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentsV2Response> AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response> localVarResponse = await AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfoAsync(id, filterState, fieldsAppStoreVersionExperiments, fieldsApps, fieldsAppStoreVersions, fieldsAppStoreVersionExperimentTreatments, limit, include, limitControlVersions, limitAppStoreVersionExperimentTreatments, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterState">filter by attribute &#39;state&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentsV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentsV2Response>> AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterState = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitControlVersions = default(int?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[state]", filterState));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitControlVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[controlVersions]", limitControlVersions));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionExperimentsV2Response>("/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionLocalizationsResponse</returns>
        public AppStoreVersionLocalizationsResponse AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionLocalizationsResponse> localVarResponse = AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithHttpInfo(id, filterLocale, fieldsAppStoreVersionLocalizations, fieldsAppStoreVersions, fieldsAppScreenshotSets, fieldsAppPreviewSets, limit, include, limitAppScreenshotSets, limitAppPreviewSets);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionLocalizationsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionLocalizationsResponse> AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLocale != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[locale]", filterLocale));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
            }
            if (fieldsAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appScreenshotSets]", limitAppScreenshotSets));
            }
            if (limitAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appPreviewSets]", limitAppPreviewSets));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionLocalizationsResponse>("/v1/appStoreVersions/{id}/appStoreVersionLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionLocalizationsResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionLocalizationsResponse> AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionLocalizationsResponse> localVarResponse = await AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithHttpInfoAsync(id, filterLocale, fieldsAppStoreVersionLocalizations, fieldsAppStoreVersions, fieldsAppScreenshotSets, fieldsAppPreviewSets, limit, include, limitAppScreenshotSets, limitAppPreviewSets, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterLocale">filter by attribute &#39;locale&#39; (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAppScreenshotSets">the fields to include for returned resources of type appScreenshotSets (optional)</param>
        /// <param name="fieldsAppPreviewSets">the fields to include for returned resources of type appPreviewSets (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppScreenshotSets">maximum number of related appScreenshotSets returned (when they are included) (optional)</param>
        /// <param name="limitAppPreviewSets">maximum number of related appPreviewSets returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionLocalizationsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionLocalizationsResponse>> AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterLocale = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAppScreenshotSets = default(List<string>?), List<string>? fieldsAppPreviewSets = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppScreenshotSets = default(int?), int? limitAppPreviewSets = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterLocale != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[locale]", filterLocale));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appScreenshotSets]", fieldsAppScreenshotSets));
            }
            if (fieldsAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appPreviewSets]", fieldsAppPreviewSets));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppScreenshotSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appScreenshotSets]", limitAppScreenshotSets));
            }
            if (limitAppPreviewSets != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appPreviewSets]", limitAppPreviewSets));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionLocalizationsResponse>("/v1/appStoreVersions/{id}/appStoreVersionLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <returns>AppStoreVersionPhasedReleaseWithoutIncludesResponse</returns>
        public AppStoreVersionPhasedReleaseWithoutIncludesResponse AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionPhasedReleaseWithoutIncludesResponse> localVarResponse = AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithHttpInfo(id, fieldsAppStoreVersionPhasedReleases);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionPhasedReleaseWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionPhasedReleaseWithoutIncludesResponse> AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionPhasedReleaseWithoutIncludesResponse>("/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionPhasedReleaseWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionPhasedReleaseWithoutIncludesResponse> AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionPhasedReleaseWithoutIncludesResponse> localVarResponse = await AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithHttpInfoAsync(id, fieldsAppStoreVersionPhasedReleases, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionPhasedReleaseWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionPhasedReleaseWithoutIncludesResponse>> AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionPhasedReleaseWithoutIncludesResponse>("/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>AppStoreVersionSubmissionResponse</returns>
        [Obsolete]
        public AppStoreVersionSubmissionResponse AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionSubmissionResponse> localVarResponse = AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithHttpInfo(id, fieldsAppStoreVersionSubmissions, fieldsAppStoreVersions, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionSubmissionResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionSubmissionResponse> AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionSubmissionResponse>("/v1/appStoreVersions/{id}/appStoreVersionSubmission", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionSubmissionResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreVersionSubmissionResponse> AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionSubmissionResponse> localVarResponse = await AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithHttpInfoAsync(id, fieldsAppStoreVersionSubmissions, fieldsAppStoreVersions, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionSubmissionResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionSubmissionResponse>> AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionSubmissionResponse>("/v1/appStoreVersions/{id}/appStoreVersionSubmission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <returns>BuildWithoutIncludesResponse</returns>
        public BuildWithoutIncludesResponse AppStoreVersionsBuildGetToOneRelated(string id, List<string>? fieldsBuilds = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildWithoutIncludesResponse> localVarResponse = AppStoreVersionsBuildGetToOneRelatedWithHttpInfo(id, fieldsBuilds);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <returns>ApiResponse of BuildWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildWithoutIncludesResponse> AppStoreVersionsBuildGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBuilds = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsBuildGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildWithoutIncludesResponse>("/v1/appStoreVersions/{id}/build", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsBuildGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BuildWithoutIncludesResponse> AppStoreVersionsBuildGetToOneRelatedAsync(string id, List<string>? fieldsBuilds = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildWithoutIncludesResponse> localVarResponse = await AppStoreVersionsBuildGetToOneRelatedWithHttpInfoAsync(id, fieldsBuilds, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildWithoutIncludesResponse>> AppStoreVersionsBuildGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuilds = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsBuildGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildWithoutIncludesResponse>("/v1/appStoreVersions/{id}/build", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsBuildGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>AppStoreVersionBuildLinkageResponse</returns>
        public AppStoreVersionBuildLinkageResponse AppStoreVersionsBuildGetToOneRelationship(string id)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionBuildLinkageResponse> localVarResponse = AppStoreVersionsBuildGetToOneRelationshipWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of AppStoreVersionBuildLinkageResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionBuildLinkageResponse> AppStoreVersionsBuildGetToOneRelationshipWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsBuildGetToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionBuildLinkageResponse>("/v1/appStoreVersions/{id}/relationships/build", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsBuildGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionBuildLinkageResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionBuildLinkageResponse> AppStoreVersionsBuildGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionBuildLinkageResponse> localVarResponse = await AppStoreVersionsBuildGetToOneRelationshipWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionBuildLinkageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionBuildLinkageResponse>> AppStoreVersionsBuildGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsBuildGetToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionBuildLinkageResponse>("/v1/appStoreVersions/{id}/relationships/build", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsBuildGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <returns></returns>
        public void AppStoreVersionsBuildUpdateToOneRelationship(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest)
        {
            AppStoreVersionsBuildUpdateToOneRelationshipWithHttpInfo(id, appStoreVersionBuildLinkageRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> AppStoreVersionsBuildUpdateToOneRelationshipWithHttpInfo(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsBuildUpdateToOneRelationship");

            // verify the required parameter 'appStoreVersionBuildLinkageRequest' is set
            if (appStoreVersionBuildLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionBuildLinkageRequest' when calling AppStoreVersionsApi->AppStoreVersionsBuildUpdateToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionBuildLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/appStoreVersions/{id}/relationships/build", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsBuildUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppStoreVersionsBuildUpdateToOneRelationshipAsync(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppStoreVersionsBuildUpdateToOneRelationshipWithHttpInfoAsync(id, appStoreVersionBuildLinkageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionBuildLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> AppStoreVersionsBuildUpdateToOneRelationshipWithHttpInfoAsync(string id, AppStoreVersionBuildLinkageRequest appStoreVersionBuildLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsBuildUpdateToOneRelationship");

            // verify the required parameter 'appStoreVersionBuildLinkageRequest' is set
            if (appStoreVersionBuildLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionBuildLinkageRequest' when calling AppStoreVersionsApi->AppStoreVersionsBuildUpdateToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionBuildLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/appStoreVersions/{id}/relationships/build", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsBuildUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <returns>AppStoreVersionResponse</returns>
        public AppStoreVersionResponse AppStoreVersionsCreateInstance(AppStoreVersionCreateRequest appStoreVersionCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = AppStoreVersionsCreateInstanceWithHttpInfo(appStoreVersionCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> AppStoreVersionsCreateInstanceWithHttpInfo(AppStoreVersionCreateRequest appStoreVersionCreateRequest)
        {
            // verify the required parameter 'appStoreVersionCreateRequest' is set
            if (appStoreVersionCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionCreateRequest' when calling AppStoreVersionsApi->AppStoreVersionsCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appStoreVersionCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AppStoreVersionResponse>("/v1/appStoreVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionResponse> AppStoreVersionsCreateInstanceAsync(AppStoreVersionCreateRequest appStoreVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = await AppStoreVersionsCreateInstanceWithHttpInfoAsync(appStoreVersionCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionCreateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse>> AppStoreVersionsCreateInstanceWithHttpInfoAsync(AppStoreVersionCreateRequest appStoreVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appStoreVersionCreateRequest' is set
            if (appStoreVersionCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionCreateRequest' when calling AppStoreVersionsApi->AppStoreVersionsCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appStoreVersionCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AppStoreVersionResponse>("/v1/appStoreVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>CustomerReviewsResponse</returns>
        public CustomerReviewsResponse AppStoreVersionsCustomerReviewsGetToManyRelated(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse> localVarResponse = AppStoreVersionsCustomerReviewsGetToManyRelatedWithHttpInfo(id, filterTerritory, filterRating, existsPublishedResponse, sort, fieldsCustomerReviews, fieldsCustomerReviewResponses, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of CustomerReviewsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse> AppStoreVersionsCustomerReviewsGetToManyRelatedWithHttpInfo(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsCustomerReviewsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (filterRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[rating]", filterRating));
            }
            if (existsPublishedResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "exists[publishedResponse]", existsPublishedResponse));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsCustomerReviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviews]", fieldsCustomerReviews));
            }
            if (fieldsCustomerReviewResponses != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviewResponses]", fieldsCustomerReviewResponses));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerReviewsResponse>("/v1/appStoreVersions/{id}/customerReviews", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsCustomerReviewsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerReviewsResponse</returns>
        public async System.Threading.Tasks.Task<CustomerReviewsResponse> AppStoreVersionsCustomerReviewsGetToManyRelatedAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse> localVarResponse = await AppStoreVersionsCustomerReviewsGetToManyRelatedWithHttpInfoAsync(id, filterTerritory, filterRating, existsPublishedResponse, sort, fieldsCustomerReviews, fieldsCustomerReviewResponses, limit, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterTerritory">filter by attribute &#39;territory&#39; (optional)</param>
        /// <param name="filterRating">filter by attribute &#39;rating&#39; (optional)</param>
        /// <param name="existsPublishedResponse">filter by publishedResponse (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsCustomerReviews">the fields to include for returned resources of type customerReviews (optional)</param>
        /// <param name="fieldsCustomerReviewResponses">the fields to include for returned resources of type customerReviewResponses (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerReviewsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<CustomerReviewsResponse>> AppStoreVersionsCustomerReviewsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterTerritory = default(List<string>?), List<string>? filterRating = default(List<string>?), bool? existsPublishedResponse = default(bool?), List<string>? sort = default(List<string>?), List<string>? fieldsCustomerReviews = default(List<string>?), List<string>? fieldsCustomerReviewResponses = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsCustomerReviewsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterTerritory != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[territory]", filterTerritory));
            }
            if (filterRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[rating]", filterRating));
            }
            if (existsPublishedResponse != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "exists[publishedResponse]", existsPublishedResponse));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsCustomerReviews != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviews]", fieldsCustomerReviews));
            }
            if (fieldsCustomerReviewResponses != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[customerReviewResponses]", fieldsCustomerReviewResponses));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerReviewsResponse>("/v1/appStoreVersions/{id}/customerReviews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsCustomerReviewsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void AppStoreVersionsDeleteInstance(string id)
        {
            AppStoreVersionsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> AppStoreVersionsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsDeleteInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/appStoreVersions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppStoreVersionsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppStoreVersionsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> AppStoreVersionsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsDeleteInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/appStoreVersions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        public GameCenterAppVersionResponse AppStoreVersionsGameCenterAppVersionGetToOneRelated(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = AppStoreVersionsGameCenterAppVersionGetToOneRelatedWithHttpInfo(id, fieldsGameCenterAppVersions, fieldsAppStoreVersions, include, limitCompatibilityVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> AppStoreVersionsGameCenterAppVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsGameCenterAppVersionGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAppVersionResponse>("/v1/appStoreVersions/{id}/gameCenterAppVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsGameCenterAppVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAppVersionResponse> AppStoreVersionsGameCenterAppVersionGetToOneRelatedAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = await AppStoreVersionsGameCenterAppVersionGetToOneRelatedWithHttpInfoAsync(id, fieldsGameCenterAppVersions, fieldsAppStoreVersions, include, limitCompatibilityVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse>> AppStoreVersionsGameCenterAppVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsGameCenterAppVersionGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAppVersionResponse>("/v1/appStoreVersions/{id}/gameCenterAppVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsGameCenterAppVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        public AppStoreVersionResponse AppStoreVersionsGetInstance(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = AppStoreVersionsGetInstanceWithHttpInfo(id, fieldsAppStoreVersions, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, include, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2, limitAppStoreVersionLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> AppStoreVersionsGetInstanceWithHttpInfo(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionResponse>("/v1/appStoreVersions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionResponse> AppStoreVersionsGetInstanceAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = await AppStoreVersionsGetInstanceWithHttpInfoAsync(id, fieldsAppStoreVersions, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, include, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2, limitAppStoreVersionLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional) (deprecated)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional) (deprecated)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse>> AppStoreVersionsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), int? limitAppStoreVersionLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionResponse>("/v1/appStoreVersions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <returns>RoutingAppCoverageWithoutIncludesResponse</returns>
        public RoutingAppCoverageWithoutIncludesResponse AppStoreVersionsRoutingAppCoverageGetToOneRelated(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<RoutingAppCoverageWithoutIncludesResponse> localVarResponse = AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithHttpInfo(id, fieldsRoutingAppCoverages);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <returns>ApiResponse of RoutingAppCoverageWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<RoutingAppCoverageWithoutIncludesResponse> AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsRoutingAppCoverageGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoutingAppCoverageWithoutIncludesResponse>("/v1/appStoreVersions/{id}/routingAppCoverage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsRoutingAppCoverageGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoutingAppCoverageWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<RoutingAppCoverageWithoutIncludesResponse> AppStoreVersionsRoutingAppCoverageGetToOneRelatedAsync(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<RoutingAppCoverageWithoutIncludesResponse> localVarResponse = await AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithHttpInfoAsync(id, fieldsRoutingAppCoverages, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoutingAppCoverageWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<RoutingAppCoverageWithoutIncludesResponse>> AppStoreVersionsRoutingAppCoverageGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsRoutingAppCoverages = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsRoutingAppCoverageGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RoutingAppCoverageWithoutIncludesResponse>("/v1/appStoreVersions/{id}/routingAppCoverage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsRoutingAppCoverageGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <returns>AppStoreVersionResponse</returns>
        public AppStoreVersionResponse AppStoreVersionsUpdateInstance(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = AppStoreVersionsUpdateInstanceWithHttpInfo(id, appStoreVersionUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> AppStoreVersionsUpdateInstanceWithHttpInfo(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsUpdateInstance");

            // verify the required parameter 'appStoreVersionUpdateRequest' is set
            if (appStoreVersionUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionUpdateRequest' when calling AppStoreVersionsApi->AppStoreVersionsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AppStoreVersionResponse>("/v1/appStoreVersions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionResponse> AppStoreVersionsUpdateInstanceAsync(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = await AppStoreVersionsUpdateInstanceWithHttpInfoAsync(id, appStoreVersionUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionUpdateRequest">AppStoreVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse>> AppStoreVersionsUpdateInstanceWithHttpInfoAsync(string id, AppStoreVersionUpdateRequest appStoreVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionsApi->AppStoreVersionsUpdateInstance");

            // verify the required parameter 'appStoreVersionUpdateRequest' is set
            if (appStoreVersionUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionUpdateRequest' when calling AppStoreVersionsApi->AppStoreVersionsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AppStoreVersionResponse>("/v1/appStoreVersions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
