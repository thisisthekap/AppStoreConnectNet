/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreVersionExperimentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentTreatmentsResponse</returns>
        [Obsolete]
        AppStoreVersionExperimentTreatmentsResponse AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentTreatmentsResponse</returns>
        [Obsolete]
        ApiResponse<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        AppStoreVersionExperimentResponse AppStoreVersionExperimentsCreateInstance(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        ApiResponse<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsCreateInstanceWithHttpInfo(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        [Obsolete]
        void AppStoreVersionExperimentsDeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> AppStoreVersionExperimentsDeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        AppStoreVersionExperimentResponse AppStoreVersionExperimentsGetInstance(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        ApiResponse<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsGetInstanceWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        AppStoreVersionExperimentResponse AppStoreVersionExperimentsUpdateInstance(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        ApiResponse<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsUpdateInstanceWithHttpInfo(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentTreatmentsResponse</returns>
        AppStoreVersionExperimentTreatmentsResponse AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentTreatmentsResponse</returns>
        ApiResponse<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentV2Response</returns>
        AppStoreVersionExperimentV2Response AppStoreVersionExperimentsV2CreateInstance(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentV2Response</returns>
        ApiResponse<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2CreateInstanceWithHttpInfo(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        void AppStoreVersionExperimentsV2DeleteInstance(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppStoreVersionExperimentsV2DeleteInstanceWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentV2Response</returns>
        AppStoreVersionExperimentV2Response AppStoreVersionExperimentsV2GetInstance(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentV2Response</returns>
        ApiResponse<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2GetInstanceWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentV2Response</returns>
        AppStoreVersionExperimentV2Response AppStoreVersionExperimentsV2UpdateInstance(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentV2Response</returns>
        ApiResponse<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2UpdateInstanceWithHttpInfo(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreVersionExperimentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentTreatmentsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentTreatmentsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentTreatmentsResponse>> AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsCreateInstanceAsync(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentResponse>> AppStoreVersionExperimentsCreateInstanceWithHttpInfoAsync(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task AppStoreVersionExperimentsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> AppStoreVersionExperimentsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsGetInstanceAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentResponse>> AppStoreVersionExperimentsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsUpdateInstanceAsync(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentResponse>> AppStoreVersionExperimentsUpdateInstanceWithHttpInfoAsync(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentTreatmentsResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentTreatmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentTreatmentsResponse>> AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentV2Response</returns>
        System.Threading.Tasks.Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2CreateInstanceAsync(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentV2Response>> AppStoreVersionExperimentsV2CreateInstanceWithHttpInfoAsync(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppStoreVersionExperimentsV2DeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppStoreVersionExperimentsV2DeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentV2Response</returns>
        System.Threading.Tasks.Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2GetInstanceAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentV2Response>> AppStoreVersionExperimentsV2GetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentV2Response</returns>
        System.Threading.Tasks.Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2UpdateInstanceAsync(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionExperimentV2Response>> AppStoreVersionExperimentsV2UpdateInstanceWithHttpInfoAsync(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppStoreVersionExperimentsApi : IAppStoreVersionExperimentsApiSync, IAppStoreVersionExperimentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppStoreVersionExperimentsApi : IDisposable, IAppStoreVersionExperimentsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppStoreVersionExperimentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppStoreVersionExperimentsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppStoreVersionExperimentsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppStoreVersionExperimentsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppStoreVersionExperimentsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppStoreVersionExperimentsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionExperimentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppStoreVersionExperimentsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentTreatmentsResponse</returns>
        [Obsolete]
        public AppStoreVersionExperimentTreatmentsResponse AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse> localVarResponse = AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfo(id, fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatmentLocalizations, limit, include, limitAppStoreVersionExperimentTreatmentLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentTreatmentsResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionExperimentTreatmentsResponse>("/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentTreatmentsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse> localVarResponse = await AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfoAsync(id, fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatmentLocalizations, limit, include, limitAppStoreVersionExperimentTreatmentLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentTreatmentsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse>> AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionExperimentTreatmentsResponse>("/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public AppStoreVersionExperimentResponse AppStoreVersionExperimentsCreateInstance(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> localVarResponse = AppStoreVersionExperimentsCreateInstanceWithHttpInfo(appStoreVersionExperimentCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsCreateInstanceWithHttpInfo(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest)
        {
            // verify the required parameter 'appStoreVersionExperimentCreateRequest' is set
            if (appStoreVersionExperimentCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentCreateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appStoreVersionExperimentCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AppStoreVersionExperimentResponse>("/v1/appStoreVersionExperiments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsCreateInstanceAsync(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> localVarResponse = await AppStoreVersionExperimentsCreateInstanceWithHttpInfoAsync(appStoreVersionExperimentCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentCreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse>> AppStoreVersionExperimentsCreateInstanceWithHttpInfoAsync(AppStoreVersionExperimentCreateRequest appStoreVersionExperimentCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appStoreVersionExperimentCreateRequest' is set
            if (appStoreVersionExperimentCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentCreateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appStoreVersionExperimentCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AppStoreVersionExperimentResponse>("/v1/appStoreVersionExperiments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        [Obsolete]
        public void AppStoreVersionExperimentsDeleteInstance(string id)
        {
            AppStoreVersionExperimentsDeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<Object> AppStoreVersionExperimentsDeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsDeleteInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task AppStoreVersionExperimentsDeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppStoreVersionExperimentsDeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> AppStoreVersionExperimentsDeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsDeleteInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsDeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public AppStoreVersionExperimentResponse AppStoreVersionExperimentsGetInstance(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> localVarResponse = AppStoreVersionExperimentsGetInstanceWithHttpInfo(id, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments, include, limitAppStoreVersionExperimentTreatments);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsGetInstanceWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionExperimentResponse>("/v1/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsGetInstanceAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> localVarResponse = await AppStoreVersionExperimentsGetInstanceWithHttpInfoAsync(id, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments, include, limitAppStoreVersionExperimentTreatments, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse>> AppStoreVersionExperimentsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionExperimentResponse>("/v1/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public AppStoreVersionExperimentResponse AppStoreVersionExperimentsUpdateInstance(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> localVarResponse = AppStoreVersionExperimentsUpdateInstanceWithHttpInfo(id, appStoreVersionExperimentUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsUpdateInstanceWithHttpInfo(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsUpdateInstance");

            // verify the required parameter 'appStoreVersionExperimentUpdateRequest' is set
            if (appStoreVersionExperimentUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentUpdateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionExperimentUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AppStoreVersionExperimentResponse>("/v1/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentResponse> AppStoreVersionExperimentsUpdateInstanceAsync(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse> localVarResponse = await AppStoreVersionExperimentsUpdateInstanceWithHttpInfoAsync(id, appStoreVersionExperimentUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentUpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentResponse>> AppStoreVersionExperimentsUpdateInstanceWithHttpInfoAsync(string id, AppStoreVersionExperimentUpdateRequest appStoreVersionExperimentUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsUpdateInstance");

            // verify the required parameter 'appStoreVersionExperimentUpdateRequest' is set
            if (appStoreVersionExperimentUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentUpdateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionExperimentUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AppStoreVersionExperimentResponse>("/v1/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentTreatmentsResponse</returns>
        public AppStoreVersionExperimentTreatmentsResponse AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse> localVarResponse = AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfo(id, fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatmentLocalizations, limit, include, limitAppStoreVersionExperimentTreatmentLocalizations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentTreatmentsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionExperimentTreatmentsResponse>("/v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentTreatmentsResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentTreatmentsResponse> AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse> localVarResponse = await AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfoAsync(id, fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatmentLocalizations, limit, include, limitAppStoreVersionExperimentTreatmentLocalizations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatmentLocalizations">the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatmentLocalizations">maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentTreatmentsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentTreatmentsResponse>> AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatmentLocalizations = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatmentLocalizations = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatmentLocalizations]", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatmentLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionExperimentTreatmentsResponse>("/v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentV2Response</returns>
        public AppStoreVersionExperimentV2Response AppStoreVersionExperimentsV2CreateInstance(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> localVarResponse = AppStoreVersionExperimentsV2CreateInstanceWithHttpInfo(appStoreVersionExperimentV2CreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentV2Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2CreateInstanceWithHttpInfo(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest)
        {
            // verify the required parameter 'appStoreVersionExperimentV2CreateRequest' is set
            if (appStoreVersionExperimentV2CreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentV2CreateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2CreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appStoreVersionExperimentV2CreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AppStoreVersionExperimentV2Response>("/v2/appStoreVersionExperiments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2CreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentV2Response</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2CreateInstanceAsync(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> localVarResponse = await AppStoreVersionExperimentsV2CreateInstanceWithHttpInfoAsync(appStoreVersionExperimentV2CreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appStoreVersionExperimentV2CreateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response>> AppStoreVersionExperimentsV2CreateInstanceWithHttpInfoAsync(AppStoreVersionExperimentV2CreateRequest appStoreVersionExperimentV2CreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'appStoreVersionExperimentV2CreateRequest' is set
            if (appStoreVersionExperimentV2CreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentV2CreateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2CreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appStoreVersionExperimentV2CreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AppStoreVersionExperimentV2Response>("/v2/appStoreVersionExperiments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2CreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns></returns>
        public void AppStoreVersionExperimentsV2DeleteInstance(string id)
        {
            AppStoreVersionExperimentsV2DeleteInstanceWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> AppStoreVersionExperimentsV2DeleteInstanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2DeleteInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2DeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppStoreVersionExperimentsV2DeleteInstanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AppStoreVersionExperimentsV2DeleteInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> AppStoreVersionExperimentsV2DeleteInstanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2DeleteInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2DeleteInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionExperimentV2Response</returns>
        public AppStoreVersionExperimentV2Response AppStoreVersionExperimentsV2GetInstance(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> localVarResponse = AppStoreVersionExperimentsV2GetInstanceWithHttpInfo(id, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments, include, limitAppStoreVersionExperimentTreatments, limitControlVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentV2Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2GetInstanceWithHttpInfo(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2GetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }
            if (limitControlVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[controlVersions]", limitControlVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionExperimentV2Response>("/v2/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2GetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentV2Response</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2GetInstanceAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> localVarResponse = await AppStoreVersionExperimentsV2GetInstanceWithHttpInfoAsync(id, fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments, include, limitAppStoreVersionExperimentTreatments, limitControlVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAppStoreVersionExperimentTreatments">the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionExperimentTreatments">maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)</param>
        /// <param name="limitControlVersions">maximum number of related controlVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response>> AppStoreVersionExperimentsV2GetInstanceWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAppStoreVersionExperimentTreatments = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionExperimentTreatments = default(int?), int? limitControlVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2GetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperimentTreatments]", fieldsAppStoreVersionExperimentTreatments));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionExperimentTreatments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments));
            }
            if (limitControlVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[controlVersions]", limitControlVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionExperimentV2Response>("/v2/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2GetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>AppStoreVersionExperimentV2Response</returns>
        public AppStoreVersionExperimentV2Response AppStoreVersionExperimentsV2UpdateInstance(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> localVarResponse = AppStoreVersionExperimentsV2UpdateInstanceWithHttpInfo(id, appStoreVersionExperimentV2UpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <returns>ApiResponse of AppStoreVersionExperimentV2Response</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2UpdateInstanceWithHttpInfo(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2UpdateInstance");

            // verify the required parameter 'appStoreVersionExperimentV2UpdateRequest' is set
            if (appStoreVersionExperimentV2UpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentV2UpdateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2UpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionExperimentV2UpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AppStoreVersionExperimentV2Response>("/v2/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2UpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionExperimentV2Response</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionExperimentV2Response> AppStoreVersionExperimentsV2UpdateInstanceAsync(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response> localVarResponse = await AppStoreVersionExperimentsV2UpdateInstanceWithHttpInfoAsync(id, appStoreVersionExperimentV2UpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="appStoreVersionExperimentV2UpdateRequest">AppStoreVersionExperiment representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionExperimentV2Response)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionExperimentV2Response>> AppStoreVersionExperimentsV2UpdateInstanceWithHttpInfoAsync(string id, AppStoreVersionExperimentV2UpdateRequest appStoreVersionExperimentV2UpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2UpdateInstance");

            // verify the required parameter 'appStoreVersionExperimentV2UpdateRequest' is set
            if (appStoreVersionExperimentV2UpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'appStoreVersionExperimentV2UpdateRequest' when calling AppStoreVersionExperimentsApi->AppStoreVersionExperimentsV2UpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = appStoreVersionExperimentV2UpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AppStoreVersionExperimentV2Response>("/v2/appStoreVersionExperiments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppStoreVersionExperimentsV2UpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
