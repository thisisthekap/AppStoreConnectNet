/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <returns>AppEncryptionDeclarationWithoutIncludesResponse</returns>
        AppEncryptionDeclarationWithoutIncludesResponse BuildsAppEncryptionDeclarationGetToOneRelated(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <returns>ApiResponse of AppEncryptionDeclarationWithoutIncludesResponse</returns>
        ApiResponse<AppEncryptionDeclarationWithoutIncludesResponse> BuildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>BuildAppEncryptionDeclarationLinkageResponse</returns>
        BuildAppEncryptionDeclarationLinkageResponse BuildsAppEncryptionDeclarationGetToOneRelationship(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of BuildAppEncryptionDeclarationLinkageResponse</returns>
        ApiResponse<BuildAppEncryptionDeclarationLinkageResponse> BuildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <returns></returns>
        void BuildsAppEncryptionDeclarationUpdateToOneRelationship(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <returns>AppWithoutIncludesResponse</returns>
        AppWithoutIncludesResponse BuildsAppGetToOneRelated(string id, List<string>? fieldsApps = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <returns>ApiResponse of AppWithoutIncludesResponse</returns>
        ApiResponse<AppWithoutIncludesResponse> BuildsAppGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsApps = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        AppStoreVersionResponse BuildsAppStoreVersionGetToOneRelated(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        ApiResponse<AppStoreVersionResponse> BuildsAppStoreVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <returns>BetaAppReviewSubmissionWithoutIncludesResponse</returns>
        BetaAppReviewSubmissionWithoutIncludesResponse BuildsBetaAppReviewSubmissionGetToOneRelated(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <returns>ApiResponse of BetaAppReviewSubmissionWithoutIncludesResponse</returns>
        ApiResponse<BetaAppReviewSubmissionWithoutIncludesResponse> BuildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaBuildLocalizationsWithoutIncludesResponse</returns>
        BetaBuildLocalizationsWithoutIncludesResponse BuildsBetaBuildLocalizationsGetToManyRelated(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaBuildLocalizationsWithoutIncludesResponse</returns>
        ApiResponse<BetaBuildLocalizationsWithoutIncludesResponse> BuildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>BetaBuildUsagesV1MetricResponse</returns>
        BetaBuildUsagesV1MetricResponse BuildsBetaBuildUsagesGetMetrics(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of BetaBuildUsagesV1MetricResponse</returns>
        ApiResponse<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetricsWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void BuildsBetaGroupsCreateToManyRelationship(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuildsBetaGroupsCreateToManyRelationshipWithHttpInfo(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void BuildsBetaGroupsDeleteToManyRelationship(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuildsBetaGroupsDeleteToManyRelationshipWithHttpInfo(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>BuildBetaDetailResponse</returns>
        BuildBetaDetailResponse BuildsBuildBetaDetailGetToOneRelated(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of BuildBetaDetailResponse</returns>
        ApiResponse<BuildBetaDetailResponse> BuildsBuildBetaDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>DiagnosticSignaturesResponse</returns>
        DiagnosticSignaturesResponse BuildsDiagnosticSignaturesGetToManyRelated(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of DiagnosticSignaturesResponse</returns>
        ApiResponse<DiagnosticSignaturesResponse> BuildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>BuildsResponse</returns>
        BuildsResponse BuildsGetCollection(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of BuildsResponse</returns>
        ApiResponse<BuildsResponse> BuildsGetCollectionWithHttpInfo(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>BuildResponse</returns>
        BuildResponse BuildsGetInstance(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of BuildResponse</returns>
        ApiResponse<BuildResponse> BuildsGetInstanceWithHttpInfo(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BuildIconsWithoutIncludesResponse</returns>
        BuildIconsWithoutIncludesResponse BuildsIconsGetToManyRelated(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BuildIconsWithoutIncludesResponse</returns>
        ApiResponse<BuildIconsWithoutIncludesResponse> BuildsIconsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void BuildsIndividualTestersCreateToManyRelationship(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuildsIndividualTestersCreateToManyRelationshipWithHttpInfo(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void BuildsIndividualTestersDeleteToManyRelationship(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuildsIndividualTestersDeleteToManyRelationshipWithHttpInfo(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaTestersWithoutIncludesResponse</returns>
        BetaTestersWithoutIncludesResponse BuildsIndividualTestersGetToManyRelated(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaTestersWithoutIncludesResponse</returns>
        ApiResponse<BetaTestersWithoutIncludesResponse> BuildsIndividualTestersGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BuildIndividualTestersLinkagesResponse</returns>
        BuildIndividualTestersLinkagesResponse BuildsIndividualTestersGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BuildIndividualTestersLinkagesResponse</returns>
        ApiResponse<BuildIndividualTestersLinkagesResponse> BuildsIndividualTestersGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>XcodeMetrics</returns>
        XcodeMetrics BuildsPerfPowerMetricsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>ApiResponse of XcodeMetrics</returns>
        ApiResponse<XcodeMetrics> BuildsPerfPowerMetricsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <returns>PrereleaseVersionWithoutIncludesResponse</returns>
        PrereleaseVersionWithoutIncludesResponse BuildsPreReleaseVersionGetToOneRelated(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <returns>ApiResponse of PrereleaseVersionWithoutIncludesResponse</returns>
        ApiResponse<PrereleaseVersionWithoutIncludesResponse> BuildsPreReleaseVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <returns>BuildResponse</returns>
        BuildResponse BuildsUpdateInstance(string id, BuildUpdateRequest buildUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <returns>ApiResponse of BuildResponse</returns>
        ApiResponse<BuildResponse> BuildsUpdateInstanceWithHttpInfo(string id, BuildUpdateRequest buildUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppEncryptionDeclarationWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<AppEncryptionDeclarationWithoutIncludesResponse> BuildsAppEncryptionDeclarationGetToOneRelatedAsync(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppEncryptionDeclarationWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppEncryptionDeclarationWithoutIncludesResponse>> BuildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildAppEncryptionDeclarationLinkageResponse</returns>
        System.Threading.Tasks.Task<BuildAppEncryptionDeclarationLinkageResponse> BuildsAppEncryptionDeclarationGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildAppEncryptionDeclarationLinkageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildAppEncryptionDeclarationLinkageResponse>> BuildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuildsAppEncryptionDeclarationUpdateToOneRelationshipAsync(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfoAsync(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<AppWithoutIncludesResponse> BuildsAppGetToOneRelatedAsync(string id, List<string>? fieldsApps = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppWithoutIncludesResponse>> BuildsAppGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsApps = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionResponse> BuildsAppStoreVersionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionResponse>> BuildsAppStoreVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaAppReviewSubmissionWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BetaAppReviewSubmissionWithoutIncludesResponse> BuildsBetaAppReviewSubmissionGetToOneRelatedAsync(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaAppReviewSubmissionWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaAppReviewSubmissionWithoutIncludesResponse>> BuildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaBuildLocalizationsWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BetaBuildLocalizationsWithoutIncludesResponse> BuildsBetaBuildLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaBuildLocalizationsWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaBuildLocalizationsWithoutIncludesResponse>> BuildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaBuildUsagesV1MetricResponse</returns>
        System.Threading.Tasks.Task<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetricsAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaBuildUsagesV1MetricResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaBuildUsagesV1MetricResponse>> BuildsBetaBuildUsagesGetMetricsWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuildsBetaGroupsCreateToManyRelationshipAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuildsBetaGroupsCreateToManyRelationshipWithHttpInfoAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuildsBetaGroupsDeleteToManyRelationshipAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuildsBetaGroupsDeleteToManyRelationshipWithHttpInfoAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildBetaDetailResponse</returns>
        System.Threading.Tasks.Task<BuildBetaDetailResponse> BuildsBuildBetaDetailGetToOneRelatedAsync(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildBetaDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildBetaDetailResponse>> BuildsBuildBetaDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DiagnosticSignaturesResponse</returns>
        System.Threading.Tasks.Task<DiagnosticSignaturesResponse> BuildsDiagnosticSignaturesGetToManyRelatedAsync(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DiagnosticSignaturesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DiagnosticSignaturesResponse>> BuildsDiagnosticSignaturesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildsResponse</returns>
        System.Threading.Tasks.Task<BuildsResponse> BuildsGetCollectionAsync(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildsResponse>> BuildsGetCollectionWithHttpInfoAsync(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildResponse</returns>
        System.Threading.Tasks.Task<BuildResponse> BuildsGetInstanceAsync(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildResponse>> BuildsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildIconsWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BuildIconsWithoutIncludesResponse> BuildsIconsGetToManyRelatedAsync(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildIconsWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildIconsWithoutIncludesResponse>> BuildsIconsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuildsIndividualTestersCreateToManyRelationshipAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuildsIndividualTestersCreateToManyRelationshipWithHttpInfoAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuildsIndividualTestersDeleteToManyRelationshipAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuildsIndividualTestersDeleteToManyRelationshipWithHttpInfoAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaTestersWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<BetaTestersWithoutIncludesResponse> BuildsIndividualTestersGetToManyRelatedAsync(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaTestersWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BetaTestersWithoutIncludesResponse>> BuildsIndividualTestersGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildIndividualTestersLinkagesResponse</returns>
        System.Threading.Tasks.Task<BuildIndividualTestersLinkagesResponse> BuildsIndividualTestersGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildIndividualTestersLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildIndividualTestersLinkagesResponse>> BuildsIndividualTestersGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of XcodeMetrics</returns>
        System.Threading.Tasks.Task<XcodeMetrics> BuildsPerfPowerMetricsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (XcodeMetrics)</returns>
        System.Threading.Tasks.Task<ApiResponse<XcodeMetrics>> BuildsPerfPowerMetricsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrereleaseVersionWithoutIncludesResponse</returns>
        System.Threading.Tasks.Task<PrereleaseVersionWithoutIncludesResponse> BuildsPreReleaseVersionGetToOneRelatedAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrereleaseVersionWithoutIncludesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrereleaseVersionWithoutIncludesResponse>> BuildsPreReleaseVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildResponse</returns>
        System.Threading.Tasks.Task<BuildResponse> BuildsUpdateInstanceAsync(string id, BuildUpdateRequest buildUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildResponse>> BuildsUpdateInstanceWithHttpInfoAsync(string id, BuildUpdateRequest buildUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApi : IBuildsApiSync, IBuildsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildsApi : IDisposable, IBuildsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public BuildsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public BuildsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public BuildsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BuildsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BuildsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BuildsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public BuildsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <returns>AppEncryptionDeclarationWithoutIncludesResponse</returns>
        public AppEncryptionDeclarationWithoutIncludesResponse BuildsAppEncryptionDeclarationGetToOneRelated(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationWithoutIncludesResponse> localVarResponse = BuildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo(id, fieldsAppEncryptionDeclarations);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <returns>ApiResponse of AppEncryptionDeclarationWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationWithoutIncludesResponse> BuildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppEncryptionDeclarationGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppEncryptionDeclarationWithoutIncludesResponse>("/v1/builds/{id}/appEncryptionDeclaration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppEncryptionDeclarationGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppEncryptionDeclarationWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<AppEncryptionDeclarationWithoutIncludesResponse> BuildsAppEncryptionDeclarationGetToOneRelatedAsync(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationWithoutIncludesResponse> localVarResponse = await BuildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfoAsync(id, fieldsAppEncryptionDeclarations, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppEncryptionDeclarationWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppEncryptionDeclarationWithoutIncludesResponse>> BuildsAppEncryptionDeclarationGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppEncryptionDeclarationGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppEncryptionDeclarationWithoutIncludesResponse>("/v1/builds/{id}/appEncryptionDeclaration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppEncryptionDeclarationGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>BuildAppEncryptionDeclarationLinkageResponse</returns>
        public BuildAppEncryptionDeclarationLinkageResponse BuildsAppEncryptionDeclarationGetToOneRelationship(string id)
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildAppEncryptionDeclarationLinkageResponse> localVarResponse = BuildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <returns>ApiResponse of BuildAppEncryptionDeclarationLinkageResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildAppEncryptionDeclarationLinkageResponse> BuildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppEncryptionDeclarationGetToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildAppEncryptionDeclarationLinkageResponse>("/v1/builds/{id}/relationships/appEncryptionDeclaration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppEncryptionDeclarationGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildAppEncryptionDeclarationLinkageResponse</returns>
        public async System.Threading.Tasks.Task<BuildAppEncryptionDeclarationLinkageResponse> BuildsAppEncryptionDeclarationGetToOneRelationshipAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildAppEncryptionDeclarationLinkageResponse> localVarResponse = await BuildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildAppEncryptionDeclarationLinkageResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildAppEncryptionDeclarationLinkageResponse>> BuildsAppEncryptionDeclarationGetToOneRelationshipWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppEncryptionDeclarationGetToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildAppEncryptionDeclarationLinkageResponse>("/v1/builds/{id}/relationships/appEncryptionDeclaration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppEncryptionDeclarationGetToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <returns></returns>
        public void BuildsAppEncryptionDeclarationUpdateToOneRelationship(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest)
        {
            BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo(id, buildAppEncryptionDeclarationLinkageRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfo(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppEncryptionDeclarationUpdateToOneRelationship");

            // verify the required parameter 'buildAppEncryptionDeclarationLinkageRequest' is set
            if (buildAppEncryptionDeclarationLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildAppEncryptionDeclarationLinkageRequest' when calling BuildsApi->BuildsAppEncryptionDeclarationUpdateToOneRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildAppEncryptionDeclarationLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/v1/builds/{id}/relationships/appEncryptionDeclaration", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppEncryptionDeclarationUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuildsAppEncryptionDeclarationUpdateToOneRelationshipAsync(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfoAsync(id, buildAppEncryptionDeclarationLinkageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildAppEncryptionDeclarationLinkageRequest">Related linkage</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> BuildsAppEncryptionDeclarationUpdateToOneRelationshipWithHttpInfoAsync(string id, BuildAppEncryptionDeclarationLinkageRequest buildAppEncryptionDeclarationLinkageRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppEncryptionDeclarationUpdateToOneRelationship");

            // verify the required parameter 'buildAppEncryptionDeclarationLinkageRequest' is set
            if (buildAppEncryptionDeclarationLinkageRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildAppEncryptionDeclarationLinkageRequest' when calling BuildsApi->BuildsAppEncryptionDeclarationUpdateToOneRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildAppEncryptionDeclarationLinkageRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/v1/builds/{id}/relationships/appEncryptionDeclaration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppEncryptionDeclarationUpdateToOneRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <returns>AppWithoutIncludesResponse</returns>
        public AppWithoutIncludesResponse BuildsAppGetToOneRelated(string id, List<string>? fieldsApps = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppWithoutIncludesResponse> localVarResponse = BuildsAppGetToOneRelatedWithHttpInfo(id, fieldsApps);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <returns>ApiResponse of AppWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppWithoutIncludesResponse> BuildsAppGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsApps = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppWithoutIncludesResponse>("/v1/builds/{id}/app", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<AppWithoutIncludesResponse> BuildsAppGetToOneRelatedAsync(string id, List<string>? fieldsApps = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppWithoutIncludesResponse> localVarResponse = await BuildsAppGetToOneRelatedWithHttpInfoAsync(id, fieldsApps, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppWithoutIncludesResponse>> BuildsAppGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsApps = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppWithoutIncludesResponse>("/v1/builds/{id}/app", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        public AppStoreVersionResponse BuildsAppStoreVersionGetToOneRelated(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = BuildsAppStoreVersionGetToOneRelatedWithHttpInfo(id, fieldsAppStoreVersions, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, include, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> BuildsAppStoreVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppStoreVersionGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionResponse>("/v1/builds/{id}/appStoreVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppStoreVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionResponse> BuildsAppStoreVersionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = await BuildsAppStoreVersionGetToOneRelatedWithHttpInfoAsync(id, fieldsAppStoreVersions, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, include, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse>> BuildsAppStoreVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsAppStoreVersionGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionResponse>("/v1/builds/{id}/appStoreVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsAppStoreVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <returns>BetaAppReviewSubmissionWithoutIncludesResponse</returns>
        public BetaAppReviewSubmissionWithoutIncludesResponse BuildsBetaAppReviewSubmissionGetToOneRelated(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewSubmissionWithoutIncludesResponse> localVarResponse = BuildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo(id, fieldsBetaAppReviewSubmissions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <returns>ApiResponse of BetaAppReviewSubmissionWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewSubmissionWithoutIncludesResponse> BuildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaAppReviewSubmissionGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaAppReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaAppReviewSubmissionWithoutIncludesResponse>("/v1/builds/{id}/betaAppReviewSubmission", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaAppReviewSubmissionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaAppReviewSubmissionWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BetaAppReviewSubmissionWithoutIncludesResponse> BuildsBetaAppReviewSubmissionGetToOneRelatedAsync(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewSubmissionWithoutIncludesResponse> localVarResponse = await BuildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfoAsync(id, fieldsBetaAppReviewSubmissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaAppReviewSubmissionWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaAppReviewSubmissionWithoutIncludesResponse>> BuildsBetaAppReviewSubmissionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaAppReviewSubmissionGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaAppReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaAppReviewSubmissionWithoutIncludesResponse>("/v1/builds/{id}/betaAppReviewSubmission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaAppReviewSubmissionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaBuildLocalizationsWithoutIncludesResponse</returns>
        public BetaBuildLocalizationsWithoutIncludesResponse BuildsBetaBuildLocalizationsGetToManyRelated(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaBuildLocalizationsWithoutIncludesResponse> localVarResponse = BuildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo(id, fieldsBetaBuildLocalizations, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaBuildLocalizationsWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaBuildLocalizationsWithoutIncludesResponse> BuildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaBuildLocalizationsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaBuildLocalizationsWithoutIncludesResponse>("/v1/builds/{id}/betaBuildLocalizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaBuildLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaBuildLocalizationsWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BetaBuildLocalizationsWithoutIncludesResponse> BuildsBetaBuildLocalizationsGetToManyRelatedAsync(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaBuildLocalizationsWithoutIncludesResponse> localVarResponse = await BuildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfoAsync(id, fieldsBetaBuildLocalizations, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaBuildLocalizationsWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaBuildLocalizationsWithoutIncludesResponse>> BuildsBetaBuildLocalizationsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaBuildLocalizations = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaBuildLocalizationsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaBuildLocalizationsWithoutIncludesResponse>("/v1/builds/{id}/betaBuildLocalizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaBuildLocalizationsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>BetaBuildUsagesV1MetricResponse</returns>
        public BetaBuildUsagesV1MetricResponse BuildsBetaBuildUsagesGetMetrics(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse> localVarResponse = BuildsBetaBuildUsagesGetMetricsWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <returns>ApiResponse of BetaBuildUsagesV1MetricResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetricsWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaBuildUsagesGetMetrics");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaBuildUsagesV1MetricResponse>("/v1/builds/{id}/metrics/betaBuildUsages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaBuildUsagesGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaBuildUsagesV1MetricResponse</returns>
        public async System.Threading.Tasks.Task<BetaBuildUsagesV1MetricResponse> BuildsBetaBuildUsagesGetMetricsAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse> localVarResponse = await BuildsBetaBuildUsagesGetMetricsWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum number of groups to return per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaBuildUsagesV1MetricResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaBuildUsagesV1MetricResponse>> BuildsBetaBuildUsagesGetMetricsWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaBuildUsagesGetMetrics");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaBuildUsagesV1MetricResponse>("/v1/builds/{id}/metrics/betaBuildUsages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaBuildUsagesGetMetrics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void BuildsBetaGroupsCreateToManyRelationship(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest)
        {
            BuildsBetaGroupsCreateToManyRelationshipWithHttpInfo(id, buildBetaGroupsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> BuildsBetaGroupsCreateToManyRelationshipWithHttpInfo(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaGroupsCreateToManyRelationship");

            // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
            if (buildBetaGroupsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildBetaGroupsLinkagesRequest' when calling BuildsApi->BuildsBetaGroupsCreateToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildBetaGroupsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/builds/{id}/relationships/betaGroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaGroupsCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuildsBetaGroupsCreateToManyRelationshipAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BuildsBetaGroupsCreateToManyRelationshipWithHttpInfoAsync(id, buildBetaGroupsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> BuildsBetaGroupsCreateToManyRelationshipWithHttpInfoAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaGroupsCreateToManyRelationship");

            // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
            if (buildBetaGroupsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildBetaGroupsLinkagesRequest' when calling BuildsApi->BuildsBetaGroupsCreateToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildBetaGroupsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/builds/{id}/relationships/betaGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaGroupsCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void BuildsBetaGroupsDeleteToManyRelationship(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest)
        {
            BuildsBetaGroupsDeleteToManyRelationshipWithHttpInfo(id, buildBetaGroupsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> BuildsBetaGroupsDeleteToManyRelationshipWithHttpInfo(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaGroupsDeleteToManyRelationship");

            // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
            if (buildBetaGroupsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildBetaGroupsLinkagesRequest' when calling BuildsApi->BuildsBetaGroupsDeleteToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildBetaGroupsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/builds/{id}/relationships/betaGroups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaGroupsDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuildsBetaGroupsDeleteToManyRelationshipAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BuildsBetaGroupsDeleteToManyRelationshipWithHttpInfoAsync(id, buildBetaGroupsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildBetaGroupsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> BuildsBetaGroupsDeleteToManyRelationshipWithHttpInfoAsync(string id, BuildBetaGroupsLinkagesRequest buildBetaGroupsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBetaGroupsDeleteToManyRelationship");

            // verify the required parameter 'buildBetaGroupsLinkagesRequest' is set
            if (buildBetaGroupsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildBetaGroupsLinkagesRequest' when calling BuildsApi->BuildsBetaGroupsDeleteToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildBetaGroupsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/builds/{id}/relationships/betaGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBetaGroupsDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>BuildBetaDetailResponse</returns>
        public BuildBetaDetailResponse BuildsBuildBetaDetailGetToOneRelated(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildBetaDetailResponse> localVarResponse = BuildsBuildBetaDetailGetToOneRelatedWithHttpInfo(id, fieldsBuildBetaDetails, fieldsBuilds, include);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <returns>ApiResponse of BuildBetaDetailResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildBetaDetailResponse> BuildsBuildBetaDetailGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBuildBetaDetailGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuildBetaDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildBetaDetailResponse>("/v1/builds/{id}/buildBetaDetail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBuildBetaDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildBetaDetailResponse</returns>
        public async System.Threading.Tasks.Task<BuildBetaDetailResponse> BuildsBuildBetaDetailGetToOneRelatedAsync(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildBetaDetailResponse> localVarResponse = await BuildsBuildBetaDetailGetToOneRelatedWithHttpInfoAsync(id, fieldsBuildBetaDetails, fieldsBuilds, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildBetaDetailResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildBetaDetailResponse>> BuildsBuildBetaDetailGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? include = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsBuildBetaDetailGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuildBetaDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildBetaDetailResponse>("/v1/builds/{id}/buildBetaDetail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsBuildBetaDetailGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>DiagnosticSignaturesResponse</returns>
        public DiagnosticSignaturesResponse BuildsDiagnosticSignaturesGetToManyRelated(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<DiagnosticSignaturesResponse> localVarResponse = BuildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of DiagnosticSignaturesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<DiagnosticSignaturesResponse> BuildsDiagnosticSignaturesGetToManyRelatedWithHttpInfo(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsDiagnosticSignaturesGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterDiagnosticType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[diagnosticType]", filterDiagnosticType));
            }
            if (fieldsDiagnosticSignatures != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[diagnosticSignatures]", fieldsDiagnosticSignatures));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DiagnosticSignaturesResponse>("/v1/builds/{id}/diagnosticSignatures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsDiagnosticSignaturesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DiagnosticSignaturesResponse</returns>
        public async System.Threading.Tasks.Task<DiagnosticSignaturesResponse> BuildsDiagnosticSignaturesGetToManyRelatedAsync(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<DiagnosticSignaturesResponse> localVarResponse = await BuildsDiagnosticSignaturesGetToManyRelatedWithHttpInfoAsync(id, filterDiagnosticType, fieldsDiagnosticSignatures, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterDiagnosticType">filter by attribute &#39;diagnosticType&#39; (optional)</param>
        /// <param name="fieldsDiagnosticSignatures">the fields to include for returned resources of type diagnosticSignatures (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DiagnosticSignaturesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<DiagnosticSignaturesResponse>> BuildsDiagnosticSignaturesGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterDiagnosticType = default(List<string>?), List<string>? fieldsDiagnosticSignatures = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsDiagnosticSignaturesGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterDiagnosticType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[diagnosticType]", filterDiagnosticType));
            }
            if (fieldsDiagnosticSignatures != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[diagnosticSignatures]", fieldsDiagnosticSignatures));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DiagnosticSignaturesResponse>("/v1/builds/{id}/diagnosticSignatures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsDiagnosticSignaturesGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>BuildsResponse</returns>
        public BuildsResponse BuildsGetCollection(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildsResponse> localVarResponse = BuildsGetCollectionWithHttpInfo(filterVersion, filterExpired, filterProcessingState, filterBetaAppReviewSubmissionBetaReviewState, filterUsesNonExemptEncryption, filterPreReleaseVersionVersion, filterPreReleaseVersionPlatform, filterBuildAudienceType, filterPreReleaseVersion, filterApp, filterBetaGroups, filterAppStoreVersion, filterId, sort, fieldsBuilds, fieldsPreReleaseVersions, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsApps, fieldsBuildBetaDetails, fieldsAppStoreVersions, fieldsBuildIcons, limit, include, limitBetaBuildLocalizations, limitBetaGroups, limitBuildBundles, limitIcons, limitIndividualTesters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of BuildsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildsResponse> BuildsGetCollectionWithHttpInfo(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?))
        {
            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[version]", filterVersion));
            }
            if (filterExpired != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[expired]", filterExpired));
            }
            if (filterProcessingState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[processingState]", filterProcessingState));
            }
            if (filterBetaAppReviewSubmissionBetaReviewState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[betaAppReviewSubmission.betaReviewState]", filterBetaAppReviewSubmissionBetaReviewState));
            }
            if (filterUsesNonExemptEncryption != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[usesNonExemptEncryption]", filterUsesNonExemptEncryption));
            }
            if (filterPreReleaseVersionVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[preReleaseVersion.version]", filterPreReleaseVersionVersion));
            }
            if (filterPreReleaseVersionPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[preReleaseVersion.platform]", filterPreReleaseVersionPlatform));
            }
            if (filterBuildAudienceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[buildAudienceType]", filterBuildAudienceType));
            }
            if (filterPreReleaseVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[preReleaseVersion]", filterPreReleaseVersion));
            }
            if (filterApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[app]", filterApp));
            }
            if (filterBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[betaGroups]", filterBetaGroups));
            }
            if (filterAppStoreVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersion]", filterAppStoreVersion));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaTesters]", fieldsBetaTesters));
            }
            if (fieldsBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsBetaAppReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBuildBetaDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsBuildIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildIcons]", fieldsBuildIcons));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaBuildLocalizations]", limitBetaBuildLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuildBundles != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[buildBundles]", limitBuildBundles));
            }
            if (limitIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[icons]", limitIcons));
            }
            if (limitIndividualTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[individualTesters]", limitIndividualTesters));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildsResponse>("/v1/builds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildsResponse</returns>
        public async System.Threading.Tasks.Task<BuildsResponse> BuildsGetCollectionAsync(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildsResponse> localVarResponse = await BuildsGetCollectionWithHttpInfoAsync(filterVersion, filterExpired, filterProcessingState, filterBetaAppReviewSubmissionBetaReviewState, filterUsesNonExemptEncryption, filterPreReleaseVersionVersion, filterPreReleaseVersionPlatform, filterBuildAudienceType, filterPreReleaseVersion, filterApp, filterBetaGroups, filterAppStoreVersion, filterId, sort, fieldsBuilds, fieldsPreReleaseVersions, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsApps, fieldsBuildBetaDetails, fieldsAppStoreVersions, fieldsBuildIcons, limit, include, limitBetaBuildLocalizations, limitBetaGroups, limitBuildBundles, limitIcons, limitIndividualTesters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVersion">filter by attribute &#39;version&#39; (optional)</param>
        /// <param name="filterExpired">filter by attribute &#39;expired&#39; (optional)</param>
        /// <param name="filterProcessingState">filter by attribute &#39;processingState&#39; (optional)</param>
        /// <param name="filterBetaAppReviewSubmissionBetaReviewState">filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39; (optional)</param>
        /// <param name="filterUsesNonExemptEncryption">filter by attribute &#39;usesNonExemptEncryption&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionVersion">filter by attribute &#39;preReleaseVersion.version&#39; (optional)</param>
        /// <param name="filterPreReleaseVersionPlatform">filter by attribute &#39;preReleaseVersion.platform&#39; (optional)</param>
        /// <param name="filterBuildAudienceType">filter by attribute &#39;buildAudienceType&#39; (optional)</param>
        /// <param name="filterPreReleaseVersion">filter by id(s) of related &#39;preReleaseVersion&#39; (optional)</param>
        /// <param name="filterApp">filter by id(s) of related &#39;app&#39; (optional)</param>
        /// <param name="filterBetaGroups">filter by id(s) of related &#39;betaGroups&#39; (optional)</param>
        /// <param name="filterAppStoreVersion">filter by id(s) of related &#39;appStoreVersion&#39; (optional)</param>
        /// <param name="filterId">filter by id(s) (optional)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildsResponse>> BuildsGetCollectionWithHttpInfoAsync(List<string>? filterVersion = default(List<string>?), List<string>? filterExpired = default(List<string>?), List<string>? filterProcessingState = default(List<string>?), List<string>? filterBetaAppReviewSubmissionBetaReviewState = default(List<string>?), List<string>? filterUsesNonExemptEncryption = default(List<string>?), List<string>? filterPreReleaseVersionVersion = default(List<string>?), List<string>? filterPreReleaseVersionPlatform = default(List<string>?), List<string>? filterBuildAudienceType = default(List<string>?), List<string>? filterPreReleaseVersion = default(List<string>?), List<string>? filterApp = default(List<string>?), List<string>? filterBetaGroups = default(List<string>?), List<string>? filterAppStoreVersion = default(List<string>?), List<string>? filterId = default(List<string>?), List<string>? sort = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filterVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[version]", filterVersion));
            }
            if (filterExpired != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[expired]", filterExpired));
            }
            if (filterProcessingState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[processingState]", filterProcessingState));
            }
            if (filterBetaAppReviewSubmissionBetaReviewState != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[betaAppReviewSubmission.betaReviewState]", filterBetaAppReviewSubmissionBetaReviewState));
            }
            if (filterUsesNonExemptEncryption != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[usesNonExemptEncryption]", filterUsesNonExemptEncryption));
            }
            if (filterPreReleaseVersionVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[preReleaseVersion.version]", filterPreReleaseVersionVersion));
            }
            if (filterPreReleaseVersionPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[preReleaseVersion.platform]", filterPreReleaseVersionPlatform));
            }
            if (filterBuildAudienceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[buildAudienceType]", filterBuildAudienceType));
            }
            if (filterPreReleaseVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[preReleaseVersion]", filterPreReleaseVersion));
            }
            if (filterApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[app]", filterApp));
            }
            if (filterBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[betaGroups]", filterBetaGroups));
            }
            if (filterAppStoreVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[appStoreVersion]", filterAppStoreVersion));
            }
            if (filterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[id]", filterId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "sort", sort));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaTesters]", fieldsBetaTesters));
            }
            if (fieldsBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsBetaAppReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBuildBetaDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsBuildIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildIcons]", fieldsBuildIcons));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaBuildLocalizations]", limitBetaBuildLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuildBundles != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[buildBundles]", limitBuildBundles));
            }
            if (limitIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[icons]", limitIcons));
            }
            if (limitIndividualTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[individualTesters]", limitIndividualTesters));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildsResponse>("/v1/builds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>BuildResponse</returns>
        public BuildResponse BuildsGetInstance(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildResponse> localVarResponse = BuildsGetInstanceWithHttpInfo(id, fieldsBuilds, fieldsPreReleaseVersions, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsApps, fieldsBuildBetaDetails, fieldsAppStoreVersions, fieldsBuildIcons, include, limitBetaBuildLocalizations, limitBetaGroups, limitBuildBundles, limitIcons, limitIndividualTesters);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of BuildResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildResponse> BuildsGetInstanceWithHttpInfo(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaTesters]", fieldsBetaTesters));
            }
            if (fieldsBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsBetaAppReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBuildBetaDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsBuildIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildIcons]", fieldsBuildIcons));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaBuildLocalizations]", limitBetaBuildLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuildBundles != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[buildBundles]", limitBuildBundles));
            }
            if (limitIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[icons]", limitIcons));
            }
            if (limitIndividualTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[individualTesters]", limitIndividualTesters));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildResponse>("/v1/builds/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildResponse</returns>
        public async System.Threading.Tasks.Task<BuildResponse> BuildsGetInstanceAsync(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildResponse> localVarResponse = await BuildsGetInstanceWithHttpInfoAsync(id, fieldsBuilds, fieldsPreReleaseVersions, fieldsBetaTesters, fieldsBetaBuildLocalizations, fieldsAppEncryptionDeclarations, fieldsBetaAppReviewSubmissions, fieldsApps, fieldsBuildBetaDetails, fieldsAppStoreVersions, fieldsBuildIcons, include, limitBetaBuildLocalizations, limitBetaGroups, limitBuildBundles, limitIcons, limitIndividualTesters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="fieldsBetaBuildLocalizations">the fields to include for returned resources of type betaBuildLocalizations (optional)</param>
        /// <param name="fieldsAppEncryptionDeclarations">the fields to include for returned resources of type appEncryptionDeclarations (optional)</param>
        /// <param name="fieldsBetaAppReviewSubmissions">the fields to include for returned resources of type betaAppReviewSubmissions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsBuildBetaDetails">the fields to include for returned resources of type buildBetaDetails (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitBetaBuildLocalizations">maximum number of related betaBuildLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitBetaGroups">maximum number of related betaGroups returned (when they are included) (optional)</param>
        /// <param name="limitBuildBundles">maximum number of related buildBundles returned (when they are included) (optional)</param>
        /// <param name="limitIcons">maximum number of related icons returned (when they are included) (optional)</param>
        /// <param name="limitIndividualTesters">maximum number of related individualTesters returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildResponse>> BuildsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsPreReleaseVersions = default(List<string>?), List<string>? fieldsBetaTesters = default(List<string>?), List<string>? fieldsBetaBuildLocalizations = default(List<string>?), List<string>? fieldsAppEncryptionDeclarations = default(List<string>?), List<string>? fieldsBetaAppReviewSubmissions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsBuildBetaDetails = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsBuildIcons = default(List<string>?), List<string>? include = default(List<string>?), int? limitBetaBuildLocalizations = default(int?), int? limitBetaGroups = default(int?), int? limitBuildBundles = default(int?), int? limitIcons = default(int?), int? limitIndividualTesters = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }
            if (fieldsBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaTesters]", fieldsBetaTesters));
            }
            if (fieldsBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaBuildLocalizations]", fieldsBetaBuildLocalizations));
            }
            if (fieldsAppEncryptionDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appEncryptionDeclarations]", fieldsAppEncryptionDeclarations));
            }
            if (fieldsBetaAppReviewSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaAppReviewSubmissions]", fieldsBetaAppReviewSubmissions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsBuildBetaDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildBetaDetails]", fieldsBuildBetaDetails));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsBuildIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildIcons]", fieldsBuildIcons));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitBetaBuildLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaBuildLocalizations]", limitBetaBuildLocalizations));
            }
            if (limitBetaGroups != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[betaGroups]", limitBetaGroups));
            }
            if (limitBuildBundles != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[buildBundles]", limitBuildBundles));
            }
            if (limitIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[icons]", limitIcons));
            }
            if (limitIndividualTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[individualTesters]", limitIndividualTesters));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildResponse>("/v1/builds/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BuildIconsWithoutIncludesResponse</returns>
        public BuildIconsWithoutIncludesResponse BuildsIconsGetToManyRelated(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildIconsWithoutIncludesResponse> localVarResponse = BuildsIconsGetToManyRelatedWithHttpInfo(id, fieldsBuildIcons, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BuildIconsWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildIconsWithoutIncludesResponse> BuildsIconsGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIconsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuildIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildIcons]", fieldsBuildIcons));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildIconsWithoutIncludesResponse>("/v1/builds/{id}/icons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIconsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildIconsWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BuildIconsWithoutIncludesResponse> BuildsIconsGetToManyRelatedAsync(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildIconsWithoutIncludesResponse> localVarResponse = await BuildsIconsGetToManyRelatedWithHttpInfoAsync(id, fieldsBuildIcons, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBuildIcons">the fields to include for returned resources of type buildIcons (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildIconsWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildIconsWithoutIncludesResponse>> BuildsIconsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBuildIcons = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIconsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBuildIcons != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[buildIcons]", fieldsBuildIcons));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildIconsWithoutIncludesResponse>("/v1/builds/{id}/icons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIconsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void BuildsIndividualTestersCreateToManyRelationship(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest)
        {
            BuildsIndividualTestersCreateToManyRelationshipWithHttpInfo(id, buildIndividualTestersLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> BuildsIndividualTestersCreateToManyRelationshipWithHttpInfo(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersCreateToManyRelationship");

            // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
            if (buildIndividualTestersLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildIndividualTestersLinkagesRequest' when calling BuildsApi->BuildsIndividualTestersCreateToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildIndividualTestersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/builds/{id}/relationships/individualTesters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuildsIndividualTestersCreateToManyRelationshipAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BuildsIndividualTestersCreateToManyRelationshipWithHttpInfoAsync(id, buildIndividualTestersLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> BuildsIndividualTestersCreateToManyRelationshipWithHttpInfoAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersCreateToManyRelationship");

            // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
            if (buildIndividualTestersLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildIndividualTestersLinkagesRequest' when calling BuildsApi->BuildsIndividualTestersCreateToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildIndividualTestersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/builds/{id}/relationships/individualTesters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void BuildsIndividualTestersDeleteToManyRelationship(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest)
        {
            BuildsIndividualTestersDeleteToManyRelationshipWithHttpInfo(id, buildIndividualTestersLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> BuildsIndividualTestersDeleteToManyRelationshipWithHttpInfo(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersDeleteToManyRelationship");

            // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
            if (buildIndividualTestersLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildIndividualTestersLinkagesRequest' when calling BuildsApi->BuildsIndividualTestersDeleteToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildIndividualTestersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/builds/{id}/relationships/individualTesters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuildsIndividualTestersDeleteToManyRelationshipAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BuildsIndividualTestersDeleteToManyRelationshipWithHttpInfoAsync(id, buildIndividualTestersLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildIndividualTestersLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> BuildsIndividualTestersDeleteToManyRelationshipWithHttpInfoAsync(string id, BuildIndividualTestersLinkagesRequest buildIndividualTestersLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersDeleteToManyRelationship");

            // verify the required parameter 'buildIndividualTestersLinkagesRequest' is set
            if (buildIndividualTestersLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildIndividualTestersLinkagesRequest' when calling BuildsApi->BuildsIndividualTestersDeleteToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildIndividualTestersLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/builds/{id}/relationships/individualTesters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BetaTestersWithoutIncludesResponse</returns>
        public BetaTestersWithoutIncludesResponse BuildsIndividualTestersGetToManyRelated(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaTestersWithoutIncludesResponse> localVarResponse = BuildsIndividualTestersGetToManyRelatedWithHttpInfo(id, fieldsBetaTesters, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BetaTestersWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BetaTestersWithoutIncludesResponse> BuildsIndividualTestersGetToManyRelatedWithHttpInfo(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaTesters]", fieldsBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BetaTestersWithoutIncludesResponse>("/v1/builds/{id}/individualTesters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BetaTestersWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<BetaTestersWithoutIncludesResponse> BuildsIndividualTestersGetToManyRelatedAsync(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BetaTestersWithoutIncludesResponse> localVarResponse = await BuildsIndividualTestersGetToManyRelatedWithHttpInfoAsync(id, fieldsBetaTesters, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsBetaTesters">the fields to include for returned resources of type betaTesters (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BetaTestersWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BetaTestersWithoutIncludesResponse>> BuildsIndividualTestersGetToManyRelatedWithHttpInfoAsync(string id, List<string>? fieldsBetaTesters = default(List<string>?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsBetaTesters != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[betaTesters]", fieldsBetaTesters));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BetaTestersWithoutIncludesResponse>("/v1/builds/{id}/individualTesters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>BuildIndividualTestersLinkagesResponse</returns>
        public BuildIndividualTestersLinkagesResponse BuildsIndividualTestersGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildIndividualTestersLinkagesResponse> localVarResponse = BuildsIndividualTestersGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of BuildIndividualTestersLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildIndividualTestersLinkagesResponse> BuildsIndividualTestersGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BuildIndividualTestersLinkagesResponse>("/v1/builds/{id}/relationships/individualTesters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildIndividualTestersLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<BuildIndividualTestersLinkagesResponse> BuildsIndividualTestersGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildIndividualTestersLinkagesResponse> localVarResponse = await BuildsIndividualTestersGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildIndividualTestersLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildIndividualTestersLinkagesResponse>> BuildsIndividualTestersGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsIndividualTestersGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BuildIndividualTestersLinkagesResponse>("/v1/builds/{id}/relationships/individualTesters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsIndividualTestersGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>XcodeMetrics</returns>
        public XcodeMetrics BuildsPerfPowerMetricsGetToManyRelated(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics> localVarResponse = BuildsPerfPowerMetricsGetToManyRelatedWithHttpInfo(id, filterPlatform, filterMetricType, filterDeviceType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <returns>ApiResponse of XcodeMetrics</returns>
        public AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics> BuildsPerfPowerMetricsGetToManyRelatedWithHttpInfo(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsPerfPowerMetricsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.apple.xcode-metrics+json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterMetricType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[metricType]", filterMetricType));
            }
            if (filterDeviceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[deviceType]", filterDeviceType));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<XcodeMetrics>("/v1/builds/{id}/perfPowerMetrics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsPerfPowerMetricsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of XcodeMetrics</returns>
        public async System.Threading.Tasks.Task<XcodeMetrics> BuildsPerfPowerMetricsGetToManyRelatedAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics> localVarResponse = await BuildsPerfPowerMetricsGetToManyRelatedWithHttpInfoAsync(id, filterPlatform, filterMetricType, filterDeviceType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39; (optional)</param>
        /// <param name="filterMetricType">filter by attribute &#39;metricType&#39; (optional)</param>
        /// <param name="filterDeviceType">filter by attribute &#39;deviceType&#39; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (XcodeMetrics)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<XcodeMetrics>> BuildsPerfPowerMetricsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterPlatform = default(List<string>?), List<string>? filterMetricType = default(List<string>?), List<string>? filterDeviceType = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsPerfPowerMetricsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.apple.xcode-metrics+json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterPlatform != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[platform]", filterPlatform));
            }
            if (filterMetricType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[metricType]", filterMetricType));
            }
            if (filterDeviceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[deviceType]", filterDeviceType));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<XcodeMetrics>("/v1/builds/{id}/perfPowerMetrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsPerfPowerMetricsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <returns>PrereleaseVersionWithoutIncludesResponse</returns>
        public PrereleaseVersionWithoutIncludesResponse BuildsPreReleaseVersionGetToOneRelated(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?))
        {
            AppStoreConnect.Net.Client.ApiResponse<PrereleaseVersionWithoutIncludesResponse> localVarResponse = BuildsPreReleaseVersionGetToOneRelatedWithHttpInfo(id, fieldsPreReleaseVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <returns>ApiResponse of PrereleaseVersionWithoutIncludesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<PrereleaseVersionWithoutIncludesResponse> BuildsPreReleaseVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsPreReleaseVersionGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PrereleaseVersionWithoutIncludesResponse>("/v1/builds/{id}/preReleaseVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsPreReleaseVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PrereleaseVersionWithoutIncludesResponse</returns>
        public async System.Threading.Tasks.Task<PrereleaseVersionWithoutIncludesResponse> BuildsPreReleaseVersionGetToOneRelatedAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<PrereleaseVersionWithoutIncludesResponse> localVarResponse = await BuildsPreReleaseVersionGetToOneRelatedWithHttpInfoAsync(id, fieldsPreReleaseVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsPreReleaseVersions">the fields to include for returned resources of type preReleaseVersions (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PrereleaseVersionWithoutIncludesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<PrereleaseVersionWithoutIncludesResponse>> BuildsPreReleaseVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsPreReleaseVersions = default(List<string>?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsPreReleaseVersionGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsPreReleaseVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[preReleaseVersions]", fieldsPreReleaseVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PrereleaseVersionWithoutIncludesResponse>("/v1/builds/{id}/preReleaseVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsPreReleaseVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <returns>BuildResponse</returns>
        public BuildResponse BuildsUpdateInstance(string id, BuildUpdateRequest buildUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildResponse> localVarResponse = BuildsUpdateInstanceWithHttpInfo(id, buildUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <returns>ApiResponse of BuildResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<BuildResponse> BuildsUpdateInstanceWithHttpInfo(string id, BuildUpdateRequest buildUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsUpdateInstance");

            // verify the required parameter 'buildUpdateRequest' is set
            if (buildUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildUpdateRequest' when calling BuildsApi->BuildsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<BuildResponse>("/v1/builds/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuildResponse</returns>
        public async System.Threading.Tasks.Task<BuildResponse> BuildsUpdateInstanceAsync(string id, BuildUpdateRequest buildUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<BuildResponse> localVarResponse = await BuildsUpdateInstanceWithHttpInfoAsync(id, buildUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="buildUpdateRequest">Build representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuildResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<BuildResponse>> BuildsUpdateInstanceWithHttpInfoAsync(string id, BuildUpdateRequest buildUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling BuildsApi->BuildsUpdateInstance");

            // verify the required parameter 'buildUpdateRequest' is set
            if (buildUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'buildUpdateRequest' when calling BuildsApi->BuildsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = buildUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<BuildResponse>("/v1/builds/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuildsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
