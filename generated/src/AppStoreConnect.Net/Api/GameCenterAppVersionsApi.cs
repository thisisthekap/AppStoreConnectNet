/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterAppVersionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        AppStoreVersionResponse GameCenterAppVersionsAppStoreVersionGetToOneRelated(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        ApiResponse<AppStoreVersionResponse> GameCenterAppVersionsAppStoreVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipWithHttpInfo(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        void GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipWithHttpInfo(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionsResponse</returns>
        GameCenterAppVersionsResponse GameCenterAppVersionsCompatibilityVersionsGetToManyRelated(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionsResponse</returns>
        ApiResponse<GameCenterAppVersionsResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterAppVersionCompatibilityVersionsLinkagesResponse</returns>
        GameCenterAppVersionCompatibilityVersionsLinkagesResponse GameCenterAppVersionsCompatibilityVersionsGetToManyRelationship(string id, int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionCompatibilityVersionsLinkagesResponse</returns>
        ApiResponse<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        GameCenterAppVersionResponse GameCenterAppVersionsCreateInstance(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        ApiResponse<GameCenterAppVersionResponse> GameCenterAppVersionsCreateInstanceWithHttpInfo(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        GameCenterAppVersionResponse GameCenterAppVersionsGetInstance(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        ApiResponse<GameCenterAppVersionResponse> GameCenterAppVersionsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        GameCenterAppVersionResponse GameCenterAppVersionsUpdateInstance(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        ApiResponse<GameCenterAppVersionResponse> GameCenterAppVersionsUpdateInstanceWithHttpInfo(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterAppVersionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        System.Threading.Tasks.Task<AppStoreVersionResponse> GameCenterAppVersionsAppStoreVersionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppStoreVersionResponse>> GameCenterAppVersionsAppStoreVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipWithHttpInfoAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipWithHttpInfoAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionsResponse</returns>
        System.Threading.Tasks.Task<GameCenterAppVersionsResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAppVersionsResponse>> GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionCompatibilityVersionsLinkagesResponse</returns>
        System.Threading.Tasks.Task<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionCompatibilityVersionsLinkagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAppVersionCompatibilityVersionsLinkagesResponse>> GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        System.Threading.Tasks.Task<GameCenterAppVersionResponse> GameCenterAppVersionsCreateInstanceAsync(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAppVersionResponse>> GameCenterAppVersionsCreateInstanceWithHttpInfoAsync(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        System.Threading.Tasks.Task<GameCenterAppVersionResponse> GameCenterAppVersionsGetInstanceAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAppVersionResponse>> GameCenterAppVersionsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        System.Threading.Tasks.Task<GameCenterAppVersionResponse> GameCenterAppVersionsUpdateInstanceAsync(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameCenterAppVersionResponse>> GameCenterAppVersionsUpdateInstanceWithHttpInfoAsync(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameCenterAppVersionsApi : IGameCenterAppVersionsApiSync, IGameCenterAppVersionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameCenterAppVersionsApi : IDisposable, IGameCenterAppVersionsApi
    {
        private AppStoreConnect.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAppVersionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GameCenterAppVersionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAppVersionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GameCenterAppVersionsApi(string basePath)
        {
            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAppVersionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GameCenterAppVersionsApi(AppStoreConnect.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAppVersionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterAppVersionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAppVersionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterAppVersionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                new AppStoreConnect.Net.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAppVersionsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameCenterAppVersionsApi(HttpClient client, AppStoreConnect.Net.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = AppStoreConnect.Net.Client.Configuration.MergeConfigurations(
                AppStoreConnect.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new AppStoreConnect.Net.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAppVersionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GameCenterAppVersionsApi(AppStoreConnect.Net.Client.ISynchronousClient client, AppStoreConnect.Net.Client.IAsynchronousClient asyncClient, AppStoreConnect.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = AppStoreConnect.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public AppStoreConnect.Net.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public AppStoreConnect.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AppStoreConnect.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AppStoreConnect.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>AppStoreVersionResponse</returns>
        public AppStoreVersionResponse GameCenterAppVersionsAppStoreVersionGetToOneRelated(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = GameCenterAppVersionsAppStoreVersionGetToOneRelatedWithHttpInfo(id, fieldsAppStoreVersions, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, include, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of AppStoreVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> GameCenterAppVersionsAppStoreVersionGetToOneRelatedWithHttpInfo(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsAppStoreVersionGetToOneRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AppStoreVersionResponse>("/v1/gameCenterAppVersions/{id}/appStoreVersion", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsAppStoreVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppStoreVersionResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreVersionResponse> GameCenterAppVersionsAppStoreVersionGetToOneRelatedAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse> localVarResponse = await GameCenterAppVersionsAppStoreVersionGetToOneRelatedWithHttpInfoAsync(id, fieldsAppStoreVersions, fieldsApps, fieldsAgeRatingDeclarations, fieldsAppStoreVersionLocalizations, fieldsBuilds, fieldsAppStoreVersionPhasedReleases, fieldsGameCenterAppVersions, fieldsRoutingAppCoverages, fieldsAppStoreReviewDetails, fieldsAppStoreVersionSubmissions, fieldsAppClipDefaultExperiences, fieldsAppStoreVersionExperiments, fieldsAlternativeDistributionPackages, include, limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments, limitAppStoreVersionExperimentsV2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="fieldsApps">the fields to include for returned resources of type apps (optional)</param>
        /// <param name="fieldsAgeRatingDeclarations">the fields to include for returned resources of type ageRatingDeclarations (optional)</param>
        /// <param name="fieldsAppStoreVersionLocalizations">the fields to include for returned resources of type appStoreVersionLocalizations (optional)</param>
        /// <param name="fieldsBuilds">the fields to include for returned resources of type builds (optional)</param>
        /// <param name="fieldsAppStoreVersionPhasedReleases">the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsRoutingAppCoverages">the fields to include for returned resources of type routingAppCoverages (optional)</param>
        /// <param name="fieldsAppStoreReviewDetails">the fields to include for returned resources of type appStoreReviewDetails (optional)</param>
        /// <param name="fieldsAppStoreVersionSubmissions">the fields to include for returned resources of type appStoreVersionSubmissions (optional)</param>
        /// <param name="fieldsAppClipDefaultExperiences">the fields to include for returned resources of type appClipDefaultExperiences (optional)</param>
        /// <param name="fieldsAppStoreVersionExperiments">the fields to include for returned resources of type appStoreVersionExperiments (optional)</param>
        /// <param name="fieldsAlternativeDistributionPackages">the fields to include for returned resources of type alternativeDistributionPackages (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitAppStoreVersionLocalizations">maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)</param>
        /// <param name="limitAppStoreVersionExperiments">maximum number of related appStoreVersionExperiments returned (when they are included) (optional) (deprecated)</param>
        /// <param name="limitAppStoreVersionExperimentsV2">maximum number of related appStoreVersionExperimentsV2 returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppStoreVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<AppStoreVersionResponse>> GameCenterAppVersionsAppStoreVersionGetToOneRelatedWithHttpInfoAsync(string id, List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? fieldsApps = default(List<string>?), List<string>? fieldsAgeRatingDeclarations = default(List<string>?), List<string>? fieldsAppStoreVersionLocalizations = default(List<string>?), List<string>? fieldsBuilds = default(List<string>?), List<string>? fieldsAppStoreVersionPhasedReleases = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsRoutingAppCoverages = default(List<string>?), List<string>? fieldsAppStoreReviewDetails = default(List<string>?), List<string>? fieldsAppStoreVersionSubmissions = default(List<string>?), List<string>? fieldsAppClipDefaultExperiences = default(List<string>?), List<string>? fieldsAppStoreVersionExperiments = default(List<string>?), List<string>? fieldsAlternativeDistributionPackages = default(List<string>?), List<string>? include = default(List<string>?), int? limitAppStoreVersionLocalizations = default(int?), int? limitAppStoreVersionExperiments = default(int?), int? limitAppStoreVersionExperimentsV2 = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsAppStoreVersionGetToOneRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (fieldsApps != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[apps]", fieldsApps));
            }
            if (fieldsAgeRatingDeclarations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[ageRatingDeclarations]", fieldsAgeRatingDeclarations));
            }
            if (fieldsAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionLocalizations]", fieldsAppStoreVersionLocalizations));
            }
            if (fieldsBuilds != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[builds]", fieldsBuilds));
            }
            if (fieldsAppStoreVersionPhasedReleases != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionPhasedReleases]", fieldsAppStoreVersionPhasedReleases));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsRoutingAppCoverages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[routingAppCoverages]", fieldsRoutingAppCoverages));
            }
            if (fieldsAppStoreReviewDetails != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreReviewDetails]", fieldsAppStoreReviewDetails));
            }
            if (fieldsAppStoreVersionSubmissions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionSubmissions]", fieldsAppStoreVersionSubmissions));
            }
            if (fieldsAppClipDefaultExperiences != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appClipDefaultExperiences]", fieldsAppClipDefaultExperiences));
            }
            if (fieldsAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersionExperiments]", fieldsAppStoreVersionExperiments));
            }
            if (fieldsAlternativeDistributionPackages != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[alternativeDistributionPackages]", fieldsAlternativeDistributionPackages));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitAppStoreVersionLocalizations != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations));
            }
            if (limitAppStoreVersionExperiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments));
            }
            if (limitAppStoreVersionExperimentsV2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[appStoreVersionExperimentsV2]", limitAppStoreVersionExperimentsV2));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppStoreVersionResponse>("/v1/gameCenterAppVersions/{id}/appStoreVersion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsAppStoreVersionGetToOneRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest)
        {
            GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipWithHttpInfo(id, gameCenterAppVersionCompatibilityVersionsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipWithHttpInfo(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship");

            // verify the required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' is set
            if (gameCenterAppVersionCompatibilityVersionsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterAppVersionCompatibilityVersionsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipWithHttpInfoAsync(id, gameCenterAppVersionCompatibilityVersionsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipWithHttpInfoAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship");

            // verify the required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' is set
            if (gameCenterAppVersionCompatibilityVersionsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterAppVersionCompatibilityVersionsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns></returns>
        public void GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest)
        {
            GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipWithHttpInfo(id, gameCenterAppVersionCompatibilityVersionsLinkagesRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public AppStoreConnect.Net.Client.ApiResponse<Object> GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipWithHttpInfo(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship");

            // verify the required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' is set
            if (gameCenterAppVersionCompatibilityVersionsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterAppVersionCompatibilityVersionsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipWithHttpInfoAsync(id, gameCenterAppVersionCompatibilityVersionsLinkagesRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionCompatibilityVersionsLinkagesRequest">List of related linkages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<Object>> GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipWithHttpInfoAsync(string id, GameCenterAppVersionCompatibilityVersionsLinkagesRequest gameCenterAppVersionCompatibilityVersionsLinkagesRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship");

            // verify the required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' is set
            if (gameCenterAppVersionCompatibilityVersionsLinkagesRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionCompatibilityVersionsLinkagesRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterAppVersionCompatibilityVersionsLinkagesRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionsResponse</returns>
        public GameCenterAppVersionsResponse GameCenterAppVersionsCompatibilityVersionsGetToManyRelated(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse> localVarResponse = GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedWithHttpInfo(id, filterEnabled, fieldsGameCenterAppVersions, fieldsAppStoreVersions, limit, include, limitCompatibilityVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionsResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedWithHttpInfo(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsGetToManyRelated");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[enabled]", filterEnabled));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAppVersionsResponse>("/v1/gameCenterAppVersions/{id}/compatibilityVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionsResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAppVersionsResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse> localVarResponse = await GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedWithHttpInfoAsync(id, filterEnabled, fieldsGameCenterAppVersions, fieldsAppStoreVersions, limit, include, limitCompatibilityVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="filterEnabled">filter by attribute &#39;enabled&#39; (optional)</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionsResponse>> GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedWithHttpInfoAsync(string id, List<string>? filterEnabled = default(List<string>?), List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), int? limit = default(int?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsGetToManyRelated");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filterEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "filter[enabled]", filterEnabled));
            }
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAppVersionsResponse>("/v1/gameCenterAppVersions/{id}/compatibilityVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsGetToManyRelated", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>GameCenterAppVersionCompatibilityVersionsLinkagesResponse</returns>
        public GameCenterAppVersionCompatibilityVersionsLinkagesResponse GameCenterAppVersionsCompatibilityVersionsGetToManyRelationship(string id, int? limit = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> localVarResponse = GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipWithHttpInfo(id, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionCompatibilityVersionsLinkagesResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipWithHttpInfo(string id, int? limit = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsGetToManyRelationship");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAppVersionCompatibilityVersionsLinkagesResponse>("/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionCompatibilityVersionsLinkagesResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionCompatibilityVersionsLinkagesResponse> localVarResponse = await GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipWithHttpInfoAsync(id, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="limit">maximum resources per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionCompatibilityVersionsLinkagesResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionCompatibilityVersionsLinkagesResponse>> GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipWithHttpInfoAsync(string id, int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCompatibilityVersionsGetToManyRelationship");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAppVersionCompatibilityVersionsLinkagesResponse>("/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCompatibilityVersionsGetToManyRelationship", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        public GameCenterAppVersionResponse GameCenterAppVersionsCreateInstance(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = GameCenterAppVersionsCreateInstanceWithHttpInfo(gameCenterAppVersionCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> GameCenterAppVersionsCreateInstanceWithHttpInfo(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest)
        {
            // verify the required parameter 'gameCenterAppVersionCreateRequest' is set
            if (gameCenterAppVersionCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionCreateRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCreateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterAppVersionCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GameCenterAppVersionResponse>("/v1/gameCenterAppVersions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAppVersionResponse> GameCenterAppVersionsCreateInstanceAsync(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = await GameCenterAppVersionsCreateInstanceWithHttpInfoAsync(gameCenterAppVersionCreateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameCenterAppVersionCreateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse>> GameCenterAppVersionsCreateInstanceWithHttpInfoAsync(GameCenterAppVersionCreateRequest gameCenterAppVersionCreateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'gameCenterAppVersionCreateRequest' is set
            if (gameCenterAppVersionCreateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionCreateRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsCreateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = gameCenterAppVersionCreateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GameCenterAppVersionResponse>("/v1/gameCenterAppVersions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsCreateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        public GameCenterAppVersionResponse GameCenterAppVersionsGetInstance(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = GameCenterAppVersionsGetInstanceWithHttpInfo(id, fieldsGameCenterAppVersions, fieldsAppStoreVersions, include, limitCompatibilityVersions);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> GameCenterAppVersionsGetInstanceWithHttpInfo(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsGetInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GameCenterAppVersionResponse>("/v1/gameCenterAppVersions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAppVersionResponse> GameCenterAppVersionsGetInstanceAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = await GameCenterAppVersionsGetInstanceWithHttpInfoAsync(id, fieldsGameCenterAppVersions, fieldsAppStoreVersions, include, limitCompatibilityVersions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsGameCenterAppVersions">the fields to include for returned resources of type gameCenterAppVersions (optional)</param>
        /// <param name="fieldsAppStoreVersions">the fields to include for returned resources of type appStoreVersions (optional)</param>
        /// <param name="include">comma-separated list of relationships to include (optional)</param>
        /// <param name="limitCompatibilityVersions">maximum number of related compatibilityVersions returned (when they are included) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse>> GameCenterAppVersionsGetInstanceWithHttpInfoAsync(string id, List<string>? fieldsGameCenterAppVersions = default(List<string>?), List<string>? fieldsAppStoreVersions = default(List<string>?), List<string>? include = default(List<string>?), int? limitCompatibilityVersions = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsGetInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (fieldsGameCenterAppVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[gameCenterAppVersions]", fieldsGameCenterAppVersions));
            }
            if (fieldsAppStoreVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "fields[appStoreVersions]", fieldsAppStoreVersions));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("csv", "include", include));
            }
            if (limitCompatibilityVersions != null)
            {
                localVarRequestOptions.QueryParameters.Add(AppStoreConnect.Net.Client.ClientUtils.ParameterToMultiMap("", "limit[compatibilityVersions]", limitCompatibilityVersions));
            }

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GameCenterAppVersionResponse>("/v1/gameCenterAppVersions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsGetInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <returns>GameCenterAppVersionResponse</returns>
        public GameCenterAppVersionResponse GameCenterAppVersionsUpdateInstance(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest)
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = GameCenterAppVersionsUpdateInstanceWithHttpInfo(id, gameCenterAppVersionUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <returns>ApiResponse of GameCenterAppVersionResponse</returns>
        public AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> GameCenterAppVersionsUpdateInstanceWithHttpInfo(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsUpdateInstance");

            // verify the required parameter 'gameCenterAppVersionUpdateRequest' is set
            if (gameCenterAppVersionUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionUpdateRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsUpdateInstance");

            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterAppVersionUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GameCenterAppVersionResponse>("/v1/gameCenterAppVersions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GameCenterAppVersionResponse</returns>
        public async System.Threading.Tasks.Task<GameCenterAppVersionResponse> GameCenterAppVersionsUpdateInstanceAsync(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse> localVarResponse = await GameCenterAppVersionsUpdateInstanceWithHttpInfoAsync(id, gameCenterAppVersionUpdateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="AppStoreConnect.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="gameCenterAppVersionUpdateRequest">GameCenterAppVersion representation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GameCenterAppVersionResponse)</returns>
        public async System.Threading.Tasks.Task<AppStoreConnect.Net.Client.ApiResponse<GameCenterAppVersionResponse>> GameCenterAppVersionsUpdateInstanceWithHttpInfoAsync(string id, GameCenterAppVersionUpdateRequest gameCenterAppVersionUpdateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'id' when calling GameCenterAppVersionsApi->GameCenterAppVersionsUpdateInstance");

            // verify the required parameter 'gameCenterAppVersionUpdateRequest' is set
            if (gameCenterAppVersionUpdateRequest == null)
                throw new AppStoreConnect.Net.Client.ApiException(400, "Missing required parameter 'gameCenterAppVersionUpdateRequest' when calling GameCenterAppVersionsApi->GameCenterAppVersionsUpdateInstance");


            AppStoreConnect.Net.Client.RequestOptions localVarRequestOptions = new AppStoreConnect.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = AppStoreConnect.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", AppStoreConnect.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = gameCenterAppVersionUpdateRequest;

            // authentication (itc-bearer-token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<GameCenterAppVersionResponse>("/v1/gameCenterAppVersions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GameCenterAppVersionsUpdateInstance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
