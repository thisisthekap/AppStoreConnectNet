/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// SubscriptionGracePeriodAttributes
    /// </summary>
    [DataContract(Name = "SubscriptionGracePeriod_attributes")]
    public partial class SubscriptionGracePeriodAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public SubscriptionGracePeriodDuration? Duration { get; set; }
        /// <summary>
        /// Defines RenewalType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RenewalTypeEnum
        {
            /// <summary>
            /// Enum ALLRENEWALS for value: ALL_RENEWALS
            /// </summary>
            [EnumMember(Value = "ALL_RENEWALS")]
            ALLRENEWALS = 1,

            /// <summary>
            /// Enum PAIDTOPAIDONLY for value: PAID_TO_PAID_ONLY
            /// </summary>
            [EnumMember(Value = "PAID_TO_PAID_ONLY")]
            PAIDTOPAIDONLY = 2
        }


        /// <summary>
        /// Gets or Sets RenewalType
        /// </summary>
        [DataMember(Name = "renewalType", EmitDefaultValue = false)]
        public RenewalTypeEnum? RenewalType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionGracePeriodAttributes" /> class.
        /// </summary>
        /// <param name="optIn">optIn.</param>
        /// <param name="sandboxOptIn">sandboxOptIn.</param>
        /// <param name="duration">duration.</param>
        /// <param name="renewalType">renewalType.</param>
        public SubscriptionGracePeriodAttributes(bool optIn = default(bool), bool sandboxOptIn = default(bool), SubscriptionGracePeriodDuration? duration = default(SubscriptionGracePeriodDuration?), RenewalTypeEnum? renewalType = default(RenewalTypeEnum?))
        {
            this.OptIn = optIn;
            this.SandboxOptIn = sandboxOptIn;
            this.Duration = duration;
            this.RenewalType = renewalType;
        }

        /// <summary>
        /// Gets or Sets OptIn
        /// </summary>
        [DataMember(Name = "optIn", EmitDefaultValue = true)]
        public bool OptIn { get; set; }

        /// <summary>
        /// Gets or Sets SandboxOptIn
        /// </summary>
        [DataMember(Name = "sandboxOptIn", EmitDefaultValue = true)]
        public bool SandboxOptIn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionGracePeriodAttributes {\n");
            sb.Append("  OptIn: ").Append(OptIn).Append("\n");
            sb.Append("  SandboxOptIn: ").Append(SandboxOptIn).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  RenewalType: ").Append(RenewalType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
