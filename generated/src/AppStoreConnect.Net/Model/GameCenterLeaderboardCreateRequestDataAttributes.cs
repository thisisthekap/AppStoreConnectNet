/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// GameCenterLeaderboardCreateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "GameCenterLeaderboardCreateRequest_data_attributes")]
    public partial class GameCenterLeaderboardCreateRequestDataAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DefaultFormatter
        /// </summary>
        [DataMember(Name = "defaultFormatter", IsRequired = true, EmitDefaultValue = true)]
        public GameCenterLeaderboardFormatter DefaultFormatter { get; set; }
        /// <summary>
        /// Defines SubmissionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubmissionTypeEnum
        {
            /// <summary>
            /// Enum BESTSCORE for value: BEST_SCORE
            /// </summary>
            [EnumMember(Value = "BEST_SCORE")]
            BESTSCORE = 1,

            /// <summary>
            /// Enum MOSTRECENTSCORE for value: MOST_RECENT_SCORE
            /// </summary>
            [EnumMember(Value = "MOST_RECENT_SCORE")]
            MOSTRECENTSCORE = 2
        }


        /// <summary>
        /// Gets or Sets SubmissionType
        /// </summary>
        [DataMember(Name = "submissionType", IsRequired = true, EmitDefaultValue = true)]
        public SubmissionTypeEnum SubmissionType { get; set; }
        /// <summary>
        /// Defines ScoreSortType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScoreSortTypeEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets ScoreSortType
        /// </summary>
        [DataMember(Name = "scoreSortType", IsRequired = true, EmitDefaultValue = true)]
        public ScoreSortTypeEnum ScoreSortType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardCreateRequestDataAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GameCenterLeaderboardCreateRequestDataAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardCreateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="defaultFormatter">defaultFormatter (required).</param>
        /// <param name="referenceName">referenceName (required).</param>
        /// <param name="vendorIdentifier">vendorIdentifier (required).</param>
        /// <param name="submissionType">submissionType (required).</param>
        /// <param name="scoreSortType">scoreSortType (required).</param>
        /// <param name="scoreRangeStart">scoreRangeStart.</param>
        /// <param name="scoreRangeEnd">scoreRangeEnd.</param>
        /// <param name="recurrenceStartDate">recurrenceStartDate.</param>
        /// <param name="recurrenceDuration">recurrenceDuration.</param>
        /// <param name="recurrenceRule">recurrenceRule.</param>
        public GameCenterLeaderboardCreateRequestDataAttributes(GameCenterLeaderboardFormatter defaultFormatter = default(GameCenterLeaderboardFormatter), string referenceName = default(string), string vendorIdentifier = default(string), SubmissionTypeEnum submissionType = default(SubmissionTypeEnum), ScoreSortTypeEnum scoreSortType = default(ScoreSortTypeEnum), decimal scoreRangeStart = default(decimal), decimal scoreRangeEnd = default(decimal), DateTimeOffset recurrenceStartDate = default(DateTimeOffset), string recurrenceDuration = default(string), string recurrenceRule = default(string))
        {
            this.DefaultFormatter = defaultFormatter;
            // to ensure "referenceName" is required (not null)
            if (referenceName == null)
            {
                throw new ArgumentNullException("referenceName is a required property for GameCenterLeaderboardCreateRequestDataAttributes and cannot be null");
            }
            this.ReferenceName = referenceName;
            // to ensure "vendorIdentifier" is required (not null)
            if (vendorIdentifier == null)
            {
                throw new ArgumentNullException("vendorIdentifier is a required property for GameCenterLeaderboardCreateRequestDataAttributes and cannot be null");
            }
            this.VendorIdentifier = vendorIdentifier;
            this.SubmissionType = submissionType;
            this.ScoreSortType = scoreSortType;
            this.ScoreRangeStart = scoreRangeStart;
            this.ScoreRangeEnd = scoreRangeEnd;
            this.RecurrenceStartDate = recurrenceStartDate;
            this.RecurrenceDuration = recurrenceDuration;
            this.RecurrenceRule = recurrenceRule;
        }

        /// <summary>
        /// Gets or Sets ReferenceName
        /// </summary>
        [DataMember(Name = "referenceName", IsRequired = true, EmitDefaultValue = true)]
        public string ReferenceName { get; set; }

        /// <summary>
        /// Gets or Sets VendorIdentifier
        /// </summary>
        [DataMember(Name = "vendorIdentifier", IsRequired = true, EmitDefaultValue = true)]
        public string VendorIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ScoreRangeStart
        /// </summary>
        [DataMember(Name = "scoreRangeStart", EmitDefaultValue = false)]
        public decimal ScoreRangeStart { get; set; }

        /// <summary>
        /// Gets or Sets ScoreRangeEnd
        /// </summary>
        [DataMember(Name = "scoreRangeEnd", EmitDefaultValue = false)]
        public decimal ScoreRangeEnd { get; set; }

        /// <summary>
        /// Gets or Sets RecurrenceStartDate
        /// </summary>
        [DataMember(Name = "recurrenceStartDate", EmitDefaultValue = false)]
        public DateTimeOffset RecurrenceStartDate { get; set; }

        /// <summary>
        /// Gets or Sets RecurrenceDuration
        /// </summary>
        [DataMember(Name = "recurrenceDuration", EmitDefaultValue = false)]
        public string RecurrenceDuration { get; set; }

        /// <summary>
        /// Gets or Sets RecurrenceRule
        /// </summary>
        [DataMember(Name = "recurrenceRule", EmitDefaultValue = false)]
        public string RecurrenceRule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GameCenterLeaderboardCreateRequestDataAttributes {\n");
            sb.Append("  DefaultFormatter: ").Append(DefaultFormatter).Append("\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  VendorIdentifier: ").Append(VendorIdentifier).Append("\n");
            sb.Append("  SubmissionType: ").Append(SubmissionType).Append("\n");
            sb.Append("  ScoreSortType: ").Append(ScoreSortType).Append("\n");
            sb.Append("  ScoreRangeStart: ").Append(ScoreRangeStart).Append("\n");
            sb.Append("  ScoreRangeEnd: ").Append(ScoreRangeEnd).Append("\n");
            sb.Append("  RecurrenceStartDate: ").Append(RecurrenceStartDate).Append("\n");
            sb.Append("  RecurrenceDuration: ").Append(RecurrenceDuration).Append("\n");
            sb.Append("  RecurrenceRule: ").Append(RecurrenceRule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
