/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// DiagnosticInsight
    /// </summary>
    [DataContract(Name = "DiagnosticInsight")]
    public partial class DiagnosticInsight : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets InsightType
        /// </summary>
        [DataMember(Name = "insightType", EmitDefaultValue = false)]
        public DiagnosticInsightType? InsightType { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public DiagnosticInsightDirection? Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnosticInsight" /> class.
        /// </summary>
        /// <param name="insightType">insightType.</param>
        /// <param name="direction">direction.</param>
        /// <param name="referenceVersions">referenceVersions.</param>
        public DiagnosticInsight(DiagnosticInsightType? insightType = default(DiagnosticInsightType?), DiagnosticInsightDirection? direction = default(DiagnosticInsightDirection?), List<DiagnosticInsightReferenceVersionsInner> referenceVersions = default(List<DiagnosticInsightReferenceVersionsInner>))
        {
            this.InsightType = insightType;
            this.Direction = direction;
            this.ReferenceVersions = referenceVersions;
        }

        /// <summary>
        /// Gets or Sets ReferenceVersions
        /// </summary>
        [DataMember(Name = "referenceVersions", EmitDefaultValue = false)]
        public List<DiagnosticInsightReferenceVersionsInner> ReferenceVersions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiagnosticInsight {\n");
            sb.Append("  InsightType: ").Append(InsightType).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  ReferenceVersions: ").Append(ReferenceVersions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
