/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// AppEventAttributesTerritorySchedulesInner
    /// </summary>
    [DataContract(Name = "AppEvent_attributes_territorySchedules_inner")]
    public partial class AppEventAttributesTerritorySchedulesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppEventAttributesTerritorySchedulesInner" /> class.
        /// </summary>
        /// <param name="territories">territories.</param>
        /// <param name="publishStart">publishStart.</param>
        /// <param name="eventStart">eventStart.</param>
        /// <param name="eventEnd">eventEnd.</param>
        public AppEventAttributesTerritorySchedulesInner(List<string> territories = default(List<string>), DateTimeOffset publishStart = default(DateTimeOffset), DateTimeOffset eventStart = default(DateTimeOffset), DateTimeOffset eventEnd = default(DateTimeOffset))
        {
            this.Territories = territories;
            this.PublishStart = publishStart;
            this.EventStart = eventStart;
            this.EventEnd = eventEnd;
        }

        /// <summary>
        /// Gets or Sets Territories
        /// </summary>
        [DataMember(Name = "territories", EmitDefaultValue = false)]
        public List<string> Territories { get; set; }

        /// <summary>
        /// Gets or Sets PublishStart
        /// </summary>
        [DataMember(Name = "publishStart", EmitDefaultValue = false)]
        public DateTimeOffset PublishStart { get; set; }

        /// <summary>
        /// Gets or Sets EventStart
        /// </summary>
        [DataMember(Name = "eventStart", EmitDefaultValue = false)]
        public DateTimeOffset EventStart { get; set; }

        /// <summary>
        /// Gets or Sets EventEnd
        /// </summary>
        [DataMember(Name = "eventEnd", EmitDefaultValue = false)]
        public DateTimeOffset EventEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppEventAttributesTerritorySchedulesInner {\n");
            sb.Append("  Territories: ").Append(Territories).Append("\n");
            sb.Append("  PublishStart: ").Append(PublishStart).Append("\n");
            sb.Append("  EventStart: ").Append(EventStart).Append("\n");
            sb.Append("  EventEnd: ").Append(EventEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
