/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// AppEventVideoClipAttributes
    /// </summary>
    [DataContract(Name = "AppEventVideoClip_attributes")]
    public partial class AppEventVideoClipAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AppEventAssetType
        /// </summary>
        [DataMember(Name = "appEventAssetType", EmitDefaultValue = false)]
        public AppEventAssetType? AppEventAssetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppEventVideoClipAttributes" /> class.
        /// </summary>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="previewFrameTimeCode">previewFrameTimeCode.</param>
        /// <param name="videoUrl">videoUrl.</param>
        /// <param name="previewImage">previewImage.</param>
        /// <param name="uploadOperations">uploadOperations.</param>
        /// <param name="assetDeliveryState">assetDeliveryState.</param>
        /// <param name="appEventAssetType">appEventAssetType.</param>
        public AppEventVideoClipAttributes(int fileSize = default(int), string fileName = default(string), string previewFrameTimeCode = default(string), string videoUrl = default(string), ImageAsset previewImage = default(ImageAsset), List<UploadOperation> uploadOperations = default(List<UploadOperation>), AppMediaAssetState assetDeliveryState = default(AppMediaAssetState), AppEventAssetType? appEventAssetType = default(AppEventAssetType?))
        {
            this.FileSize = fileSize;
            this.FileName = fileName;
            this.PreviewFrameTimeCode = previewFrameTimeCode;
            this.VideoUrl = videoUrl;
            this.PreviewImage = previewImage;
            this.UploadOperations = uploadOperations;
            this.AssetDeliveryState = assetDeliveryState;
            this.AppEventAssetType = appEventAssetType;
        }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name = "fileSize", EmitDefaultValue = false)]
        public int FileSize { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets PreviewFrameTimeCode
        /// </summary>
        [DataMember(Name = "previewFrameTimeCode", EmitDefaultValue = false)]
        public string PreviewFrameTimeCode { get; set; }

        /// <summary>
        /// Gets or Sets VideoUrl
        /// </summary>
        [DataMember(Name = "videoUrl", EmitDefaultValue = false)]
        public string VideoUrl { get; set; }

        /// <summary>
        /// Gets or Sets PreviewImage
        /// </summary>
        [DataMember(Name = "previewImage", EmitDefaultValue = false)]
        public ImageAsset PreviewImage { get; set; }

        /// <summary>
        /// Gets or Sets UploadOperations
        /// </summary>
        [DataMember(Name = "uploadOperations", EmitDefaultValue = false)]
        public List<UploadOperation> UploadOperations { get; set; }

        /// <summary>
        /// Gets or Sets AssetDeliveryState
        /// </summary>
        [DataMember(Name = "assetDeliveryState", EmitDefaultValue = false)]
        public AppMediaAssetState AssetDeliveryState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppEventVideoClipAttributes {\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  PreviewFrameTimeCode: ").Append(PreviewFrameTimeCode).Append("\n");
            sb.Append("  VideoUrl: ").Append(VideoUrl).Append("\n");
            sb.Append("  PreviewImage: ").Append(PreviewImage).Append("\n");
            sb.Append("  UploadOperations: ").Append(UploadOperations).Append("\n");
            sb.Append("  AssetDeliveryState: ").Append(AssetDeliveryState).Append("\n");
            sb.Append("  AppEventAssetType: ").Append(AppEventAssetType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
