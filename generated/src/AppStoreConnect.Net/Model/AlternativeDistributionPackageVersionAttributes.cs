/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// AlternativeDistributionPackageVersionAttributes
    /// </summary>
    [DataContract(Name = "AlternativeDistributionPackageVersion_attributes")]
    public partial class AlternativeDistributionPackageVersionAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 1,

            /// <summary>
            /// Enum REPLACED for value: REPLACED
            /// </summary>
            [EnumMember(Value = "REPLACED")]
            REPLACED = 2
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlternativeDistributionPackageVersionAttributes" /> class.
        /// </summary>
        /// <param name="url">url.</param>
        /// <param name="urlExpirationDate">urlExpirationDate.</param>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="fileChecksum">fileChecksum.</param>
        /// <param name="state">state.</param>
        public AlternativeDistributionPackageVersionAttributes(string url = default(string), DateTimeOffset urlExpirationDate = default(DateTimeOffset), string varVersion = default(string), string fileChecksum = default(string), StateEnum? state = default(StateEnum?))
        {
            this.Url = url;
            this.UrlExpirationDate = urlExpirationDate;
            this.VarVersion = varVersion;
            this.FileChecksum = fileChecksum;
            this.State = state;
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UrlExpirationDate
        /// </summary>
        [DataMember(Name = "urlExpirationDate", EmitDefaultValue = false)]
        public DateTimeOffset UrlExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets FileChecksum
        /// </summary>
        [DataMember(Name = "fileChecksum", EmitDefaultValue = false)]
        public string FileChecksum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlternativeDistributionPackageVersionAttributes {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UrlExpirationDate: ").Append(UrlExpirationDate).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  FileChecksum: ").Append(FileChecksum).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
