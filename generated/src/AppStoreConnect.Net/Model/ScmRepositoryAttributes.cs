/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// ScmRepositoryAttributes
    /// </summary>
    [DataContract(Name = "ScmRepository_attributes")]
    public partial class ScmRepositoryAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScmRepositoryAttributes" /> class.
        /// </summary>
        /// <param name="lastAccessedDate">lastAccessedDate.</param>
        /// <param name="httpCloneUrl">httpCloneUrl.</param>
        /// <param name="sshCloneUrl">sshCloneUrl.</param>
        /// <param name="ownerName">ownerName.</param>
        /// <param name="repositoryName">repositoryName.</param>
        public ScmRepositoryAttributes(DateTimeOffset lastAccessedDate = default(DateTimeOffset), string httpCloneUrl = default(string), string sshCloneUrl = default(string), string ownerName = default(string), string repositoryName = default(string))
        {
            this.LastAccessedDate = lastAccessedDate;
            this.HttpCloneUrl = httpCloneUrl;
            this.SshCloneUrl = sshCloneUrl;
            this.OwnerName = ownerName;
            this.RepositoryName = repositoryName;
        }

        /// <summary>
        /// Gets or Sets LastAccessedDate
        /// </summary>
        [DataMember(Name = "lastAccessedDate", EmitDefaultValue = false)]
        public DateTimeOffset LastAccessedDate { get; set; }

        /// <summary>
        /// Gets or Sets HttpCloneUrl
        /// </summary>
        [DataMember(Name = "httpCloneUrl", EmitDefaultValue = false)]
        public string HttpCloneUrl { get; set; }

        /// <summary>
        /// Gets or Sets SshCloneUrl
        /// </summary>
        [DataMember(Name = "sshCloneUrl", EmitDefaultValue = false)]
        public string SshCloneUrl { get; set; }

        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name = "ownerName", EmitDefaultValue = false)]
        public string OwnerName { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryName
        /// </summary>
        [DataMember(Name = "repositoryName", EmitDefaultValue = false)]
        public string RepositoryName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScmRepositoryAttributes {\n");
            sb.Append("  LastAccessedDate: ").Append(LastAccessedDate).Append("\n");
            sb.Append("  HttpCloneUrl: ").Append(HttpCloneUrl).Append("\n");
            sb.Append("  SshCloneUrl: ").Append(SshCloneUrl).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  RepositoryName: ").Append(RepositoryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
