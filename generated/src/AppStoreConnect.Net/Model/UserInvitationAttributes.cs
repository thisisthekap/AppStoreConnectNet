/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// UserInvitationAttributes
    /// </summary>
    [DataContract(Name = "UserInvitation_attributes")]
    public partial class UserInvitationAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationAttributes" /> class.
        /// </summary>
        /// <param name="email">email.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="roles">roles.</param>
        /// <param name="allAppsVisible">allAppsVisible.</param>
        /// <param name="provisioningAllowed">provisioningAllowed.</param>
        public UserInvitationAttributes(string email = default(string), string firstName = default(string), string lastName = default(string), DateTimeOffset expirationDate = default(DateTimeOffset), List<UserRole> roles = default(List<UserRole>), bool allAppsVisible = default(bool), bool provisioningAllowed = default(bool))
        {
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.ExpirationDate = expirationDate;
            this.Roles = roles;
            this.AllAppsVisible = allAppsVisible;
            this.ProvisioningAllowed = provisioningAllowed;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expirationDate", EmitDefaultValue = false)]
        public DateTimeOffset ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", EmitDefaultValue = false)]
        public List<UserRole> Roles { get; set; }

        /// <summary>
        /// Gets or Sets AllAppsVisible
        /// </summary>
        [DataMember(Name = "allAppsVisible", EmitDefaultValue = true)]
        public bool AllAppsVisible { get; set; }

        /// <summary>
        /// Gets or Sets ProvisioningAllowed
        /// </summary>
        [DataMember(Name = "provisioningAllowed", EmitDefaultValue = true)]
        public bool ProvisioningAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserInvitationAttributes {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  AllAppsVisible: ").Append(AllAppsVisible).Append("\n");
            sb.Append("  ProvisioningAllowed: ").Append(ProvisioningAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
