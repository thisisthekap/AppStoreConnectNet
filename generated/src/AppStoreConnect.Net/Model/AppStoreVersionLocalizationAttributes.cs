/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// AppStoreVersionLocalizationAttributes
    /// </summary>
    [DataContract(Name = "AppStoreVersionLocalization_attributes")]
    public partial class AppStoreVersionLocalizationAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppStoreVersionLocalizationAttributes" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="locale">locale.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="marketingUrl">marketingUrl.</param>
        /// <param name="promotionalText">promotionalText.</param>
        /// <param name="supportUrl">supportUrl.</param>
        /// <param name="whatsNew">whatsNew.</param>
        public AppStoreVersionLocalizationAttributes(string description = default(string), string locale = default(string), string keywords = default(string), string marketingUrl = default(string), string promotionalText = default(string), string supportUrl = default(string), string whatsNew = default(string))
        {
            this.Description = description;
            this.Locale = locale;
            this.Keywords = keywords;
            this.MarketingUrl = marketingUrl;
            this.PromotionalText = promotionalText;
            this.SupportUrl = supportUrl;
            this.WhatsNew = whatsNew;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets MarketingUrl
        /// </summary>
        [DataMember(Name = "marketingUrl", EmitDefaultValue = false)]
        public string MarketingUrl { get; set; }

        /// <summary>
        /// Gets or Sets PromotionalText
        /// </summary>
        [DataMember(Name = "promotionalText", EmitDefaultValue = false)]
        public string PromotionalText { get; set; }

        /// <summary>
        /// Gets or Sets SupportUrl
        /// </summary>
        [DataMember(Name = "supportUrl", EmitDefaultValue = false)]
        public string SupportUrl { get; set; }

        /// <summary>
        /// Gets or Sets WhatsNew
        /// </summary>
        [DataMember(Name = "whatsNew", EmitDefaultValue = false)]
        public string WhatsNew { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppStoreVersionLocalizationAttributes {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  MarketingUrl: ").Append(MarketingUrl).Append("\n");
            sb.Append("  PromotionalText: ").Append(PromotionalText).Append("\n");
            sb.Append("  SupportUrl: ").Append(SupportUrl).Append("\n");
            sb.Append("  WhatsNew: ").Append(WhatsNew).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
