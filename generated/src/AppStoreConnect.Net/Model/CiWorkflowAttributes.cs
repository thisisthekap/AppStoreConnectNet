/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// CiWorkflowAttributes
    /// </summary>
    [DataContract(Name = "CiWorkflow_attributes")]
    public partial class CiWorkflowAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CiWorkflowAttributes" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="branchStartCondition">branchStartCondition.</param>
        /// <param name="tagStartCondition">tagStartCondition.</param>
        /// <param name="pullRequestStartCondition">pullRequestStartCondition.</param>
        /// <param name="scheduledStartCondition">scheduledStartCondition.</param>
        /// <param name="manualBranchStartCondition">manualBranchStartCondition.</param>
        /// <param name="manualTagStartCondition">manualTagStartCondition.</param>
        /// <param name="manualPullRequestStartCondition">manualPullRequestStartCondition.</param>
        /// <param name="actions">actions.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="isLockedForEditing">isLockedForEditing.</param>
        /// <param name="clean">clean.</param>
        /// <param name="containerFilePath">containerFilePath.</param>
        /// <param name="lastModifiedDate">lastModifiedDate.</param>
        public CiWorkflowAttributes(string name = default(string), string description = default(string), CiBranchStartCondition branchStartCondition = default(CiBranchStartCondition), CiTagStartCondition tagStartCondition = default(CiTagStartCondition), CiPullRequestStartCondition pullRequestStartCondition = default(CiPullRequestStartCondition), CiScheduledStartCondition scheduledStartCondition = default(CiScheduledStartCondition), CiManualBranchStartCondition manualBranchStartCondition = default(CiManualBranchStartCondition), CiManualTagStartCondition manualTagStartCondition = default(CiManualTagStartCondition), CiManualPullRequestStartCondition manualPullRequestStartCondition = default(CiManualPullRequestStartCondition), List<CiAction> actions = default(List<CiAction>), bool isEnabled = default(bool), bool isLockedForEditing = default(bool), bool clean = default(bool), string containerFilePath = default(string), DateTimeOffset lastModifiedDate = default(DateTimeOffset))
        {
            this.Name = name;
            this.Description = description;
            this.BranchStartCondition = branchStartCondition;
            this.TagStartCondition = tagStartCondition;
            this.PullRequestStartCondition = pullRequestStartCondition;
            this.ScheduledStartCondition = scheduledStartCondition;
            this.ManualBranchStartCondition = manualBranchStartCondition;
            this.ManualTagStartCondition = manualTagStartCondition;
            this.ManualPullRequestStartCondition = manualPullRequestStartCondition;
            this.Actions = actions;
            this.IsEnabled = isEnabled;
            this.IsLockedForEditing = isLockedForEditing;
            this.Clean = clean;
            this.ContainerFilePath = containerFilePath;
            this.LastModifiedDate = lastModifiedDate;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets BranchStartCondition
        /// </summary>
        [DataMember(Name = "branchStartCondition", EmitDefaultValue = false)]
        public CiBranchStartCondition BranchStartCondition { get; set; }

        /// <summary>
        /// Gets or Sets TagStartCondition
        /// </summary>
        [DataMember(Name = "tagStartCondition", EmitDefaultValue = false)]
        public CiTagStartCondition TagStartCondition { get; set; }

        /// <summary>
        /// Gets or Sets PullRequestStartCondition
        /// </summary>
        [DataMember(Name = "pullRequestStartCondition", EmitDefaultValue = false)]
        public CiPullRequestStartCondition PullRequestStartCondition { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledStartCondition
        /// </summary>
        [DataMember(Name = "scheduledStartCondition", EmitDefaultValue = false)]
        public CiScheduledStartCondition ScheduledStartCondition { get; set; }

        /// <summary>
        /// Gets or Sets ManualBranchStartCondition
        /// </summary>
        [DataMember(Name = "manualBranchStartCondition", EmitDefaultValue = false)]
        public CiManualBranchStartCondition ManualBranchStartCondition { get; set; }

        /// <summary>
        /// Gets or Sets ManualTagStartCondition
        /// </summary>
        [DataMember(Name = "manualTagStartCondition", EmitDefaultValue = false)]
        public CiManualTagStartCondition ManualTagStartCondition { get; set; }

        /// <summary>
        /// Gets or Sets ManualPullRequestStartCondition
        /// </summary>
        [DataMember(Name = "manualPullRequestStartCondition", EmitDefaultValue = false)]
        public CiManualPullRequestStartCondition ManualPullRequestStartCondition { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<CiAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsLockedForEditing
        /// </summary>
        [DataMember(Name = "isLockedForEditing", EmitDefaultValue = true)]
        public bool IsLockedForEditing { get; set; }

        /// <summary>
        /// Gets or Sets Clean
        /// </summary>
        [DataMember(Name = "clean", EmitDefaultValue = true)]
        public bool Clean { get; set; }

        /// <summary>
        /// Gets or Sets ContainerFilePath
        /// </summary>
        [DataMember(Name = "containerFilePath", EmitDefaultValue = false)]
        public string ContainerFilePath { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDate
        /// </summary>
        [DataMember(Name = "lastModifiedDate", EmitDefaultValue = false)]
        public DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiWorkflowAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BranchStartCondition: ").Append(BranchStartCondition).Append("\n");
            sb.Append("  TagStartCondition: ").Append(TagStartCondition).Append("\n");
            sb.Append("  PullRequestStartCondition: ").Append(PullRequestStartCondition).Append("\n");
            sb.Append("  ScheduledStartCondition: ").Append(ScheduledStartCondition).Append("\n");
            sb.Append("  ManualBranchStartCondition: ").Append(ManualBranchStartCondition).Append("\n");
            sb.Append("  ManualTagStartCondition: ").Append(ManualTagStartCondition).Append("\n");
            sb.Append("  ManualPullRequestStartCondition: ").Append(ManualPullRequestStartCondition).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsLockedForEditing: ").Append(IsLockedForEditing).Append("\n");
            sb.Append("  Clean: ").Append(Clean).Append("\n");
            sb.Append("  ContainerFilePath: ").Append(ContainerFilePath).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
