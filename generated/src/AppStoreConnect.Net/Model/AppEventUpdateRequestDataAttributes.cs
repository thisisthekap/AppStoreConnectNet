/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// AppEventUpdateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "AppEventUpdateRequest_data_attributes")]
    public partial class AppEventUpdateRequestDataAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines Badge
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BadgeEnum
        {
            /// <summary>
            /// Enum LIVEEVENT for value: LIVE_EVENT
            /// </summary>
            [EnumMember(Value = "LIVE_EVENT")]
            LIVEEVENT = 1,

            /// <summary>
            /// Enum PREMIERE for value: PREMIERE
            /// </summary>
            [EnumMember(Value = "PREMIERE")]
            PREMIERE = 2,

            /// <summary>
            /// Enum CHALLENGE for value: CHALLENGE
            /// </summary>
            [EnumMember(Value = "CHALLENGE")]
            CHALLENGE = 3,

            /// <summary>
            /// Enum COMPETITION for value: COMPETITION
            /// </summary>
            [EnumMember(Value = "COMPETITION")]
            COMPETITION = 4,

            /// <summary>
            /// Enum NEWSEASON for value: NEW_SEASON
            /// </summary>
            [EnumMember(Value = "NEW_SEASON")]
            NEWSEASON = 5,

            /// <summary>
            /// Enum MAJORUPDATE for value: MAJOR_UPDATE
            /// </summary>
            [EnumMember(Value = "MAJOR_UPDATE")]
            MAJORUPDATE = 6,

            /// <summary>
            /// Enum SPECIALEVENT for value: SPECIAL_EVENT
            /// </summary>
            [EnumMember(Value = "SPECIAL_EVENT")]
            SPECIALEVENT = 7
        }


        /// <summary>
        /// Gets or Sets Badge
        /// </summary>
        [DataMember(Name = "badge", EmitDefaultValue = false)]
        public BadgeEnum? Badge { get; set; }
        /// <summary>
        /// Defines Priority
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum HIGH for value: HIGH
            /// </summary>
            [EnumMember(Value = "HIGH")]
            HIGH = 1,

            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 2
        }


        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Defines Purpose
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PurposeEnum
        {
            /// <summary>
            /// Enum APPROPRIATEFORALLUSERS for value: APPROPRIATE_FOR_ALL_USERS
            /// </summary>
            [EnumMember(Value = "APPROPRIATE_FOR_ALL_USERS")]
            APPROPRIATEFORALLUSERS = 1,

            /// <summary>
            /// Enum ATTRACTNEWUSERS for value: ATTRACT_NEW_USERS
            /// </summary>
            [EnumMember(Value = "ATTRACT_NEW_USERS")]
            ATTRACTNEWUSERS = 2,

            /// <summary>
            /// Enum KEEPACTIVEUSERSINFORMED for value: KEEP_ACTIVE_USERS_INFORMED
            /// </summary>
            [EnumMember(Value = "KEEP_ACTIVE_USERS_INFORMED")]
            KEEPACTIVEUSERSINFORMED = 3,

            /// <summary>
            /// Enum BRINGBACKLAPSEDUSERS for value: BRING_BACK_LAPSED_USERS
            /// </summary>
            [EnumMember(Value = "BRING_BACK_LAPSED_USERS")]
            BRINGBACKLAPSEDUSERS = 4
        }


        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public PurposeEnum? Purpose { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppEventUpdateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="referenceName">referenceName.</param>
        /// <param name="badge">badge.</param>
        /// <param name="deepLink">deepLink.</param>
        /// <param name="purchaseRequirement">purchaseRequirement.</param>
        /// <param name="primaryLocale">primaryLocale.</param>
        /// <param name="priority">priority.</param>
        /// <param name="purpose">purpose.</param>
        /// <param name="territorySchedules">territorySchedules.</param>
        public AppEventUpdateRequestDataAttributes(string referenceName = default(string), BadgeEnum? badge = default(BadgeEnum?), string deepLink = default(string), string purchaseRequirement = default(string), string primaryLocale = default(string), PriorityEnum? priority = default(PriorityEnum?), PurposeEnum? purpose = default(PurposeEnum?), List<AppEventAttributesTerritorySchedulesInner> territorySchedules = default(List<AppEventAttributesTerritorySchedulesInner>))
        {
            this.ReferenceName = referenceName;
            this.Badge = badge;
            this.DeepLink = deepLink;
            this.PurchaseRequirement = purchaseRequirement;
            this.PrimaryLocale = primaryLocale;
            this.Priority = priority;
            this.Purpose = purpose;
            this.TerritorySchedules = territorySchedules;
        }

        /// <summary>
        /// Gets or Sets ReferenceName
        /// </summary>
        [DataMember(Name = "referenceName", EmitDefaultValue = false)]
        public string ReferenceName { get; set; }

        /// <summary>
        /// Gets or Sets DeepLink
        /// </summary>
        [DataMember(Name = "deepLink", EmitDefaultValue = false)]
        public string DeepLink { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseRequirement
        /// </summary>
        [DataMember(Name = "purchaseRequirement", EmitDefaultValue = false)]
        public string PurchaseRequirement { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryLocale
        /// </summary>
        [DataMember(Name = "primaryLocale", EmitDefaultValue = false)]
        public string PrimaryLocale { get; set; }

        /// <summary>
        /// Gets or Sets TerritorySchedules
        /// </summary>
        [DataMember(Name = "territorySchedules", EmitDefaultValue = false)]
        public List<AppEventAttributesTerritorySchedulesInner> TerritorySchedules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppEventUpdateRequestDataAttributes {\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  Badge: ").Append(Badge).Append("\n");
            sb.Append("  DeepLink: ").Append(DeepLink).Append("\n");
            sb.Append("  PurchaseRequirement: ").Append(PurchaseRequirement).Append("\n");
            sb.Append("  PrimaryLocale: ").Append(PrimaryLocale).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  TerritorySchedules: ").Append(TerritorySchedules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
