/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// GameCenterAchievementAttributes
    /// </summary>
    [DataContract(Name = "GameCenterAchievement_attributes")]
    public partial class GameCenterAchievementAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterAchievementAttributes" /> class.
        /// </summary>
        /// <param name="referenceName">referenceName.</param>
        /// <param name="vendorIdentifier">vendorIdentifier.</param>
        /// <param name="points">points.</param>
        /// <param name="showBeforeEarned">showBeforeEarned.</param>
        /// <param name="repeatable">repeatable.</param>
        /// <param name="archived">archived.</param>
        public GameCenterAchievementAttributes(string referenceName = default(string), string vendorIdentifier = default(string), int points = default(int), bool showBeforeEarned = default(bool), bool repeatable = default(bool), bool archived = default(bool))
        {
            this.ReferenceName = referenceName;
            this.VendorIdentifier = vendorIdentifier;
            this.Points = points;
            this.ShowBeforeEarned = showBeforeEarned;
            this.Repeatable = repeatable;
            this.Archived = archived;
        }

        /// <summary>
        /// Gets or Sets ReferenceName
        /// </summary>
        [DataMember(Name = "referenceName", EmitDefaultValue = false)]
        public string ReferenceName { get; set; }

        /// <summary>
        /// Gets or Sets VendorIdentifier
        /// </summary>
        [DataMember(Name = "vendorIdentifier", EmitDefaultValue = false)]
        public string VendorIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "points", EmitDefaultValue = false)]
        public int Points { get; set; }

        /// <summary>
        /// Gets or Sets ShowBeforeEarned
        /// </summary>
        [DataMember(Name = "showBeforeEarned", EmitDefaultValue = true)]
        public bool ShowBeforeEarned { get; set; }

        /// <summary>
        /// Gets or Sets Repeatable
        /// </summary>
        [DataMember(Name = "repeatable", EmitDefaultValue = true)]
        public bool Repeatable { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GameCenterAchievementAttributes {\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  VendorIdentifier: ").Append(VendorIdentifier).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  ShowBeforeEarned: ").Append(ShowBeforeEarned).Append("\n");
            sb.Append("  Repeatable: ").Append(Repeatable).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
