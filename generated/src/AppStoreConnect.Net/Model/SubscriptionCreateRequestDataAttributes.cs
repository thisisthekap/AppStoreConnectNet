/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// SubscriptionCreateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "SubscriptionCreateRequest_data_attributes")]
    public partial class SubscriptionCreateRequestDataAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines SubscriptionPeriod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubscriptionPeriodEnum
        {
            /// <summary>
            /// Enum ONEWEEK for value: ONE_WEEK
            /// </summary>
            [EnumMember(Value = "ONE_WEEK")]
            ONEWEEK = 1,

            /// <summary>
            /// Enum ONEMONTH for value: ONE_MONTH
            /// </summary>
            [EnumMember(Value = "ONE_MONTH")]
            ONEMONTH = 2,

            /// <summary>
            /// Enum TWOMONTHS for value: TWO_MONTHS
            /// </summary>
            [EnumMember(Value = "TWO_MONTHS")]
            TWOMONTHS = 3,

            /// <summary>
            /// Enum THREEMONTHS for value: THREE_MONTHS
            /// </summary>
            [EnumMember(Value = "THREE_MONTHS")]
            THREEMONTHS = 4,

            /// <summary>
            /// Enum SIXMONTHS for value: SIX_MONTHS
            /// </summary>
            [EnumMember(Value = "SIX_MONTHS")]
            SIXMONTHS = 5,

            /// <summary>
            /// Enum ONEYEAR for value: ONE_YEAR
            /// </summary>
            [EnumMember(Value = "ONE_YEAR")]
            ONEYEAR = 6
        }


        /// <summary>
        /// Gets or Sets SubscriptionPeriod
        /// </summary>
        [DataMember(Name = "subscriptionPeriod", EmitDefaultValue = false)]
        public SubscriptionPeriodEnum? SubscriptionPeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionCreateRequestDataAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionCreateRequestDataAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionCreateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="productId">productId (required).</param>
        /// <param name="familySharable">familySharable.</param>
        /// <param name="subscriptionPeriod">subscriptionPeriod.</param>
        /// <param name="reviewNote">reviewNote.</param>
        /// <param name="groupLevel">groupLevel.</param>
        public SubscriptionCreateRequestDataAttributes(string name = default(string), string productId = default(string), bool familySharable = default(bool), SubscriptionPeriodEnum? subscriptionPeriod = default(SubscriptionPeriodEnum?), string reviewNote = default(string), int groupLevel = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SubscriptionCreateRequestDataAttributes and cannot be null");
            }
            this.Name = name;
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for SubscriptionCreateRequestDataAttributes and cannot be null");
            }
            this.ProductId = productId;
            this.FamilySharable = familySharable;
            this.SubscriptionPeriod = subscriptionPeriod;
            this.ReviewNote = reviewNote;
            this.GroupLevel = groupLevel;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets FamilySharable
        /// </summary>
        [DataMember(Name = "familySharable", EmitDefaultValue = true)]
        public bool FamilySharable { get; set; }

        /// <summary>
        /// Gets or Sets ReviewNote
        /// </summary>
        [DataMember(Name = "reviewNote", EmitDefaultValue = false)]
        public string ReviewNote { get; set; }

        /// <summary>
        /// Gets or Sets GroupLevel
        /// </summary>
        [DataMember(Name = "groupLevel", EmitDefaultValue = false)]
        public int GroupLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionCreateRequestDataAttributes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  FamilySharable: ").Append(FamilySharable).Append("\n");
            sb.Append("  SubscriptionPeriod: ").Append(SubscriptionPeriod).Append("\n");
            sb.Append("  ReviewNote: ").Append(ReviewNote).Append("\n");
            sb.Append("  GroupLevel: ").Append(GroupLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
