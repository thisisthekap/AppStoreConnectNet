/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// GameCenterLeaderboardLocalizationCreateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "GameCenterLeaderboardLocalizationCreateRequest_data_attributes")]
    public partial class GameCenterLeaderboardLocalizationCreateRequestDataAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FormatterOverride
        /// </summary>
        [DataMember(Name = "formatterOverride", EmitDefaultValue = false)]
        public GameCenterLeaderboardFormatter? FormatterOverride { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardLocalizationCreateRequestDataAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GameCenterLeaderboardLocalizationCreateRequestDataAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GameCenterLeaderboardLocalizationCreateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="locale">locale (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="formatterOverride">formatterOverride.</param>
        /// <param name="formatterSuffix">formatterSuffix.</param>
        /// <param name="formatterSuffixSingular">formatterSuffixSingular.</param>
        public GameCenterLeaderboardLocalizationCreateRequestDataAttributes(string locale = default(string), string name = default(string), GameCenterLeaderboardFormatter? formatterOverride = default(GameCenterLeaderboardFormatter?), string formatterSuffix = default(string), string formatterSuffixSingular = default(string))
        {
            // to ensure "locale" is required (not null)
            if (locale == null)
            {
                throw new ArgumentNullException("locale is a required property for GameCenterLeaderboardLocalizationCreateRequestDataAttributes and cannot be null");
            }
            this.Locale = locale;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GameCenterLeaderboardLocalizationCreateRequestDataAttributes and cannot be null");
            }
            this.Name = name;
            this.FormatterOverride = formatterOverride;
            this.FormatterSuffix = formatterSuffix;
            this.FormatterSuffixSingular = formatterSuffixSingular;
        }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", IsRequired = true, EmitDefaultValue = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FormatterSuffix
        /// </summary>
        [DataMember(Name = "formatterSuffix", EmitDefaultValue = false)]
        public string FormatterSuffix { get; set; }

        /// <summary>
        /// Gets or Sets FormatterSuffixSingular
        /// </summary>
        [DataMember(Name = "formatterSuffixSingular", EmitDefaultValue = false)]
        public string FormatterSuffixSingular { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GameCenterLeaderboardLocalizationCreateRequestDataAttributes {\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FormatterOverride: ").Append(FormatterOverride).Append("\n");
            sb.Append("  FormatterSuffix: ").Append(FormatterSuffix).Append("\n");
            sb.Append("  FormatterSuffixSingular: ").Append(FormatterSuffixSingular).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
