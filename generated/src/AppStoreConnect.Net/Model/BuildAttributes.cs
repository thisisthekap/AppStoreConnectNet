/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// BuildAttributes
    /// </summary>
    [DataContract(Name = "Build_attributes")]
    public partial class BuildAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines ProcessingState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessingStateEnum
        {
            /// <summary>
            /// Enum PROCESSING for value: PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING = 1,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2,

            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 3,

            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 4
        }


        /// <summary>
        /// Gets or Sets ProcessingState
        /// </summary>
        [DataMember(Name = "processingState", EmitDefaultValue = false)]
        public ProcessingStateEnum? ProcessingState { get; set; }

        /// <summary>
        /// Gets or Sets BuildAudienceType
        /// </summary>
        [DataMember(Name = "buildAudienceType", EmitDefaultValue = false)]
        public BuildAudienceType? BuildAudienceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildAttributes" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion.</param>
        /// <param name="uploadedDate">uploadedDate.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="expired">expired.</param>
        /// <param name="minOsVersion">minOsVersion.</param>
        /// <param name="lsMinimumSystemVersion">lsMinimumSystemVersion.</param>
        /// <param name="computedMinMacOsVersion">computedMinMacOsVersion.</param>
        /// <param name="iconAssetToken">iconAssetToken.</param>
        /// <param name="processingState">processingState.</param>
        /// <param name="buildAudienceType">buildAudienceType.</param>
        /// <param name="usesNonExemptEncryption">usesNonExemptEncryption.</param>
        public BuildAttributes(string varVersion = default(string), DateTimeOffset uploadedDate = default(DateTimeOffset), DateTimeOffset expirationDate = default(DateTimeOffset), bool expired = default(bool), string minOsVersion = default(string), string lsMinimumSystemVersion = default(string), string computedMinMacOsVersion = default(string), ImageAsset iconAssetToken = default(ImageAsset), ProcessingStateEnum? processingState = default(ProcessingStateEnum?), BuildAudienceType? buildAudienceType = default(BuildAudienceType?), bool usesNonExemptEncryption = default(bool))
        {
            this.VarVersion = varVersion;
            this.UploadedDate = uploadedDate;
            this.ExpirationDate = expirationDate;
            this.Expired = expired;
            this.MinOsVersion = minOsVersion;
            this.LsMinimumSystemVersion = lsMinimumSystemVersion;
            this.ComputedMinMacOsVersion = computedMinMacOsVersion;
            this.IconAssetToken = iconAssetToken;
            this.ProcessingState = processingState;
            this.BuildAudienceType = buildAudienceType;
            this.UsesNonExemptEncryption = usesNonExemptEncryption;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets UploadedDate
        /// </summary>
        [DataMember(Name = "uploadedDate", EmitDefaultValue = false)]
        public DateTimeOffset UploadedDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expirationDate", EmitDefaultValue = false)]
        public DateTimeOffset ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name = "expired", EmitDefaultValue = true)]
        public bool Expired { get; set; }

        /// <summary>
        /// Gets or Sets MinOsVersion
        /// </summary>
        [DataMember(Name = "minOsVersion", EmitDefaultValue = false)]
        public string MinOsVersion { get; set; }

        /// <summary>
        /// Gets or Sets LsMinimumSystemVersion
        /// </summary>
        [DataMember(Name = "lsMinimumSystemVersion", EmitDefaultValue = false)]
        public string LsMinimumSystemVersion { get; set; }

        /// <summary>
        /// Gets or Sets ComputedMinMacOsVersion
        /// </summary>
        [DataMember(Name = "computedMinMacOsVersion", EmitDefaultValue = false)]
        public string ComputedMinMacOsVersion { get; set; }

        /// <summary>
        /// Gets or Sets IconAssetToken
        /// </summary>
        [DataMember(Name = "iconAssetToken", EmitDefaultValue = false)]
        public ImageAsset IconAssetToken { get; set; }

        /// <summary>
        /// Gets or Sets UsesNonExemptEncryption
        /// </summary>
        [DataMember(Name = "usesNonExemptEncryption", EmitDefaultValue = true)]
        public bool UsesNonExemptEncryption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuildAttributes {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  UploadedDate: ").Append(UploadedDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  MinOsVersion: ").Append(MinOsVersion).Append("\n");
            sb.Append("  LsMinimumSystemVersion: ").Append(LsMinimumSystemVersion).Append("\n");
            sb.Append("  ComputedMinMacOsVersion: ").Append(ComputedMinMacOsVersion).Append("\n");
            sb.Append("  IconAssetToken: ").Append(IconAssetToken).Append("\n");
            sb.Append("  ProcessingState: ").Append(ProcessingState).Append("\n");
            sb.Append("  BuildAudienceType: ").Append(BuildAudienceType).Append("\n");
            sb.Append("  UsesNonExemptEncryption: ").Append(UsesNonExemptEncryption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
