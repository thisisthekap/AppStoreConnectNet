/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// SubscriptionIntroductoryOfferAttributes
    /// </summary>
    [DataContract(Name = "SubscriptionIntroductoryOffer_attributes")]
    public partial class SubscriptionIntroductoryOfferAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public SubscriptionOfferDuration? Duration { get; set; }

        /// <summary>
        /// Gets or Sets OfferMode
        /// </summary>
        [DataMember(Name = "offerMode", EmitDefaultValue = false)]
        public SubscriptionOfferMode? OfferMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionIntroductoryOfferAttributes" /> class.
        /// </summary>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="duration">duration.</param>
        /// <param name="offerMode">offerMode.</param>
        /// <param name="numberOfPeriods">numberOfPeriods.</param>
        public SubscriptionIntroductoryOfferAttributes(DateOnly startDate = default(DateOnly), DateOnly endDate = default(DateOnly), SubscriptionOfferDuration? duration = default(SubscriptionOfferDuration?), SubscriptionOfferMode? offerMode = default(SubscriptionOfferMode?), int numberOfPeriods = default(int))
        {
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Duration = duration;
            this.OfferMode = offerMode;
            this.NumberOfPeriods = numberOfPeriods;
        }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateOnly StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateOnly EndDate { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPeriods
        /// </summary>
        [DataMember(Name = "numberOfPeriods", EmitDefaultValue = false)]
        public int NumberOfPeriods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionIntroductoryOfferAttributes {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  OfferMode: ").Append(OfferMode).Append("\n");
            sb.Append("  NumberOfPeriods: ").Append(NumberOfPeriods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
