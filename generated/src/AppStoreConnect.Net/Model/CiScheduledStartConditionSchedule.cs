/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// CiScheduledStartConditionSchedule
    /// </summary>
    [DataContract(Name = "CiScheduledStartCondition_schedule")]
    public partial class CiScheduledStartConditionSchedule : IValidatableObject
    {
        /// <summary>
        /// Defines Frequency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum WEEKLY for value: WEEKLY
            /// </summary>
            [EnumMember(Value = "WEEKLY")]
            WEEKLY = 1,

            /// <summary>
            /// Enum DAILY for value: DAILY
            /// </summary>
            [EnumMember(Value = "DAILY")]
            DAILY = 2,

            /// <summary>
            /// Enum HOURLY for value: HOURLY
            /// </summary>
            [EnumMember(Value = "HOURLY")]
            HOURLY = 3
        }


        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Defines Days
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DaysEnum
        {
            /// <summary>
            /// Enum SUNDAY for value: SUNDAY
            /// </summary>
            [EnumMember(Value = "SUNDAY")]
            SUNDAY = 1,

            /// <summary>
            /// Enum MONDAY for value: MONDAY
            /// </summary>
            [EnumMember(Value = "MONDAY")]
            MONDAY = 2,

            /// <summary>
            /// Enum TUESDAY for value: TUESDAY
            /// </summary>
            [EnumMember(Value = "TUESDAY")]
            TUESDAY = 3,

            /// <summary>
            /// Enum WEDNESDAY for value: WEDNESDAY
            /// </summary>
            [EnumMember(Value = "WEDNESDAY")]
            WEDNESDAY = 4,

            /// <summary>
            /// Enum THURSDAY for value: THURSDAY
            /// </summary>
            [EnumMember(Value = "THURSDAY")]
            THURSDAY = 5,

            /// <summary>
            /// Enum FRIDAY for value: FRIDAY
            /// </summary>
            [EnumMember(Value = "FRIDAY")]
            FRIDAY = 6,

            /// <summary>
            /// Enum SATURDAY for value: SATURDAY
            /// </summary>
            [EnumMember(Value = "SATURDAY")]
            SATURDAY = 7
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CiScheduledStartConditionSchedule" /> class.
        /// </summary>
        /// <param name="frequency">frequency.</param>
        /// <param name="days">days.</param>
        /// <param name="hour">hour.</param>
        /// <param name="minute">minute.</param>
        /// <param name="timezone">timezone.</param>
        public CiScheduledStartConditionSchedule(FrequencyEnum? frequency = default(FrequencyEnum?), List<DaysEnum> days = default(List<DaysEnum>), int hour = default(int), int minute = default(int), string timezone = default(string))
        {
            this.Frequency = frequency;
            this.Days = days;
            this.Hour = hour;
            this.Minute = minute;
            this.Timezone = timezone;
        }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public List<CiScheduledStartConditionSchedule.DaysEnum> Days { get; set; }

        /// <summary>
        /// Gets or Sets Hour
        /// </summary>
        [DataMember(Name = "hour", EmitDefaultValue = false)]
        public int Hour { get; set; }

        /// <summary>
        /// Gets or Sets Minute
        /// </summary>
        [DataMember(Name = "minute", EmitDefaultValue = false)]
        public int Minute { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiScheduledStartConditionSchedule {\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
