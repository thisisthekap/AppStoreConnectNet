/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// AgeRatingDeclarationAttributes
    /// </summary>
    [DataContract(Name = "AgeRatingDeclaration_attributes")]
    public partial class AgeRatingDeclarationAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines AlcoholTobaccoOrDrugUseOrReferences
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlcoholTobaccoOrDrugUseOrReferencesEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets AlcoholTobaccoOrDrugUseOrReferences
        /// </summary>
        [DataMember(Name = "alcoholTobaccoOrDrugUseOrReferences", EmitDefaultValue = false)]
        public AlcoholTobaccoOrDrugUseOrReferencesEnum? AlcoholTobaccoOrDrugUseOrReferences { get; set; }
        /// <summary>
        /// Defines Contests
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContestsEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets Contests
        /// </summary>
        [DataMember(Name = "contests", EmitDefaultValue = false)]
        public ContestsEnum? Contests { get; set; }
        /// <summary>
        /// Defines GamblingSimulated
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GamblingSimulatedEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets GamblingSimulated
        /// </summary>
        [DataMember(Name = "gamblingSimulated", EmitDefaultValue = false)]
        public GamblingSimulatedEnum? GamblingSimulated { get; set; }

        /// <summary>
        /// Gets or Sets KidsAgeBand
        /// </summary>
        [DataMember(Name = "kidsAgeBand", EmitDefaultValue = false)]
        public KidsAgeBand? KidsAgeBand { get; set; }
        /// <summary>
        /// Defines MedicalOrTreatmentInformation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MedicalOrTreatmentInformationEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets MedicalOrTreatmentInformation
        /// </summary>
        [DataMember(Name = "medicalOrTreatmentInformation", EmitDefaultValue = false)]
        public MedicalOrTreatmentInformationEnum? MedicalOrTreatmentInformation { get; set; }
        /// <summary>
        /// Defines ProfanityOrCrudeHumor
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProfanityOrCrudeHumorEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets ProfanityOrCrudeHumor
        /// </summary>
        [DataMember(Name = "profanityOrCrudeHumor", EmitDefaultValue = false)]
        public ProfanityOrCrudeHumorEnum? ProfanityOrCrudeHumor { get; set; }
        /// <summary>
        /// Defines SexualContentGraphicAndNudity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexualContentGraphicAndNudityEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets SexualContentGraphicAndNudity
        /// </summary>
        [DataMember(Name = "sexualContentGraphicAndNudity", EmitDefaultValue = false)]
        public SexualContentGraphicAndNudityEnum? SexualContentGraphicAndNudity { get; set; }
        /// <summary>
        /// Defines SexualContentOrNudity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexualContentOrNudityEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets SexualContentOrNudity
        /// </summary>
        [DataMember(Name = "sexualContentOrNudity", EmitDefaultValue = false)]
        public SexualContentOrNudityEnum? SexualContentOrNudity { get; set; }
        /// <summary>
        /// Defines HorrorOrFearThemes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HorrorOrFearThemesEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets HorrorOrFearThemes
        /// </summary>
        [DataMember(Name = "horrorOrFearThemes", EmitDefaultValue = false)]
        public HorrorOrFearThemesEnum? HorrorOrFearThemes { get; set; }
        /// <summary>
        /// Defines MatureOrSuggestiveThemes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatureOrSuggestiveThemesEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets MatureOrSuggestiveThemes
        /// </summary>
        [DataMember(Name = "matureOrSuggestiveThemes", EmitDefaultValue = false)]
        public MatureOrSuggestiveThemesEnum? MatureOrSuggestiveThemes { get; set; }
        /// <summary>
        /// Defines ViolenceCartoonOrFantasy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViolenceCartoonOrFantasyEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets ViolenceCartoonOrFantasy
        /// </summary>
        [DataMember(Name = "violenceCartoonOrFantasy", EmitDefaultValue = false)]
        public ViolenceCartoonOrFantasyEnum? ViolenceCartoonOrFantasy { get; set; }
        /// <summary>
        /// Defines ViolenceRealisticProlongedGraphicOrSadistic
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViolenceRealisticProlongedGraphicOrSadisticEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets ViolenceRealisticProlongedGraphicOrSadistic
        /// </summary>
        [DataMember(Name = "violenceRealisticProlongedGraphicOrSadistic", EmitDefaultValue = false)]
        public ViolenceRealisticProlongedGraphicOrSadisticEnum? ViolenceRealisticProlongedGraphicOrSadistic { get; set; }
        /// <summary>
        /// Defines ViolenceRealistic
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViolenceRealisticEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum INFREQUENTORMILD for value: INFREQUENT_OR_MILD
            /// </summary>
            [EnumMember(Value = "INFREQUENT_OR_MILD")]
            INFREQUENTORMILD = 2,

            /// <summary>
            /// Enum FREQUENTORINTENSE for value: FREQUENT_OR_INTENSE
            /// </summary>
            [EnumMember(Value = "FREQUENT_OR_INTENSE")]
            FREQUENTORINTENSE = 3
        }


        /// <summary>
        /// Gets or Sets ViolenceRealistic
        /// </summary>
        [DataMember(Name = "violenceRealistic", EmitDefaultValue = false)]
        public ViolenceRealisticEnum? ViolenceRealistic { get; set; }
        /// <summary>
        /// Defines AgeRatingOverride
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AgeRatingOverrideEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum SEVENTEENPLUS for value: SEVENTEEN_PLUS
            /// </summary>
            [EnumMember(Value = "SEVENTEEN_PLUS")]
            SEVENTEENPLUS = 2,

            /// <summary>
            /// Enum UNRATED for value: UNRATED
            /// </summary>
            [EnumMember(Value = "UNRATED")]
            UNRATED = 3
        }


        /// <summary>
        /// Gets or Sets AgeRatingOverride
        /// </summary>
        [DataMember(Name = "ageRatingOverride", EmitDefaultValue = false)]
        public AgeRatingOverrideEnum? AgeRatingOverride { get; set; }
        /// <summary>
        /// Defines KoreaAgeRatingOverride
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KoreaAgeRatingOverrideEnum
        {
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,

            /// <summary>
            /// Enum FIFTEENPLUS for value: FIFTEEN_PLUS
            /// </summary>
            [EnumMember(Value = "FIFTEEN_PLUS")]
            FIFTEENPLUS = 2,

            /// <summary>
            /// Enum NINETEENPLUS for value: NINETEEN_PLUS
            /// </summary>
            [EnumMember(Value = "NINETEEN_PLUS")]
            NINETEENPLUS = 3
        }


        /// <summary>
        /// Gets or Sets KoreaAgeRatingOverride
        /// </summary>
        [DataMember(Name = "koreaAgeRatingOverride", EmitDefaultValue = false)]
        public KoreaAgeRatingOverrideEnum? KoreaAgeRatingOverride { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgeRatingDeclarationAttributes" /> class.
        /// </summary>
        /// <param name="alcoholTobaccoOrDrugUseOrReferences">alcoholTobaccoOrDrugUseOrReferences.</param>
        /// <param name="contests">contests.</param>
        /// <param name="gamblingAndContests">gamblingAndContests.</param>
        /// <param name="gambling">gambling.</param>
        /// <param name="gamblingSimulated">gamblingSimulated.</param>
        /// <param name="kidsAgeBand">kidsAgeBand.</param>
        /// <param name="lootBox">lootBox.</param>
        /// <param name="medicalOrTreatmentInformation">medicalOrTreatmentInformation.</param>
        /// <param name="profanityOrCrudeHumor">profanityOrCrudeHumor.</param>
        /// <param name="sexualContentGraphicAndNudity">sexualContentGraphicAndNudity.</param>
        /// <param name="sexualContentOrNudity">sexualContentOrNudity.</param>
        /// <param name="horrorOrFearThemes">horrorOrFearThemes.</param>
        /// <param name="matureOrSuggestiveThemes">matureOrSuggestiveThemes.</param>
        /// <param name="unrestrictedWebAccess">unrestrictedWebAccess.</param>
        /// <param name="violenceCartoonOrFantasy">violenceCartoonOrFantasy.</param>
        /// <param name="violenceRealisticProlongedGraphicOrSadistic">violenceRealisticProlongedGraphicOrSadistic.</param>
        /// <param name="violenceRealistic">violenceRealistic.</param>
        /// <param name="ageRatingOverride">ageRatingOverride.</param>
        /// <param name="koreaAgeRatingOverride">koreaAgeRatingOverride.</param>
        /// <param name="seventeenPlus">seventeenPlus.</param>
        public AgeRatingDeclarationAttributes(AlcoholTobaccoOrDrugUseOrReferencesEnum? alcoholTobaccoOrDrugUseOrReferences = default(AlcoholTobaccoOrDrugUseOrReferencesEnum?), ContestsEnum? contests = default(ContestsEnum?), bool gamblingAndContests = default(bool), bool gambling = default(bool), GamblingSimulatedEnum? gamblingSimulated = default(GamblingSimulatedEnum?), KidsAgeBand? kidsAgeBand = default(KidsAgeBand?), bool lootBox = default(bool), MedicalOrTreatmentInformationEnum? medicalOrTreatmentInformation = default(MedicalOrTreatmentInformationEnum?), ProfanityOrCrudeHumorEnum? profanityOrCrudeHumor = default(ProfanityOrCrudeHumorEnum?), SexualContentGraphicAndNudityEnum? sexualContentGraphicAndNudity = default(SexualContentGraphicAndNudityEnum?), SexualContentOrNudityEnum? sexualContentOrNudity = default(SexualContentOrNudityEnum?), HorrorOrFearThemesEnum? horrorOrFearThemes = default(HorrorOrFearThemesEnum?), MatureOrSuggestiveThemesEnum? matureOrSuggestiveThemes = default(MatureOrSuggestiveThemesEnum?), bool unrestrictedWebAccess = default(bool), ViolenceCartoonOrFantasyEnum? violenceCartoonOrFantasy = default(ViolenceCartoonOrFantasyEnum?), ViolenceRealisticProlongedGraphicOrSadisticEnum? violenceRealisticProlongedGraphicOrSadistic = default(ViolenceRealisticProlongedGraphicOrSadisticEnum?), ViolenceRealisticEnum? violenceRealistic = default(ViolenceRealisticEnum?), AgeRatingOverrideEnum? ageRatingOverride = default(AgeRatingOverrideEnum?), KoreaAgeRatingOverrideEnum? koreaAgeRatingOverride = default(KoreaAgeRatingOverrideEnum?), bool seventeenPlus = default(bool))
        {
            this.AlcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences;
            this.Contests = contests;
            this.GamblingAndContests = gamblingAndContests;
            this.Gambling = gambling;
            this.GamblingSimulated = gamblingSimulated;
            this.KidsAgeBand = kidsAgeBand;
            this.LootBox = lootBox;
            this.MedicalOrTreatmentInformation = medicalOrTreatmentInformation;
            this.ProfanityOrCrudeHumor = profanityOrCrudeHumor;
            this.SexualContentGraphicAndNudity = sexualContentGraphicAndNudity;
            this.SexualContentOrNudity = sexualContentOrNudity;
            this.HorrorOrFearThemes = horrorOrFearThemes;
            this.MatureOrSuggestiveThemes = matureOrSuggestiveThemes;
            this.UnrestrictedWebAccess = unrestrictedWebAccess;
            this.ViolenceCartoonOrFantasy = violenceCartoonOrFantasy;
            this.ViolenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic;
            this.ViolenceRealistic = violenceRealistic;
            this.AgeRatingOverride = ageRatingOverride;
            this.KoreaAgeRatingOverride = koreaAgeRatingOverride;
            this.SeventeenPlus = seventeenPlus;
        }

        /// <summary>
        /// Gets or Sets GamblingAndContests
        /// </summary>
        [DataMember(Name = "gamblingAndContests", EmitDefaultValue = true)]
        [Obsolete]
        public bool GamblingAndContests { get; set; }

        /// <summary>
        /// Gets or Sets Gambling
        /// </summary>
        [DataMember(Name = "gambling", EmitDefaultValue = true)]
        public bool Gambling { get; set; }

        /// <summary>
        /// Gets or Sets LootBox
        /// </summary>
        [DataMember(Name = "lootBox", EmitDefaultValue = true)]
        public bool LootBox { get; set; }

        /// <summary>
        /// Gets or Sets UnrestrictedWebAccess
        /// </summary>
        [DataMember(Name = "unrestrictedWebAccess", EmitDefaultValue = true)]
        public bool UnrestrictedWebAccess { get; set; }

        /// <summary>
        /// Gets or Sets SeventeenPlus
        /// </summary>
        [DataMember(Name = "seventeenPlus", EmitDefaultValue = true)]
        [Obsolete]
        public bool SeventeenPlus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AgeRatingDeclarationAttributes {\n");
            sb.Append("  AlcoholTobaccoOrDrugUseOrReferences: ").Append(AlcoholTobaccoOrDrugUseOrReferences).Append("\n");
            sb.Append("  Contests: ").Append(Contests).Append("\n");
            sb.Append("  GamblingAndContests: ").Append(GamblingAndContests).Append("\n");
            sb.Append("  Gambling: ").Append(Gambling).Append("\n");
            sb.Append("  GamblingSimulated: ").Append(GamblingSimulated).Append("\n");
            sb.Append("  KidsAgeBand: ").Append(KidsAgeBand).Append("\n");
            sb.Append("  LootBox: ").Append(LootBox).Append("\n");
            sb.Append("  MedicalOrTreatmentInformation: ").Append(MedicalOrTreatmentInformation).Append("\n");
            sb.Append("  ProfanityOrCrudeHumor: ").Append(ProfanityOrCrudeHumor).Append("\n");
            sb.Append("  SexualContentGraphicAndNudity: ").Append(SexualContentGraphicAndNudity).Append("\n");
            sb.Append("  SexualContentOrNudity: ").Append(SexualContentOrNudity).Append("\n");
            sb.Append("  HorrorOrFearThemes: ").Append(HorrorOrFearThemes).Append("\n");
            sb.Append("  MatureOrSuggestiveThemes: ").Append(MatureOrSuggestiveThemes).Append("\n");
            sb.Append("  UnrestrictedWebAccess: ").Append(UnrestrictedWebAccess).Append("\n");
            sb.Append("  ViolenceCartoonOrFantasy: ").Append(ViolenceCartoonOrFantasy).Append("\n");
            sb.Append("  ViolenceRealisticProlongedGraphicOrSadistic: ").Append(ViolenceRealisticProlongedGraphicOrSadistic).Append("\n");
            sb.Append("  ViolenceRealistic: ").Append(ViolenceRealistic).Append("\n");
            sb.Append("  AgeRatingOverride: ").Append(AgeRatingOverride).Append("\n");
            sb.Append("  KoreaAgeRatingOverride: ").Append(KoreaAgeRatingOverride).Append("\n");
            sb.Append("  SeventeenPlus: ").Append(SeventeenPlus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
