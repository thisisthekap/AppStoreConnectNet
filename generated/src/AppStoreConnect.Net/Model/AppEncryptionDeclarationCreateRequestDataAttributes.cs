/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// AppEncryptionDeclarationCreateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "AppEncryptionDeclarationCreateRequest_data_attributes")]
    public partial class AppEncryptionDeclarationCreateRequestDataAttributes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppEncryptionDeclarationCreateRequestDataAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppEncryptionDeclarationCreateRequestDataAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppEncryptionDeclarationCreateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="appDescription">appDescription (required).</param>
        /// <param name="containsProprietaryCryptography">containsProprietaryCryptography (required).</param>
        /// <param name="containsThirdPartyCryptography">containsThirdPartyCryptography (required).</param>
        /// <param name="availableOnFrenchStore">availableOnFrenchStore (required).</param>
        public AppEncryptionDeclarationCreateRequestDataAttributes(string appDescription = default(string), bool containsProprietaryCryptography = default(bool), bool containsThirdPartyCryptography = default(bool), bool availableOnFrenchStore = default(bool))
        {
            // to ensure "appDescription" is required (not null)
            if (appDescription == null)
            {
                throw new ArgumentNullException("appDescription is a required property for AppEncryptionDeclarationCreateRequestDataAttributes and cannot be null");
            }
            this.AppDescription = appDescription;
            this.ContainsProprietaryCryptography = containsProprietaryCryptography;
            this.ContainsThirdPartyCryptography = containsThirdPartyCryptography;
            this.AvailableOnFrenchStore = availableOnFrenchStore;
        }

        /// <summary>
        /// Gets or Sets AppDescription
        /// </summary>
        [DataMember(Name = "appDescription", IsRequired = true, EmitDefaultValue = true)]
        public string AppDescription { get; set; }

        /// <summary>
        /// Gets or Sets ContainsProprietaryCryptography
        /// </summary>
        [DataMember(Name = "containsProprietaryCryptography", IsRequired = true, EmitDefaultValue = true)]
        public bool ContainsProprietaryCryptography { get; set; }

        /// <summary>
        /// Gets or Sets ContainsThirdPartyCryptography
        /// </summary>
        [DataMember(Name = "containsThirdPartyCryptography", IsRequired = true, EmitDefaultValue = true)]
        public bool ContainsThirdPartyCryptography { get; set; }

        /// <summary>
        /// Gets or Sets AvailableOnFrenchStore
        /// </summary>
        [DataMember(Name = "availableOnFrenchStore", IsRequired = true, EmitDefaultValue = true)]
        public bool AvailableOnFrenchStore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppEncryptionDeclarationCreateRequestDataAttributes {\n");
            sb.Append("  AppDescription: ").Append(AppDescription).Append("\n");
            sb.Append("  ContainsProprietaryCryptography: ").Append(ContainsProprietaryCryptography).Append("\n");
            sb.Append("  ContainsThirdPartyCryptography: ").Append(ContainsThirdPartyCryptography).Append("\n");
            sb.Append("  AvailableOnFrenchStore: ").Append(AvailableOnFrenchStore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
