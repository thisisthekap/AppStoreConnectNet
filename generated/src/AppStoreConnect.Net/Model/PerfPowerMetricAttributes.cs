/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// PerfPowerMetricAttributes
    /// </summary>
    [DataContract(Name = "PerfPowerMetric_attributes")]
    public partial class PerfPowerMetricAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines Platform
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformEnum
        {
            /// <summary>
            /// Enum IOS for value: IOS
            /// </summary>
            [EnumMember(Value = "IOS")]
            IOS = 1
        }


        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        public PlatformEnum? Platform { get; set; }
        /// <summary>
        /// Defines MetricType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MetricTypeEnum
        {
            /// <summary>
            /// Enum DISK for value: DISK
            /// </summary>
            [EnumMember(Value = "DISK")]
            DISK = 1,

            /// <summary>
            /// Enum HANG for value: HANG
            /// </summary>
            [EnumMember(Value = "HANG")]
            HANG = 2,

            /// <summary>
            /// Enum BATTERY for value: BATTERY
            /// </summary>
            [EnumMember(Value = "BATTERY")]
            BATTERY = 3,

            /// <summary>
            /// Enum LAUNCH for value: LAUNCH
            /// </summary>
            [EnumMember(Value = "LAUNCH")]
            LAUNCH = 4,

            /// <summary>
            /// Enum MEMORY for value: MEMORY
            /// </summary>
            [EnumMember(Value = "MEMORY")]
            MEMORY = 5,

            /// <summary>
            /// Enum ANIMATION for value: ANIMATION
            /// </summary>
            [EnumMember(Value = "ANIMATION")]
            ANIMATION = 6,

            /// <summary>
            /// Enum TERMINATION for value: TERMINATION
            /// </summary>
            [EnumMember(Value = "TERMINATION")]
            TERMINATION = 7
        }


        /// <summary>
        /// Gets or Sets MetricType
        /// </summary>
        [DataMember(Name = "metricType", EmitDefaultValue = false)]
        public MetricTypeEnum? MetricType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerfPowerMetricAttributes" /> class.
        /// </summary>
        /// <param name="platform">platform.</param>
        /// <param name="metricType">metricType.</param>
        /// <param name="deviceType">deviceType.</param>
        public PerfPowerMetricAttributes(PlatformEnum? platform = default(PlatformEnum?), MetricTypeEnum? metricType = default(MetricTypeEnum?), string deviceType = default(string))
        {
            this.Platform = platform;
            this.MetricType = metricType;
            this.DeviceType = deviceType;
        }

        /// <summary>
        /// Gets or Sets DeviceType
        /// </summary>
        [DataMember(Name = "deviceType", EmitDefaultValue = false)]
        public string DeviceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PerfPowerMetricAttributes {\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  MetricType: ").Append(MetricType).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
