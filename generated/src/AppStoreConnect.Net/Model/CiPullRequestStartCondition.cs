/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// CiPullRequestStartCondition
    /// </summary>
    [DataContract(Name = "CiPullRequestStartCondition")]
    public partial class CiPullRequestStartCondition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CiPullRequestStartCondition" /> class.
        /// </summary>
        /// <param name="source">source.</param>
        /// <param name="destination">destination.</param>
        /// <param name="filesAndFoldersRule">filesAndFoldersRule.</param>
        /// <param name="autoCancel">autoCancel.</param>
        public CiPullRequestStartCondition(CiBranchPatterns source = default(CiBranchPatterns), CiBranchPatterns destination = default(CiBranchPatterns), CiFilesAndFoldersRule filesAndFoldersRule = default(CiFilesAndFoldersRule), bool autoCancel = default(bool))
        {
            this.Source = source;
            this.Destination = destination;
            this.FilesAndFoldersRule = filesAndFoldersRule;
            this.AutoCancel = autoCancel;
        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public CiBranchPatterns Source { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public CiBranchPatterns Destination { get; set; }

        /// <summary>
        /// Gets or Sets FilesAndFoldersRule
        /// </summary>
        [DataMember(Name = "filesAndFoldersRule", EmitDefaultValue = false)]
        public CiFilesAndFoldersRule FilesAndFoldersRule { get; set; }

        /// <summary>
        /// Gets or Sets AutoCancel
        /// </summary>
        [DataMember(Name = "autoCancel", EmitDefaultValue = true)]
        public bool AutoCancel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiPullRequestStartCondition {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  FilesAndFoldersRule: ").Append(FilesAndFoldersRule).Append("\n");
            sb.Append("  AutoCancel: ").Append(AutoCancel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
