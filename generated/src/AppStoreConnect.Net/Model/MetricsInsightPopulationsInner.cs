/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// MetricsInsightPopulationsInner
    /// </summary>
    [DataContract(Name = "MetricsInsight_populations_inner")]
    public partial class MetricsInsightPopulationsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsInsightPopulationsInner" /> class.
        /// </summary>
        /// <param name="deltaPercentage">deltaPercentage.</param>
        /// <param name="percentile">percentile.</param>
        /// <param name="summaryString">summaryString.</param>
        /// <param name="referenceAverageValue">referenceAverageValue.</param>
        /// <param name="latestVersionValue">latestVersionValue.</param>
        /// <param name="device">device.</param>
        public MetricsInsightPopulationsInner(decimal deltaPercentage = default(decimal), string percentile = default(string), string summaryString = default(string), decimal referenceAverageValue = default(decimal), decimal latestVersionValue = default(decimal), string device = default(string))
        {
            this.DeltaPercentage = deltaPercentage;
            this.Percentile = percentile;
            this.SummaryString = summaryString;
            this.ReferenceAverageValue = referenceAverageValue;
            this.LatestVersionValue = latestVersionValue;
            this.Device = device;
        }

        /// <summary>
        /// Gets or Sets DeltaPercentage
        /// </summary>
        [DataMember(Name = "deltaPercentage", EmitDefaultValue = false)]
        public decimal DeltaPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Percentile
        /// </summary>
        [DataMember(Name = "percentile", EmitDefaultValue = false)]
        public string Percentile { get; set; }

        /// <summary>
        /// Gets or Sets SummaryString
        /// </summary>
        [DataMember(Name = "summaryString", EmitDefaultValue = false)]
        public string SummaryString { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceAverageValue
        /// </summary>
        [DataMember(Name = "referenceAverageValue", EmitDefaultValue = false)]
        public decimal ReferenceAverageValue { get; set; }

        /// <summary>
        /// Gets or Sets LatestVersionValue
        /// </summary>
        [DataMember(Name = "latestVersionValue", EmitDefaultValue = false)]
        public decimal LatestVersionValue { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name = "device", EmitDefaultValue = false)]
        public string Device { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetricsInsightPopulationsInner {\n");
            sb.Append("  DeltaPercentage: ").Append(DeltaPercentage).Append("\n");
            sb.Append("  Percentile: ").Append(Percentile).Append("\n");
            sb.Append("  SummaryString: ").Append(SummaryString).Append("\n");
            sb.Append("  ReferenceAverageValue: ").Append(ReferenceAverageValue).Append("\n");
            sb.Append("  LatestVersionValue: ").Append(LatestVersionValue).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
