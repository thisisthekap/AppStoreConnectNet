/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// SandboxTesterV2UpdateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "SandboxTesterV2UpdateRequest_data_attributes")]
    public partial class SandboxTesterV2UpdateRequestDataAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Territory
        /// </summary>
        [DataMember(Name = "territory", EmitDefaultValue = false)]
        public TerritoryCode? Territory { get; set; }
        /// <summary>
        /// Defines SubscriptionRenewalRate
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubscriptionRenewalRateEnum
        {
            /// <summary>
            /// Enum ONEHOUR for value: MONTHLY_RENEWAL_EVERY_ONE_HOUR
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_ONE_HOUR")]
            ONEHOUR = 1,

            /// <summary>
            /// Enum THIRTYMINUTES for value: MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES")]
            THIRTYMINUTES = 2,

            /// <summary>
            /// Enum FIFTEENMINUTES for value: MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES")]
            FIFTEENMINUTES = 3,

            /// <summary>
            /// Enum FIVEMINUTES for value: MONTHLY_RENEWAL_EVERY_FIVE_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_FIVE_MINUTES")]
            FIVEMINUTES = 4,

            /// <summary>
            /// Enum THREEMINUTES for value: MONTHLY_RENEWAL_EVERY_THREE_MINUTES
            /// </summary>
            [EnumMember(Value = "MONTHLY_RENEWAL_EVERY_THREE_MINUTES")]
            THREEMINUTES = 5
        }


        /// <summary>
        /// Gets or Sets SubscriptionRenewalRate
        /// </summary>
        [DataMember(Name = "subscriptionRenewalRate", EmitDefaultValue = false)]
        public SubscriptionRenewalRateEnum? SubscriptionRenewalRate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SandboxTesterV2UpdateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="territory">territory.</param>
        /// <param name="interruptPurchases">interruptPurchases.</param>
        /// <param name="subscriptionRenewalRate">subscriptionRenewalRate.</param>
        public SandboxTesterV2UpdateRequestDataAttributes(TerritoryCode? territory = default(TerritoryCode?), bool interruptPurchases = default(bool), SubscriptionRenewalRateEnum? subscriptionRenewalRate = default(SubscriptionRenewalRateEnum?))
        {
            this.Territory = territory;
            this.InterruptPurchases = interruptPurchases;
            this.SubscriptionRenewalRate = subscriptionRenewalRate;
        }

        /// <summary>
        /// Gets or Sets InterruptPurchases
        /// </summary>
        [DataMember(Name = "interruptPurchases", EmitDefaultValue = true)]
        public bool InterruptPurchases { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SandboxTesterV2UpdateRequestDataAttributes {\n");
            sb.Append("  Territory: ").Append(Territory).Append("\n");
            sb.Append("  InterruptPurchases: ").Append(InterruptPurchases).Append("\n");
            sb.Append("  SubscriptionRenewalRate: ").Append(SubscriptionRenewalRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
