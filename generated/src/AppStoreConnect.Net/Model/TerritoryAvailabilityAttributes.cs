/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// TerritoryAvailabilityAttributes
    /// </summary>
    [DataContract(Name = "TerritoryAvailability_attributes")]
    public partial class TerritoryAvailabilityAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines ContentStatuses
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentStatusesEnum
        {
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 1,

            /// <summary>
            /// Enum AVAILABLEFORPREORDERONDATE for value: AVAILABLE_FOR_PREORDER_ON_DATE
            /// </summary>
            [EnumMember(Value = "AVAILABLE_FOR_PREORDER_ON_DATE")]
            AVAILABLEFORPREORDERONDATE = 2,

            /// <summary>
            /// Enum PROCESSINGTONOTAVAILABLE for value: PROCESSING_TO_NOT_AVAILABLE
            /// </summary>
            [EnumMember(Value = "PROCESSING_TO_NOT_AVAILABLE")]
            PROCESSINGTONOTAVAILABLE = 3,

            /// <summary>
            /// Enum PROCESSINGTOAVAILABLE for value: PROCESSING_TO_AVAILABLE
            /// </summary>
            [EnumMember(Value = "PROCESSING_TO_AVAILABLE")]
            PROCESSINGTOAVAILABLE = 4,

            /// <summary>
            /// Enum PROCESSINGTOPREORDER for value: PROCESSING_TO_PRE_ORDER
            /// </summary>
            [EnumMember(Value = "PROCESSING_TO_PRE_ORDER")]
            PROCESSINGTOPREORDER = 5,

            /// <summary>
            /// Enum AVAILABLEFORSALEUNRELEASEDAPP for value: AVAILABLE_FOR_SALE_UNRELEASED_APP
            /// </summary>
            [EnumMember(Value = "AVAILABLE_FOR_SALE_UNRELEASED_APP")]
            AVAILABLEFORSALEUNRELEASEDAPP = 6,

            /// <summary>
            /// Enum PREORDERONUNRELEASEDAPP for value: PREORDER_ON_UNRELEASED_APP
            /// </summary>
            [EnumMember(Value = "PREORDER_ON_UNRELEASED_APP")]
            PREORDERONUNRELEASEDAPP = 7,

            /// <summary>
            /// Enum AVAILABLEFORPREORDER for value: AVAILABLE_FOR_PREORDER
            /// </summary>
            [EnumMember(Value = "AVAILABLE_FOR_PREORDER")]
            AVAILABLEFORPREORDER = 8,

            /// <summary>
            /// Enum MISSINGRATING for value: MISSING_RATING
            /// </summary>
            [EnumMember(Value = "MISSING_RATING")]
            MISSINGRATING = 9,

            /// <summary>
            /// Enum CANNOTSELLRESTRICTEDRATING for value: CANNOT_SELL_RESTRICTED_RATING
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_RESTRICTED_RATING")]
            CANNOTSELLRESTRICTEDRATING = 10,

            /// <summary>
            /// Enum BRAZILREQUIREDTAXID for value: BRAZIL_REQUIRED_TAX_ID
            /// </summary>
            [EnumMember(Value = "BRAZIL_REQUIRED_TAX_ID")]
            BRAZILREQUIREDTAXID = 11,

            /// <summary>
            /// Enum MISSINGGRN for value: MISSING_GRN
            /// </summary>
            [EnumMember(Value = "MISSING_GRN")]
            MISSINGGRN = 12,

            /// <summary>
            /// Enum UNVERIFIEDGRN for value: UNVERIFIED_GRN
            /// </summary>
            [EnumMember(Value = "UNVERIFIED_GRN")]
            UNVERIFIEDGRN = 13,

            /// <summary>
            /// Enum ICPNUMBERINVALID for value: ICP_NUMBER_INVALID
            /// </summary>
            [EnumMember(Value = "ICP_NUMBER_INVALID")]
            ICPNUMBERINVALID = 14,

            /// <summary>
            /// Enum ICPNUMBERMISSING for value: ICP_NUMBER_MISSING
            /// </summary>
            [EnumMember(Value = "ICP_NUMBER_MISSING")]
            ICPNUMBERMISSING = 15,

            /// <summary>
            /// Enum CANNOTSELLSEVENTEENPLUSAPPS for value: CANNOT_SELL_SEVENTEEN_PLUS_APPS
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_SEVENTEEN_PLUS_APPS")]
            CANNOTSELLSEVENTEENPLUSAPPS = 16,

            /// <summary>
            /// Enum CANNOTSELLSEXUALLYEXPLICIT for value: CANNOT_SELL_SEXUALLY_EXPLICIT
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_SEXUALLY_EXPLICIT")]
            CANNOTSELLSEXUALLYEXPLICIT = 17,

            /// <summary>
            /// Enum CANNOTSELLNONIOSGAMES for value: CANNOT_SELL_NON_IOS_GAMES
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_NON_IOS_GAMES")]
            CANNOTSELLNONIOSGAMES = 18,

            /// <summary>
            /// Enum CANNOTSELLSEVENTEENPLUSGAMES for value: CANNOT_SELL_SEVENTEEN_PLUS_GAMES
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_SEVENTEEN_PLUS_GAMES")]
            CANNOTSELLSEVENTEENPLUSGAMES = 19,

            /// <summary>
            /// Enum CANNOTSELLFREQUENTINTENSEGAMBLING for value: CANNOT_SELL_FREQUENT_INTENSE_GAMBLING
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_FREQUENT_INTENSE_GAMBLING")]
            CANNOTSELLFREQUENTINTENSEGAMBLING = 20,

            /// <summary>
            /// Enum CANNOTSELLCASINO for value: CANNOT_SELL_CASINO
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_CASINO")]
            CANNOTSELLCASINO = 21,

            /// <summary>
            /// Enum CANNOTSELLCASINOWITHOUTGRAC for value: CANNOT_SELL_CASINO_WITHOUT_GRAC
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_CASINO_WITHOUT_GRAC")]
            CANNOTSELLCASINOWITHOUTGRAC = 22,

            /// <summary>
            /// Enum CANNOTSELLCASINOWITHOUTAGEVERIFICATION for value: CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION")]
            CANNOTSELLCASINOWITHOUTAGEVERIFICATION = 23,

            /// <summary>
            /// Enum CANNOTSELLFREQUENTINTENSEALCOHOLTOBACCODRUGS for value: CANNOT_SELL_FREQUENT_INTENSE_ALCOHOL_TOBACCO_DRUGS
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_FREQUENT_INTENSE_ALCOHOL_TOBACCO_DRUGS")]
            CANNOTSELLFREQUENTINTENSEALCOHOLTOBACCODRUGS = 24,

            /// <summary>
            /// Enum CANNOTSELLFREQUENTINTENSEVIOLENCE for value: CANNOT_SELL_FREQUENT_INTENSE_VIOLENCE
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_FREQUENT_INTENSE_VIOLENCE")]
            CANNOTSELLFREQUENTINTENSEVIOLENCE = 25,

            /// <summary>
            /// Enum CANNOTSELLFREQUENTINTENSESEXUALCONTENTNUDITY for value: CANNOT_SELL_FREQUENT_INTENSE_SEXUAL_CONTENT_NUDITY
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_FREQUENT_INTENSE_SEXUAL_CONTENT_NUDITY")]
            CANNOTSELLFREQUENTINTENSESEXUALCONTENTNUDITY = 26,

            /// <summary>
            /// Enum CANNOTSELLINFREQUENTMILDALCOHOLTOBACCODRUGS for value: CANNOT_SELL_INFREQUENT_MILD_ALCOHOL_TOBACCO_DRUGS
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_INFREQUENT_MILD_ALCOHOL_TOBACCO_DRUGS")]
            CANNOTSELLINFREQUENTMILDALCOHOLTOBACCODRUGS = 27,

            /// <summary>
            /// Enum CANNOTSELLINFREQUENTMILDSEXUALCONTENTNUDITY for value: CANNOT_SELL_INFREQUENT_MILD_SEXUAL_CONTENT_NUDITY
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_INFREQUENT_MILD_SEXUAL_CONTENT_NUDITY")]
            CANNOTSELLINFREQUENTMILDSEXUALCONTENTNUDITY = 28,

            /// <summary>
            /// Enum CANNOTSELLADULTONLY for value: CANNOT_SELL_ADULT_ONLY
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_ADULT_ONLY")]
            CANNOTSELLADULTONLY = 29,

            /// <summary>
            /// Enum CANNOTSELLFREQUENTINTENSE for value: CANNOT_SELL_FREQUENT_INTENSE
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_FREQUENT_INTENSE")]
            CANNOTSELLFREQUENTINTENSE = 30,

            /// <summary>
            /// Enum CANNOTSELLFREQUENTINTENSEWITHOUTGRAC for value: CANNOT_SELL_FREQUENT_INTENSE_WITHOUT_GRAC
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_FREQUENT_INTENSE_WITHOUT_GRAC")]
            CANNOTSELLFREQUENTINTENSEWITHOUTGRAC = 31,

            /// <summary>
            /// Enum CANNOTSELLGAMBLINGCONTESTS for value: CANNOT_SELL_GAMBLING_CONTESTS
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_GAMBLING_CONTESTS")]
            CANNOTSELLGAMBLINGCONTESTS = 32,

            /// <summary>
            /// Enum CANNOTSELLGAMBLING for value: CANNOT_SELL_GAMBLING
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_GAMBLING")]
            CANNOTSELLGAMBLING = 33,

            /// <summary>
            /// Enum CANNOTSELLCONTESTS for value: CANNOT_SELL_CONTESTS
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL_CONTESTS")]
            CANNOTSELLCONTESTS = 34,

            /// <summary>
            /// Enum CANNOTSELL for value: CANNOT_SELL
            /// </summary>
            [EnumMember(Value = "CANNOT_SELL")]
            CANNOTSELL = 35
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TerritoryAvailabilityAttributes" /> class.
        /// </summary>
        /// <param name="available">available.</param>
        /// <param name="releaseDate">releaseDate.</param>
        /// <param name="preOrderEnabled">preOrderEnabled.</param>
        /// <param name="preOrderPublishDate">preOrderPublishDate.</param>
        /// <param name="contentStatuses">contentStatuses.</param>
        public TerritoryAvailabilityAttributes(bool available = default(bool), DateOnly releaseDate = default(DateOnly), bool preOrderEnabled = default(bool), DateOnly preOrderPublishDate = default(DateOnly), List<ContentStatusesEnum> contentStatuses = default(List<ContentStatusesEnum>))
        {
            this.Available = available;
            this.ReleaseDate = releaseDate;
            this.PreOrderEnabled = preOrderEnabled;
            this.PreOrderPublishDate = preOrderPublishDate;
            this.ContentStatuses = contentStatuses;
        }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        public DateOnly ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets PreOrderEnabled
        /// </summary>
        [DataMember(Name = "preOrderEnabled", EmitDefaultValue = true)]
        public bool PreOrderEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PreOrderPublishDate
        /// </summary>
        [DataMember(Name = "preOrderPublishDate", EmitDefaultValue = false)]
        public DateOnly PreOrderPublishDate { get; set; }

        /// <summary>
        /// Gets or Sets ContentStatuses
        /// </summary>
        [DataMember(Name = "contentStatuses", EmitDefaultValue = false)]
        public List<TerritoryAvailabilityAttributes.ContentStatusesEnum> ContentStatuses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TerritoryAvailabilityAttributes {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  PreOrderEnabled: ").Append(PreOrderEnabled).Append("\n");
            sb.Append("  PreOrderPublishDate: ").Append(PreOrderPublishDate).Append("\n");
            sb.Append("  ContentStatuses: ").Append(ContentStatuses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
