/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// WinBackOfferCreateRequestDataAttributes
    /// </summary>
    [DataContract(Name = "WinBackOfferCreateRequest_data_attributes")]
    public partial class WinBackOfferCreateRequestDataAttributes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public SubscriptionOfferDuration Duration { get; set; }

        /// <summary>
        /// Gets or Sets OfferMode
        /// </summary>
        [DataMember(Name = "offerMode", IsRequired = true, EmitDefaultValue = true)]
        public SubscriptionOfferMode OfferMode { get; set; }
        /// <summary>
        /// Defines Priority
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum HIGH for value: HIGH
            /// </summary>
            [EnumMember(Value = "HIGH")]
            HIGH = 1,

            /// <summary>
            /// Enum NORMAL for value: NORMAL
            /// </summary>
            [EnumMember(Value = "NORMAL")]
            NORMAL = 2
        }


        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = true)]
        public PriorityEnum Priority { get; set; }
        /// <summary>
        /// Defines PromotionIntent
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PromotionIntentEnum
        {
            /// <summary>
            /// Enum NOTPROMOTED for value: NOT_PROMOTED
            /// </summary>
            [EnumMember(Value = "NOT_PROMOTED")]
            NOTPROMOTED = 1,

            /// <summary>
            /// Enum USEAUTOGENERATEDASSETS for value: USE_AUTO_GENERATED_ASSETS
            /// </summary>
            [EnumMember(Value = "USE_AUTO_GENERATED_ASSETS")]
            USEAUTOGENERATEDASSETS = 2
        }


        /// <summary>
        /// Gets or Sets PromotionIntent
        /// </summary>
        [DataMember(Name = "promotionIntent", EmitDefaultValue = false)]
        public PromotionIntentEnum? PromotionIntent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WinBackOfferCreateRequestDataAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WinBackOfferCreateRequestDataAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WinBackOfferCreateRequestDataAttributes" /> class.
        /// </summary>
        /// <param name="referenceName">referenceName (required).</param>
        /// <param name="offerId">offerId (required).</param>
        /// <param name="duration">duration (required).</param>
        /// <param name="offerMode">offerMode (required).</param>
        /// <param name="periodCount">periodCount (required).</param>
        /// <param name="customerEligibilityPaidSubscriptionDurationInMonths">customerEligibilityPaidSubscriptionDurationInMonths (required).</param>
        /// <param name="customerEligibilityTimeSinceLastSubscribedInMonths">customerEligibilityTimeSinceLastSubscribedInMonths (required).</param>
        /// <param name="customerEligibilityWaitBetweenOffersInMonths">customerEligibilityWaitBetweenOffersInMonths.</param>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="priority">priority (required).</param>
        /// <param name="promotionIntent">promotionIntent.</param>
        public WinBackOfferCreateRequestDataAttributes(string referenceName = default(string), string offerId = default(string), SubscriptionOfferDuration duration = default(SubscriptionOfferDuration), SubscriptionOfferMode offerMode = default(SubscriptionOfferMode), int periodCount = default(int), int customerEligibilityPaidSubscriptionDurationInMonths = default(int), IntegerRange customerEligibilityTimeSinceLastSubscribedInMonths = default(IntegerRange), int customerEligibilityWaitBetweenOffersInMonths = default(int), DateOnly startDate = default(DateOnly), DateOnly endDate = default(DateOnly), PriorityEnum priority = default(PriorityEnum), PromotionIntentEnum? promotionIntent = default(PromotionIntentEnum?))
        {
            // to ensure "referenceName" is required (not null)
            if (referenceName == null)
            {
                throw new ArgumentNullException("referenceName is a required property for WinBackOfferCreateRequestDataAttributes and cannot be null");
            }
            this.ReferenceName = referenceName;
            // to ensure "offerId" is required (not null)
            if (offerId == null)
            {
                throw new ArgumentNullException("offerId is a required property for WinBackOfferCreateRequestDataAttributes and cannot be null");
            }
            this.OfferId = offerId;
            this.Duration = duration;
            this.OfferMode = offerMode;
            this.PeriodCount = periodCount;
            this.CustomerEligibilityPaidSubscriptionDurationInMonths = customerEligibilityPaidSubscriptionDurationInMonths;
            // to ensure "customerEligibilityTimeSinceLastSubscribedInMonths" is required (not null)
            if (customerEligibilityTimeSinceLastSubscribedInMonths == null)
            {
                throw new ArgumentNullException("customerEligibilityTimeSinceLastSubscribedInMonths is a required property for WinBackOfferCreateRequestDataAttributes and cannot be null");
            }
            this.CustomerEligibilityTimeSinceLastSubscribedInMonths = customerEligibilityTimeSinceLastSubscribedInMonths;
            this.StartDate = startDate;
            this.Priority = priority;
            this.CustomerEligibilityWaitBetweenOffersInMonths = customerEligibilityWaitBetweenOffersInMonths;
            this.EndDate = endDate;
            this.PromotionIntent = promotionIntent;
        }

        /// <summary>
        /// Gets or Sets ReferenceName
        /// </summary>
        [DataMember(Name = "referenceName", IsRequired = true, EmitDefaultValue = true)]
        public string ReferenceName { get; set; }

        /// <summary>
        /// Gets or Sets OfferId
        /// </summary>
        [DataMember(Name = "offerId", IsRequired = true, EmitDefaultValue = true)]
        public string OfferId { get; set; }

        /// <summary>
        /// Gets or Sets PeriodCount
        /// </summary>
        [DataMember(Name = "periodCount", IsRequired = true, EmitDefaultValue = true)]
        public int PeriodCount { get; set; }

        /// <summary>
        /// Gets or Sets CustomerEligibilityPaidSubscriptionDurationInMonths
        /// </summary>
        [DataMember(Name = "customerEligibilityPaidSubscriptionDurationInMonths", IsRequired = true, EmitDefaultValue = true)]
        public int CustomerEligibilityPaidSubscriptionDurationInMonths { get; set; }

        /// <summary>
        /// Gets or Sets CustomerEligibilityTimeSinceLastSubscribedInMonths
        /// </summary>
        [DataMember(Name = "customerEligibilityTimeSinceLastSubscribedInMonths", IsRequired = true, EmitDefaultValue = true)]
        public IntegerRange CustomerEligibilityTimeSinceLastSubscribedInMonths { get; set; }

        /// <summary>
        /// Gets or Sets CustomerEligibilityWaitBetweenOffersInMonths
        /// </summary>
        [DataMember(Name = "customerEligibilityWaitBetweenOffersInMonths", EmitDefaultValue = false)]
        public int CustomerEligibilityWaitBetweenOffersInMonths { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateOnly EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WinBackOfferCreateRequestDataAttributes {\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  OfferMode: ").Append(OfferMode).Append("\n");
            sb.Append("  PeriodCount: ").Append(PeriodCount).Append("\n");
            sb.Append("  CustomerEligibilityPaidSubscriptionDurationInMonths: ").Append(CustomerEligibilityPaidSubscriptionDurationInMonths).Append("\n");
            sb.Append("  CustomerEligibilityTimeSinceLastSubscribedInMonths: ").Append(CustomerEligibilityTimeSinceLastSubscribedInMonths).Append("\n");
            sb.Append("  CustomerEligibilityWaitBetweenOffersInMonths: ").Append(CustomerEligibilityWaitBetweenOffersInMonths).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PromotionIntent: ").Append(PromotionIntent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
