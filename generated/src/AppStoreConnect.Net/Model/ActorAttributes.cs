/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// ActorAttributes
    /// </summary>
    [DataContract(Name = "Actor_attributes")]
    public partial class ActorAttributes : IValidatableObject
    {
        /// <summary>
        /// Defines ActorType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActorTypeEnum
        {
            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 1,

            /// <summary>
            /// Enum APIKEY for value: API_KEY
            /// </summary>
            [EnumMember(Value = "API_KEY")]
            APIKEY = 2,

            /// <summary>
            /// Enum XCODECLOUD for value: XCODE_CLOUD
            /// </summary>
            [EnumMember(Value = "XCODE_CLOUD")]
            XCODECLOUD = 3,

            /// <summary>
            /// Enum APPLE for value: APPLE
            /// </summary>
            [EnumMember(Value = "APPLE")]
            APPLE = 4
        }


        /// <summary>
        /// Gets or Sets ActorType
        /// </summary>
        [DataMember(Name = "actorType", EmitDefaultValue = false)]
        public ActorTypeEnum? ActorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActorAttributes" /> class.
        /// </summary>
        /// <param name="actorType">actorType.</param>
        /// <param name="userFirstName">userFirstName.</param>
        /// <param name="userLastName">userLastName.</param>
        /// <param name="userEmail">userEmail.</param>
        /// <param name="apiKeyId">apiKeyId.</param>
        public ActorAttributes(ActorTypeEnum? actorType = default(ActorTypeEnum?), string userFirstName = default(string), string userLastName = default(string), string userEmail = default(string), string apiKeyId = default(string))
        {
            this.ActorType = actorType;
            this.UserFirstName = userFirstName;
            this.UserLastName = userLastName;
            this.UserEmail = userEmail;
            this.ApiKeyId = apiKeyId;
        }

        /// <summary>
        /// Gets or Sets UserFirstName
        /// </summary>
        [DataMember(Name = "userFirstName", EmitDefaultValue = false)]
        public string UserFirstName { get; set; }

        /// <summary>
        /// Gets or Sets UserLastName
        /// </summary>
        [DataMember(Name = "userLastName", EmitDefaultValue = false)]
        public string UserLastName { get; set; }

        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name = "userEmail", EmitDefaultValue = false)]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or Sets ApiKeyId
        /// </summary>
        [DataMember(Name = "apiKeyId", EmitDefaultValue = false)]
        public string ApiKeyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActorAttributes {\n");
            sb.Append("  ActorType: ").Append(ActorType).Append("\n");
            sb.Append("  UserFirstName: ").Append(UserFirstName).Append("\n");
            sb.Append("  UserLastName: ").Append(UserLastName).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  ApiKeyId: ").Append(ApiKeyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
