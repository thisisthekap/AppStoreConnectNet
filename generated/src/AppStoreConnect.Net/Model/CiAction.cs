/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = AppStoreConnect.Net.Client.FileParameter;
using OpenAPIDateConverter = AppStoreConnect.Net.Client.OpenAPIDateConverter;

namespace AppStoreConnect.Net.Model
{
    /// <summary>
    /// CiAction
    /// </summary>
    [DataContract(Name = "CiAction")]
    public partial class CiAction : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name = "actionType", EmitDefaultValue = false)]
        public CiActionType? ActionType { get; set; }
        /// <summary>
        /// Defines Destination
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DestinationEnum
        {
            /// <summary>
            /// Enum IOSDEVICE for value: ANY_IOS_DEVICE
            /// </summary>
            [EnumMember(Value = "ANY_IOS_DEVICE")]
            IOSDEVICE = 1,

            /// <summary>
            /// Enum IOSSIMULATOR for value: ANY_IOS_SIMULATOR
            /// </summary>
            [EnumMember(Value = "ANY_IOS_SIMULATOR")]
            IOSSIMULATOR = 2,

            /// <summary>
            /// Enum TVOSDEVICE for value: ANY_TVOS_DEVICE
            /// </summary>
            [EnumMember(Value = "ANY_TVOS_DEVICE")]
            TVOSDEVICE = 3,

            /// <summary>
            /// Enum TVOSSIMULATOR for value: ANY_TVOS_SIMULATOR
            /// </summary>
            [EnumMember(Value = "ANY_TVOS_SIMULATOR")]
            TVOSSIMULATOR = 4,

            /// <summary>
            /// Enum WATCHOSDEVICE for value: ANY_WATCHOS_DEVICE
            /// </summary>
            [EnumMember(Value = "ANY_WATCHOS_DEVICE")]
            WATCHOSDEVICE = 5,

            /// <summary>
            /// Enum WATCHOSSIMULATOR for value: ANY_WATCHOS_SIMULATOR
            /// </summary>
            [EnumMember(Value = "ANY_WATCHOS_SIMULATOR")]
            WATCHOSSIMULATOR = 6,

            /// <summary>
            /// Enum MAC for value: ANY_MAC
            /// </summary>
            [EnumMember(Value = "ANY_MAC")]
            MAC = 7,

            /// <summary>
            /// Enum MACCATALYST for value: ANY_MAC_CATALYST
            /// </summary>
            [EnumMember(Value = "ANY_MAC_CATALYST")]
            MACCATALYST = 8,

            /// <summary>
            /// Enum VISIONOSDEVICE for value: ANY_VISIONOS_DEVICE
            /// </summary>
            [EnumMember(Value = "ANY_VISIONOS_DEVICE")]
            VISIONOSDEVICE = 9,

            /// <summary>
            /// Enum VISIONOSSIMULATOR for value: ANY_VISIONOS_SIMULATOR
            /// </summary>
            [EnumMember(Value = "ANY_VISIONOS_SIMULATOR")]
            VISIONOSSIMULATOR = 10
        }


        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", EmitDefaultValue = false)]
        public DestinationEnum? Destination { get; set; }

        /// <summary>
        /// Gets or Sets BuildDistributionAudience
        /// </summary>
        [DataMember(Name = "buildDistributionAudience", EmitDefaultValue = false)]
        public BuildAudienceType? BuildDistributionAudience { get; set; }
        /// <summary>
        /// Defines Platform
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformEnum
        {
            /// <summary>
            /// Enum MACOS for value: MACOS
            /// </summary>
            [EnumMember(Value = "MACOS")]
            MACOS = 1,

            /// <summary>
            /// Enum IOS for value: IOS
            /// </summary>
            [EnumMember(Value = "IOS")]
            IOS = 2,

            /// <summary>
            /// Enum TVOS for value: TVOS
            /// </summary>
            [EnumMember(Value = "TVOS")]
            TVOS = 3,

            /// <summary>
            /// Enum WATCHOS for value: WATCHOS
            /// </summary>
            [EnumMember(Value = "WATCHOS")]
            WATCHOS = 4,

            /// <summary>
            /// Enum VISIONOS for value: VISIONOS
            /// </summary>
            [EnumMember(Value = "VISIONOS")]
            VISIONOS = 5
        }


        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        public PlatformEnum? Platform { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CiAction" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="actionType">actionType.</param>
        /// <param name="destination">destination.</param>
        /// <param name="buildDistributionAudience">buildDistributionAudience.</param>
        /// <param name="testConfiguration">testConfiguration.</param>
        /// <param name="scheme">scheme.</param>
        /// <param name="platform">platform.</param>
        /// <param name="isRequiredToPass">isRequiredToPass.</param>
        public CiAction(string name = default(string), CiActionType? actionType = default(CiActionType?), DestinationEnum? destination = default(DestinationEnum?), BuildAudienceType? buildDistributionAudience = default(BuildAudienceType?), CiActionTestConfiguration testConfiguration = default(CiActionTestConfiguration), string scheme = default(string), PlatformEnum? platform = default(PlatformEnum?), bool isRequiredToPass = default(bool))
        {
            this.Name = name;
            this.ActionType = actionType;
            this.Destination = destination;
            this.BuildDistributionAudience = buildDistributionAudience;
            this.TestConfiguration = testConfiguration;
            this.Scheme = scheme;
            this.Platform = platform;
            this.IsRequiredToPass = isRequiredToPass;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TestConfiguration
        /// </summary>
        [DataMember(Name = "testConfiguration", EmitDefaultValue = false)]
        public CiActionTestConfiguration TestConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets Scheme
        /// </summary>
        [DataMember(Name = "scheme", EmitDefaultValue = false)]
        public string Scheme { get; set; }

        /// <summary>
        /// Gets or Sets IsRequiredToPass
        /// </summary>
        [DataMember(Name = "isRequiredToPass", EmitDefaultValue = true)]
        public bool IsRequiredToPass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CiAction {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  BuildDistributionAudience: ").Append(BuildDistributionAudience).Append("\n");
            sb.Append("  TestConfiguration: ").Append(TestConfiguration).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  IsRequiredToPass: ").Append(IsRequiredToPass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
