/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterAchievementsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterAchievementsApiTests : IDisposable
    {
        private GameCenterAchievementsApi instance;

        public GameCenterAchievementsApiTests()
        {
            instance = new GameCenterAchievementsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterAchievementsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterAchievementsApi
            //Assert.IsType<GameCenterAchievementsApi>(instance);
        }

        /// <summary>
        /// Test GameCenterAchievementsCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterAchievementCreateRequest gameCenterAchievementCreateRequest = null;
            //var response = instance.GameCenterAchievementsCreateInstance(gameCenterAchievementCreateRequest);
            //Assert.IsType<GameCenterAchievementResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementsDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterAchievementsDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterAchievementsGetInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterAchievementsGetInstance(id, fieldsGameCenterAchievements, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, include, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterAchievementResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementsGroupAchievementGetToOneRelated
        /// </summary>
        [Fact]
        public void GameCenterAchievementsGroupAchievementGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterAchievementsGroupAchievementGetToOneRelated(id, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, include, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterAchievementResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementsGroupAchievementGetToOneRelationship
        /// </summary>
        [Fact]
        public void GameCenterAchievementsGroupAchievementGetToOneRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GameCenterAchievementsGroupAchievementGetToOneRelationship(id);
            //Assert.IsType<GameCenterAchievementGroupAchievementLinkageResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementsGroupAchievementUpdateToOneRelationship
        /// </summary>
        [Fact]
        public void GameCenterAchievementsGroupAchievementUpdateToOneRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterAchievementGroupAchievementLinkageRequest gameCenterAchievementGroupAchievementLinkageRequest = null;
            //instance.GameCenterAchievementsGroupAchievementUpdateToOneRelationship(id, gameCenterAchievementGroupAchievementLinkageRequest);
        }

        /// <summary>
        /// Test GameCenterAchievementsLocalizationsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterAchievementsLocalizationsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterAchievementImages = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterAchievementsLocalizationsGetToManyRelated(id, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievements, fieldsGameCenterAchievementImages, limit, include);
            //Assert.IsType<GameCenterAchievementLocalizationsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementsReleasesGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterAchievementsReleasesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterLive = null;
            //List<string>? filterGameCenterDetail = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterAchievementsReleasesGetToManyRelated(id, filterLive, filterGameCenterDetail, fieldsGameCenterAchievementReleases, fieldsGameCenterDetails, fieldsGameCenterAchievements, limit, include);
            //Assert.IsType<GameCenterAchievementReleasesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementsUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterAchievementUpdateRequest gameCenterAchievementUpdateRequest = null;
            //var response = instance.GameCenterAchievementsUpdateInstance(id, gameCenterAchievementUpdateRequest);
            //Assert.IsType<GameCenterAchievementResponse>(response);
        }
    }
}
