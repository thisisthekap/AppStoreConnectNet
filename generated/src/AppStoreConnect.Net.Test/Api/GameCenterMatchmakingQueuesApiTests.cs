/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterMatchmakingQueuesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterMatchmakingQueuesApiTests : IDisposable
    {
        private GameCenterMatchmakingQueuesApi instance;

        public GameCenterMatchmakingQueuesApiTests()
        {
            instance = new GameCenterMatchmakingQueuesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterMatchmakingQueuesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterMatchmakingQueuesApi
            //Assert.IsType<GameCenterMatchmakingQueuesApi>(instance);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterMatchmakingQueueCreateRequest gameCenterMatchmakingQueueCreateRequest = null;
            //var response = instance.GameCenterMatchmakingQueuesCreateInstance(gameCenterMatchmakingQueueCreateRequest);
            //Assert.IsType<GameCenterMatchmakingQueueResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterMatchmakingQueuesDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(id, granularity, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueSizesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //string? filterGameCenterDetail = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesGetCollection
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesGetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? fieldsGameCenterMatchmakingQueues = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterMatchmakingQueuesGetCollection(fieldsGameCenterMatchmakingQueues, limit, include);
            //Assert.IsType<GameCenterMatchmakingQueuesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesGetInstance
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterMatchmakingQueues = null;
            //List<string>? include = null;
            //var response = instance.GameCenterMatchmakingQueuesGetInstance(id, fieldsGameCenterMatchmakingQueues, include);
            //Assert.IsType<GameCenterMatchmakingQueueResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(id, granularity, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueSizesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //string? filterGameCenterDetail = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(id, granularity, sort, limit);
            //Assert.IsType<GameCenterMatchmakingSessionsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterMatchmakingQueueUpdateRequest gameCenterMatchmakingQueueUpdateRequest = null;
            //var response = instance.GameCenterMatchmakingQueuesUpdateInstance(id, gameCenterMatchmakingQueueUpdateRequest);
            //Assert.IsType<GameCenterMatchmakingQueueResponse>(response);
        }
    }
}
