/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing MetricsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MetricsApiTests : IDisposable
    {
        private MetricsApi instance;

        public MetricsApiTests()
        {
            instance = new MetricsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MetricsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MetricsApi
            //Assert.IsType<MetricsApi>(instance);
        }

        /// <summary>
        /// Test AppsBetaTesterUsagesGetMetrics_0
        /// </summary>
        [Fact]
        public void AppsBetaTesterUsagesGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? period = null;
            //List<string>? groupBy = null;
            //string? filterBetaTesters = null;
            //int? limit = null;
            //var response = instance.AppsBetaTesterUsagesGetMetrics_0(id, period, groupBy, filterBetaTesters, limit);
            //Assert.IsType<AppsBetaTesterUsagesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test BetaGroupsBetaTesterUsagesGetMetrics_0
        /// </summary>
        [Fact]
        public void BetaGroupsBetaTesterUsagesGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? period = null;
            //List<string>? groupBy = null;
            //string? filterBetaTesters = null;
            //int? limit = null;
            //var response = instance.BetaGroupsBetaTesterUsagesGetMetrics_0(id, period, groupBy, filterBetaTesters, limit);
            //Assert.IsType<AppsBetaTesterUsagesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test BetaTestersBetaTesterUsagesGetMetrics_0
        /// </summary>
        [Fact]
        public void BetaTestersBetaTesterUsagesGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filterApps = null;
            //string? period = null;
            //int? limit = null;
            //var response = instance.BetaTestersBetaTesterUsagesGetMetrics_0(id, filterApps, period, limit);
            //Assert.IsType<BetaTesterUsagesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test BuildsBetaBuildUsagesGetMetrics_0
        /// </summary>
        [Fact]
        public void BuildsBetaBuildUsagesGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.BuildsBetaBuildUsagesGetMetrics_0(id, limit);
            //Assert.IsType<BetaBuildUsagesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0(id, granularity, groupBy, filterResult, sort, limit);
            //Assert.IsType<GameCenterMatchmakingAppRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0(id, granularity, groupBy, filterResult, sort, limit);
            //Assert.IsType<GameCenterMatchmakingAppRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0(id, granularity, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueSizesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //string? filterGameCenterDetail = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0(id, granularity, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueSizesV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //string? filterGameCenterDetail = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0(id, granularity, groupBy, filterResult, filterGameCenterDetail, sort, limit);
            //Assert.IsType<GameCenterMatchmakingQueueRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0(id, granularity, sort, limit);
            //Assert.IsType<GameCenterMatchmakingSessionsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //string? filterGameCenterMatchmakingQueue = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0(id, granularity, groupBy, filterResult, filterGameCenterMatchmakingQueue, sort, limit);
            //Assert.IsType<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterGameCenterMatchmakingQueue = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit);
            //Assert.IsType<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterGameCenterMatchmakingQueue = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit);
            //Assert.IsType<GameCenterMatchmakingRuleErrorsV1MetricResponse>(response);
        }
    }
}
