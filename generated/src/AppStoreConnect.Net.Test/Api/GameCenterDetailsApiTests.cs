/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterDetailsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterDetailsApiTests : IDisposable
    {
        private GameCenterDetailsApi instance;

        public GameCenterDetailsApiTests()
        {
            instance = new GameCenterDetailsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterDetailsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterDetailsApi
            //Assert.IsType<GameCenterDetailsApi>(instance);
        }

        /// <summary>
        /// Test GameCenterDetailsAchievementReleasesGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsAchievementReleasesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterLive = null;
            //List<string>? filterGameCenterAchievement = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterDetailsAchievementReleasesGetToManyRelated(id, filterLive, filterGameCenterAchievement, fieldsGameCenterAchievementReleases, fieldsGameCenterDetails, fieldsGameCenterAchievements, limit, include);
            //Assert.IsType<GameCenterAchievementReleasesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsClassicMatchmakingRequestsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterDetailsClassicMatchmakingRequestsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterDetailsClassicMatchmakingRequestsGetMetrics(id, granularity, groupBy, filterResult, sort, limit);
            //Assert.IsType<GameCenterMatchmakingAppRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterDetailsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterDetailCreateRequest gameCenterDetailCreateRequest = null;
            //var response = instance.GameCenterDetailsCreateInstance(gameCenterDetailCreateRequest);
            //Assert.IsType<GameCenterDetailResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterAchievementsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterAchievementsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterReferenceName = null;
            //List<string>? filterArchived = null;
            //List<string>? filterId = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterDetailsGameCenterAchievementsGetToManyRelated(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, limit, include, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterAchievementsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterAchievementsGetToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterAchievementsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.GameCenterDetailsGameCenterAchievementsGetToManyRelationship(id, limit);
            //Assert.IsType<GameCenterDetailGameCenterAchievementsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterDetailGameCenterAchievementsLinkagesRequest gameCenterDetailGameCenterAchievementsLinkagesRequest = null;
            //instance.GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship(id, gameCenterDetailGameCenterAchievementsLinkagesRequest);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterAppVersionsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterAppVersionsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterEnabled = null;
            //List<string>? fieldsGameCenterAppVersions = null;
            //List<string>? fieldsAppStoreVersions = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitCompatibilityVersions = null;
            //var response = instance.GameCenterDetailsGameCenterAppVersionsGetToManyRelated(id, filterEnabled, fieldsGameCenterAppVersions, fieldsAppStoreVersions, limit, include, limitCompatibilityVersions);
            //Assert.IsType<GameCenterAppVersionsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterGroupGetToOneRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterGroupGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? include = null;
            //int? limitGameCenterDetails = null;
            //int? limitGameCenterLeaderboards = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitGameCenterAchievements = null;
            //var response = instance.GameCenterDetailsGameCenterGroupGetToOneRelated(id, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, include, limitGameCenterDetails, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements);
            //Assert.IsType<GameCenterGroupResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterReferenceName = null;
            //List<string>? filterId = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboardSetLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSetReleases = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitGameCenterLeaderboards = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated(id, filterReferenceName, filterId, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, limit, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases);
            //Assert.IsType<GameCenterLeaderboardSetsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship(id, limit);
            //Assert.IsType<GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest = null;
            //instance.GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship(id, gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterLeaderboardsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterReferenceName = null;
            //List<string>? filterArchived = null;
            //List<string>? filterId = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterLeaderboardLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterDetailsGameCenterLeaderboardsGetToManyRelated(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterLeaderboardsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship(id, limit);
            //Assert.IsType<GameCenterDetailGameCenterLeaderboardsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterDetailGameCenterLeaderboardsLinkagesRequest gameCenterDetailGameCenterLeaderboardsLinkagesRequest = null;
            //instance.GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship(id, gameCenterDetailGameCenterLeaderboardsLinkagesRequest);
        }

        /// <summary>
        /// Test GameCenterDetailsGetInstance
        /// </summary>
        [Fact]
        public void GameCenterDetailsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterAppVersions = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //List<string>? fieldsGameCenterLeaderboardSetReleases = null;
            //List<string>? include = null;
            //int? limitAchievementReleases = null;
            //int? limitGameCenterAchievements = null;
            //int? limitGameCenterAppVersions = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitGameCenterLeaderboards = null;
            //int? limitLeaderboardReleases = null;
            //int? limitLeaderboardSetReleases = null;
            //var response = instance.GameCenterDetailsGetInstance(id, fieldsGameCenterDetails, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, include, limitAchievementReleases, limitGameCenterAchievements, limitGameCenterAppVersions, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards, limitLeaderboardReleases, limitLeaderboardSetReleases);
            //Assert.IsType<GameCenterDetailResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsLeaderboardReleasesGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsLeaderboardReleasesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterLive = null;
            //List<string>? filterGameCenterLeaderboard = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterDetailsLeaderboardReleasesGetToManyRelated(id, filterLive, filterGameCenterLeaderboard, fieldsGameCenterLeaderboardReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, limit, include);
            //Assert.IsType<GameCenterLeaderboardReleasesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsLeaderboardSetReleasesGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterLive = null;
            //List<string>? filterGameCenterLeaderboardSet = null;
            //List<string>? fieldsGameCenterLeaderboardSetReleases = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterDetailsLeaderboardSetReleasesGetToManyRelated(id, filterLive, filterGameCenterLeaderboardSet, fieldsGameCenterLeaderboardSetReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboardSets, limit, include);
            //Assert.IsType<GameCenterLeaderboardSetReleasesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(id, granularity, groupBy, filterResult, sort, limit);
            //Assert.IsType<GameCenterMatchmakingAppRequestsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterDetailsUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterDetailsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterDetailUpdateRequest gameCenterDetailUpdateRequest = null;
            //var response = instance.GameCenterDetailsUpdateInstance(id, gameCenterDetailUpdateRequest);
            //Assert.IsType<GameCenterDetailResponse>(response);
        }
    }
}
