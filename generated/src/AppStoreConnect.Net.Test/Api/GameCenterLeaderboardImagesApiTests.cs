/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterLeaderboardImagesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterLeaderboardImagesApiTests : IDisposable
    {
        private GameCenterLeaderboardImagesApi instance;

        public GameCenterLeaderboardImagesApiTests()
        {
            instance = new GameCenterLeaderboardImagesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterLeaderboardImagesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterLeaderboardImagesApi
            //Assert.IsType<GameCenterLeaderboardImagesApi>(instance);
        }

        /// <summary>
        /// Test GameCenterLeaderboardImagesCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardImagesCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterLeaderboardImageCreateRequest gameCenterLeaderboardImageCreateRequest = null;
            //var response = instance.GameCenterLeaderboardImagesCreateInstance(gameCenterLeaderboardImageCreateRequest);
            //Assert.IsType<GameCenterLeaderboardImageResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardImagesDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardImagesDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterLeaderboardImagesDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterLeaderboardImagesGetInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardImagesGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterLeaderboardImages = null;
            //List<string>? include = null;
            //var response = instance.GameCenterLeaderboardImagesGetInstance(id, fieldsGameCenterLeaderboardImages, include);
            //Assert.IsType<GameCenterLeaderboardImageResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardImagesUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardImagesUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterLeaderboardImageUpdateRequest gameCenterLeaderboardImageUpdateRequest = null;
            //var response = instance.GameCenterLeaderboardImagesUpdateInstance(id, gameCenterLeaderboardImageUpdateRequest);
            //Assert.IsType<GameCenterLeaderboardImageResponse>(response);
        }
    }
}
