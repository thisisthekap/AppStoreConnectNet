/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing AlternativeDistributionPackagesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AlternativeDistributionPackagesApiTests : IDisposable
    {
        private AlternativeDistributionPackagesApi instance;

        public AlternativeDistributionPackagesApiTests()
        {
            instance = new AlternativeDistributionPackagesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AlternativeDistributionPackagesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AlternativeDistributionPackagesApi
            //Assert.IsType<AlternativeDistributionPackagesApi>(instance);
        }

        /// <summary>
        /// Test AlternativeDistributionPackagesCreateInstance
        /// </summary>
        [Fact]
        public void AlternativeDistributionPackagesCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlternativeDistributionPackageCreateRequest alternativeDistributionPackageCreateRequest = null;
            //var response = instance.AlternativeDistributionPackagesCreateInstance(alternativeDistributionPackageCreateRequest);
            //Assert.IsType<AlternativeDistributionPackageResponse>(response);
        }

        /// <summary>
        /// Test AlternativeDistributionPackagesGetInstance
        /// </summary>
        [Fact]
        public void AlternativeDistributionPackagesGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsAlternativeDistributionPackages = null;
            //List<string>? fieldsAlternativeDistributionPackageVersions = null;
            //List<string>? include = null;
            //int? limitVersions = null;
            //var response = instance.AlternativeDistributionPackagesGetInstance(id, fieldsAlternativeDistributionPackages, fieldsAlternativeDistributionPackageVersions, include, limitVersions);
            //Assert.IsType<AlternativeDistributionPackageResponse>(response);
        }

        /// <summary>
        /// Test AlternativeDistributionPackagesVersionsGetToManyRelated
        /// </summary>
        [Fact]
        public void AlternativeDistributionPackagesVersionsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterState = null;
            //List<string>? fieldsAlternativeDistributionPackageVersions = null;
            //List<string>? fieldsAlternativeDistributionPackageVariants = null;
            //List<string>? fieldsAlternativeDistributionPackageDeltas = null;
            //List<string>? fieldsAlternativeDistributionPackages = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitVariants = null;
            //int? limitDeltas = null;
            //var response = instance.AlternativeDistributionPackagesVersionsGetToManyRelated(id, filterState, fieldsAlternativeDistributionPackageVersions, fieldsAlternativeDistributionPackageVariants, fieldsAlternativeDistributionPackageDeltas, fieldsAlternativeDistributionPackages, limit, include, limitVariants, limitDeltas);
            //Assert.IsType<AlternativeDistributionPackageVersionsResponse>(response);
        }
    }
}
