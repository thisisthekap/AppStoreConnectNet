/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterGroupsApiTests : IDisposable
    {
        private GameCenterGroupsApi instance;

        public GameCenterGroupsApiTests()
        {
            instance = new GameCenterGroupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterGroupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterGroupsApi
            //Assert.IsType<GameCenterGroupsApi>(instance);
        }

        /// <summary>
        /// Test GameCenterGroupsCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterGroupsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterGroupCreateRequest gameCenterGroupCreateRequest = null;
            //var response = instance.GameCenterGroupsCreateInstance(gameCenterGroupCreateRequest);
            //Assert.IsType<GameCenterGroupResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterGroupsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterGroupsDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterAchievementsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterAchievementsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterReferenceName = null;
            //List<string>? filterArchived = null;
            //List<string>? filterId = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterGroupsGameCenterAchievementsGetToManyRelated(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, limit, include, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterAchievementsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterAchievementsGetToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterAchievementsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.GameCenterGroupsGameCenterAchievementsGetToManyRelationship(id, limit);
            //Assert.IsType<GameCenterGroupGameCenterAchievementsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterGroupGameCenterAchievementsLinkagesRequest gameCenterGroupGameCenterAchievementsLinkagesRequest = null;
            //instance.GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(id, gameCenterGroupGameCenterAchievementsLinkagesRequest);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterDetailsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterDetailsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterGameCenterAppVersionsEnabled = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsApps = null;
            //List<string>? fieldsGameCenterAppVersions = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //List<string>? fieldsGameCenterLeaderboardSetReleases = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitGameCenterAppVersions = null;
            //int? limitGameCenterLeaderboards = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitGameCenterAchievements = null;
            //int? limitAchievementReleases = null;
            //int? limitLeaderboardReleases = null;
            //int? limitLeaderboardSetReleases = null;
            //var response = instance.GameCenterGroupsGameCenterDetailsGetToManyRelated(id, filterGameCenterAppVersionsEnabled, fieldsGameCenterDetails, fieldsApps, fieldsGameCenterAppVersions, fieldsGameCenterGroups, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, fieldsGameCenterAchievementReleases, fieldsGameCenterLeaderboardReleases, fieldsGameCenterLeaderboardSetReleases, limit, include, limitGameCenterAppVersions, limitGameCenterLeaderboards, limitGameCenterLeaderboardSets, limitGameCenterAchievements, limitAchievementReleases, limitLeaderboardReleases, limitLeaderboardSetReleases);
            //Assert.IsType<GameCenterDetailsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterReferenceName = null;
            //List<string>? filterId = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboardSetLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSetReleases = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitGameCenterLeaderboards = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(id, filterReferenceName, filterId, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, limit, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases);
            //Assert.IsType<GameCenterLeaderboardSetsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(id, limit);
            //Assert.IsType<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest = null;
            //instance.GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(id, gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterLeaderboardsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterReferenceName = null;
            //List<string>? filterArchived = null;
            //List<string>? filterId = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterLeaderboardLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterGroupsGameCenterLeaderboardsGetToManyRelated(id, filterReferenceName, filterArchived, filterId, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, limit, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterLeaderboardsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //var response = instance.GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(id, limit);
            //Assert.IsType<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship
        /// </summary>
        [Fact]
        public void GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterGroupGameCenterLeaderboardsLinkagesRequest gameCenterGroupGameCenterLeaderboardsLinkagesRequest = null;
            //instance.GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(id, gameCenterGroupGameCenterLeaderboardsLinkagesRequest);
        }

        /// <summary>
        /// Test GameCenterGroupsGetCollection
        /// </summary>
        [Fact]
        public void GameCenterGroupsGetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? filterGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //int? limit = null;
            //List<string>? include = null;
            //int? limitGameCenterAchievements = null;
            //int? limitGameCenterDetails = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitGameCenterLeaderboards = null;
            //var response = instance.GameCenterGroupsGetCollection(filterGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, limit, include, limitGameCenterAchievements, limitGameCenterDetails, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards);
            //Assert.IsType<GameCenterGroupsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsGetInstance
        /// </summary>
        [Fact]
        public void GameCenterGroupsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? include = null;
            //int? limitGameCenterAchievements = null;
            //int? limitGameCenterDetails = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitGameCenterLeaderboards = null;
            //var response = instance.GameCenterGroupsGetInstance(id, fieldsGameCenterGroups, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSets, fieldsGameCenterAchievements, include, limitGameCenterAchievements, limitGameCenterDetails, limitGameCenterLeaderboardSets, limitGameCenterLeaderboards);
            //Assert.IsType<GameCenterGroupResponse>(response);
        }

        /// <summary>
        /// Test GameCenterGroupsUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterGroupsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterGroupUpdateRequest gameCenterGroupUpdateRequest = null;
            //var response = instance.GameCenterGroupsUpdateInstance(id, gameCenterGroupUpdateRequest);
            //Assert.IsType<GameCenterGroupResponse>(response);
        }
    }
}
