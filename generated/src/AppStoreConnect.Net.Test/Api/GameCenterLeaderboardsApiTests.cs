/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterLeaderboardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterLeaderboardsApiTests : IDisposable
    {
        private GameCenterLeaderboardsApi instance;

        public GameCenterLeaderboardsApiTests()
        {
            instance = new GameCenterLeaderboardsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterLeaderboardsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterLeaderboardsApi
            //Assert.IsType<GameCenterLeaderboardsApi>(instance);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterLeaderboardCreateRequest gameCenterLeaderboardCreateRequest = null;
            //var response = instance.GameCenterLeaderboardsCreateInstance(gameCenterLeaderboardCreateRequest);
            //Assert.IsType<GameCenterLeaderboardResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterLeaderboardsDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsGetInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //List<string>? include = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterLeaderboardsGetInstance(id, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterLeaderboardResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsGroupLeaderboardGetToOneRelated
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterLeaderboardLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //List<string>? include = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterLeaderboardsGroupLeaderboardGetToOneRelated(id, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterLeaderboardResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsGroupLeaderboardGetToOneRelationship
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GameCenterLeaderboardsGroupLeaderboardGetToOneRelationship(id);
            //Assert.IsType<GameCenterLeaderboardGroupLeaderboardLinkageResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterLeaderboardGroupLeaderboardLinkageRequest gameCenterLeaderboardGroupLeaderboardLinkageRequest = null;
            //instance.GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship(id, gameCenterLeaderboardGroupLeaderboardLinkageRequest);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsLocalizationsGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsLocalizationsGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterLeaderboardLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardImages = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterLeaderboardsLocalizationsGetToManyRelated(id, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardImages, limit, include);
            //Assert.IsType<GameCenterLeaderboardLocalizationsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsReleasesGetToManyRelated
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsReleasesGetToManyRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? filterLive = null;
            //List<string>? filterGameCenterDetail = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterLeaderboardsReleasesGetToManyRelated(id, filterLive, filterGameCenterDetail, fieldsGameCenterLeaderboardReleases, fieldsGameCenterDetails, fieldsGameCenterLeaderboards, limit, include);
            //Assert.IsType<GameCenterLeaderboardReleasesResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardsUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterLeaderboardUpdateRequest gameCenterLeaderboardUpdateRequest = null;
            //var response = instance.GameCenterLeaderboardsUpdateInstance(id, gameCenterLeaderboardUpdateRequest);
            //Assert.IsType<GameCenterLeaderboardResponse>(response);
        }
    }
}
