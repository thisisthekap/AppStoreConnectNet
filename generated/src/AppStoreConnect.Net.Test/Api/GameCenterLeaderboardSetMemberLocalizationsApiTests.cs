/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterLeaderboardSetMemberLocalizationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterLeaderboardSetMemberLocalizationsApiTests : IDisposable
    {
        private GameCenterLeaderboardSetMemberLocalizationsApi instance;

        public GameCenterLeaderboardSetMemberLocalizationsApiTests()
        {
            instance = new GameCenterLeaderboardSetMemberLocalizationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterLeaderboardSetMemberLocalizationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterLeaderboardSetMemberLocalizationsApi
            //Assert.IsType<GameCenterLeaderboardSetMemberLocalizationsApi>(instance);
        }

        /// <summary>
        /// Test GameCenterLeaderboardSetMemberLocalizationsCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardSetMemberLocalizationsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterLeaderboardSetMemberLocalizationCreateRequest gameCenterLeaderboardSetMemberLocalizationCreateRequest = null;
            //var response = instance.GameCenterLeaderboardSetMemberLocalizationsCreateInstance(gameCenterLeaderboardSetMemberLocalizationCreateRequest);
            //Assert.IsType<GameCenterLeaderboardSetMemberLocalizationResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardSetMemberLocalizationsDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterLeaderboardSetMemberLocalizationsDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterLeaderboardLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboardReleases = null;
            //List<string>? include = null;
            //int? limitGameCenterLeaderboardSets = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated(id, fieldsGameCenterLeaderboards, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboardLocalizations, fieldsGameCenterLeaderboardReleases, include, limitGameCenterLeaderboardSets, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterLeaderboardResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterLeaderboardSetLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //List<string>? fieldsGameCenterLeaderboardSetReleases = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitGameCenterLeaderboards = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated(id, fieldsGameCenterLeaderboardSets, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterLeaderboardSetLocalizations, fieldsGameCenterLeaderboards, fieldsGameCenterLeaderboardSetReleases, include, limitLocalizations, limitGameCenterLeaderboards, limitReleases);
            //Assert.IsType<GameCenterLeaderboardSetResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardSetMemberLocalizationsGetCollection
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardSetMemberLocalizationsGetCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> filterGameCenterLeaderboardSet = null;
            //List<string> filterGameCenterLeaderboard = null;
            //List<string>? fieldsGameCenterLeaderboardSetMemberLocalizations = null;
            //List<string>? fieldsGameCenterLeaderboardSets = null;
            //List<string>? fieldsGameCenterLeaderboards = null;
            //int? limit = null;
            //List<string>? include = null;
            //var response = instance.GameCenterLeaderboardSetMemberLocalizationsGetCollection(filterGameCenterLeaderboardSet, filterGameCenterLeaderboard, fieldsGameCenterLeaderboardSetMemberLocalizations, fieldsGameCenterLeaderboardSets, fieldsGameCenterLeaderboards, limit, include);
            //Assert.IsType<GameCenterLeaderboardSetMemberLocalizationsResponse>(response);
        }

        /// <summary>
        /// Test GameCenterLeaderboardSetMemberLocalizationsUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterLeaderboardSetMemberLocalizationUpdateRequest gameCenterLeaderboardSetMemberLocalizationUpdateRequest = null;
            //var response = instance.GameCenterLeaderboardSetMemberLocalizationsUpdateInstance(id, gameCenterLeaderboardSetMemberLocalizationUpdateRequest);
            //Assert.IsType<GameCenterLeaderboardSetMemberLocalizationResponse>(response);
        }
    }
}
