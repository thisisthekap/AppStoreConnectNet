/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterAchievementLocalizationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterAchievementLocalizationsApiTests : IDisposable
    {
        private GameCenterAchievementLocalizationsApi instance;

        public GameCenterAchievementLocalizationsApiTests()
        {
            instance = new GameCenterAchievementLocalizationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterAchievementLocalizationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterAchievementLocalizationsApi
            //Assert.IsType<GameCenterAchievementLocalizationsApi>(instance);
        }

        /// <summary>
        /// Test GameCenterAchievementLocalizationsCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementLocalizationsCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterAchievementLocalizationCreateRequest gameCenterAchievementLocalizationCreateRequest = null;
            //var response = instance.GameCenterAchievementLocalizationsCreateInstance(gameCenterAchievementLocalizationCreateRequest);
            //Assert.IsType<GameCenterAchievementLocalizationResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementLocalizationsDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementLocalizationsDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterAchievementLocalizationsDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated
        /// </summary>
        [Fact]
        public void GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterDetails = null;
            //List<string>? fieldsGameCenterGroups = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? fieldsGameCenterAchievementReleases = null;
            //List<string>? include = null;
            //int? limitLocalizations = null;
            //int? limitReleases = null;
            //var response = instance.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated(id, fieldsGameCenterAchievements, fieldsGameCenterDetails, fieldsGameCenterGroups, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievementReleases, include, limitLocalizations, limitReleases);
            //Assert.IsType<GameCenterAchievementResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated
        /// </summary>
        [Fact]
        public void GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterAchievementImages = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? include = null;
            //var response = instance.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated(id, fieldsGameCenterAchievementImages, fieldsGameCenterAchievementLocalizations, include);
            //Assert.IsType<GameCenterAchievementImageResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementLocalizationsGetInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementLocalizationsGetInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string>? fieldsGameCenterAchievementLocalizations = null;
            //List<string>? fieldsGameCenterAchievements = null;
            //List<string>? fieldsGameCenterAchievementImages = null;
            //List<string>? include = null;
            //var response = instance.GameCenterAchievementLocalizationsGetInstance(id, fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievements, fieldsGameCenterAchievementImages, include);
            //Assert.IsType<GameCenterAchievementLocalizationResponse>(response);
        }

        /// <summary>
        /// Test GameCenterAchievementLocalizationsUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterAchievementLocalizationsUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterAchievementLocalizationUpdateRequest gameCenterAchievementLocalizationUpdateRequest = null;
            //var response = instance.GameCenterAchievementLocalizationsUpdateInstance(id, gameCenterAchievementLocalizationUpdateRequest);
            //Assert.IsType<GameCenterAchievementLocalizationResponse>(response);
        }
    }
}
