/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using AppStoreConnect.Net.Client;
using AppStoreConnect.Net.Api;
// uncomment below to import models
//using AppStoreConnect.Net.Model;

namespace AppStoreConnect.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GameCenterMatchmakingRulesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameCenterMatchmakingRulesApiTests : IDisposable
    {
        private GameCenterMatchmakingRulesApi instance;

        public GameCenterMatchmakingRulesApiTests()
        {
            instance = new GameCenterMatchmakingRulesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameCenterMatchmakingRulesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' GameCenterMatchmakingRulesApi
            //Assert.IsType<GameCenterMatchmakingRulesApi>(instance);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesCreateInstance
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesCreateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameCenterMatchmakingRuleCreateRequest gameCenterMatchmakingRuleCreateRequest = null;
            //var response = instance.GameCenterMatchmakingRulesCreateInstance(gameCenterMatchmakingRuleCreateRequest);
            //Assert.IsType<GameCenterMatchmakingRuleResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesDeleteInstance
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesDeleteInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.GameCenterMatchmakingRulesDeleteInstance(id);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterResult = null;
            //string? filterGameCenterMatchmakingQueue = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(id, granularity, groupBy, filterResult, filterGameCenterMatchmakingQueue, sort, limit);
            //Assert.IsType<GameCenterMatchmakingBooleanRuleResultsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterGameCenterMatchmakingQueue = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit);
            //Assert.IsType<GameCenterMatchmakingNumberRuleResultsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string granularity = null;
            //List<string>? groupBy = null;
            //string? filterGameCenterMatchmakingQueue = null;
            //List<string>? sort = null;
            //int? limit = null;
            //var response = instance.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(id, granularity, groupBy, filterGameCenterMatchmakingQueue, sort, limit);
            //Assert.IsType<GameCenterMatchmakingRuleErrorsV1MetricResponse>(response);
        }

        /// <summary>
        /// Test GameCenterMatchmakingRulesUpdateInstance
        /// </summary>
        [Fact]
        public void GameCenterMatchmakingRulesUpdateInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //GameCenterMatchmakingRuleUpdateRequest gameCenterMatchmakingRuleUpdateRequest = null;
            //var response = instance.GameCenterMatchmakingRulesUpdateInstance(id, gameCenterMatchmakingRuleUpdateRequest);
            //Assert.IsType<GameCenterMatchmakingRuleResponse>(response);
        }
    }
}
